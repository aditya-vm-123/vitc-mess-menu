// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "linux_x64"
// Module: zapp_user_main
// Flags: soundNullSafety(true), enableAsserts(true)
define('zapp_user_main', ['dart_sdk', 'flutter_sdk'], (function load__zapp_user_main(dart_sdk, flutter_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const js = dart_sdk.js;
  const ui = dart_sdk.ui;
  const _internal = dart_sdk._internal;
  const _js_helper = dart_sdk._js_helper;
  const typed_data = dart_sdk.typed_data;
  const convert = dart_sdk.convert;
  const _native_typed_data = dart_sdk._native_typed_data;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const app = flutter_sdk.src__material__app;
  const theme_data = flutter_sdk.src__material__theme_data;
  const colors = flutter_sdk.src__material__colors;
  const framework = flutter_sdk.src__widgets__framework;
  const scaffold = flutter_sdk.src__material__scaffold;
  const app_bar = flutter_sdk.src__material__app_bar;
  const text = flutter_sdk.src__widgets__text;
  const scroll_view = flutter_sdk.src__widgets__scroll_view;
  const card = flutter_sdk.src__material__card;
  const edge_insets = flutter_sdk.src__painting__edge_insets;
  const expansion_tile = flutter_sdk.src__material__expansion_tile;
  const list_tile = flutter_sdk.src__material__list_tile;
  const binding = flutter_sdk.src__widgets__binding;
  const platform = flutter_sdk.src__foundation__platform;
  const $default = flutter_sdk.src__default;
  const message_codec = flutter_sdk.src__services__message_codec;
  const platform_channel = flutter_sdk.src__services__platform_channel;
  const message_codecs = flutter_sdk.src__services__message_codecs;
  const collections = flutter_sdk.src__foundation__collections;
  const diagnostics = flutter_sdk.src__foundation__diagnostics;
  var $46zapp_entry = Object.create(dart.library);
  var main = Object.create(dart.library);
  var web_plugin_registrant = Object.create(dart.library);
  var flutter_local_notifications = Object.create(dart.library);
  var flutter_local_notifications_linux = Object.create(dart.library);
  var flutter_local_notifications_platform_interface = Object.create(dart.library);
  var flutter_local_notifications_plugin = Object.create(dart.library);
  var initialization_settings = Object.create(dart.library);
  var notification_details = Object.create(dart.library);
  var platform_flutter_local_notifications = Object.create(dart.library);
  var bitmap = Object.create(dart.library);
  var categories = Object.create(dart.library);
  var enums = Object.create(dart.library);
  var icon = Object.create(dart.library);
  var initialization_settings$ = Object.create(dart.library);
  var message = Object.create(dart.library);
  var notification_channel = Object.create(dart.library);
  var notification_channel_group = Object.create(dart.library);
  var notification_details$ = Object.create(dart.library);
  var notification_sound = Object.create(dart.library);
  var person = Object.create(dart.library);
  var big_picture_style_information = Object.create(dart.library);
  var big_text_style_information = Object.create(dart.library);
  var default_style_information = Object.create(dart.library);
  var inbox_style_information = Object.create(dart.library);
  var media_style_information = Object.create(dart.library);
  var messaging_style_information = Object.create(dart.library);
  var style_information = Object.create(dart.library);
  var initialization_settings$0 = Object.create(dart.library);
  var interruption_level = Object.create(dart.library);
  var notification_action = Object.create(dart.library);
  var notification_action_option = Object.create(dart.library);
  var notification_attachment = Object.create(dart.library);
  var notification_category = Object.create(dart.library);
  var notification_category_option = Object.create(dart.library);
  var notification_details$0 = Object.create(dart.library);
  var enums$ = Object.create(dart.library);
  var typedefs = Object.create(dart.library);
  var types = Object.create(dart.library);
  var flutter_local_notifications_stub = Object.create(dart.library);
  var capabilities = Object.create(dart.library);
  var categories$ = Object.create(dart.library);
  var enums$0 = Object.create(dart.library);
  var icon$ = Object.create(dart.library);
  var initialization_settings$1 = Object.create(dart.library);
  var location = Object.create(dart.library);
  var notification_details$1 = Object.create(dart.library);
  var sound = Object.create(dart.library);
  var timeout = Object.create(dart.library);
  var plugin_platform_interface = Object.create(dart.library);
  var types$ = Object.create(dart.library);
  var helpers = Object.create(dart.library);
  var typedefs$ = Object.create(dart.library);
  var timezone = Object.create(dart.library);
  var callback_dispatcher = Object.create(dart.library);
  var helpers$ = Object.create(dart.library);
  var method_channel_mappers = Object.create(dart.library);
  var mappers = Object.create(dart.library);
  var type_mappers = Object.create(dart.library);
  var tz_datetime_mapper = Object.create(dart.library);
  var flutter_local_notifications_platform_linux = Object.create(dart.library);
  var hint = Object.create(dart.library);
  var date_time = Object.create(dart.library);
  var env = Object.create(dart.library);
  var exceptions = Object.create(dart.library);
  var location$ = Object.create(dart.library);
  var location_database = Object.create(dart.library);
  var tzdb = Object.create(dart.library);
  var $toString = dartx.toString;
  var $entries = dartx.entries;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $containsKey = dartx.containsKey;
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $addAll = dartx.addAll;
  var $isEmpty = dartx.isEmpty;
  var $hashCode = dartx.hashCode;
  var $ceil = dartx.ceil;
  var $leftShift = dartx['<<'];
  var $remainder = dartx.remainder;
  var $truncate = dartx.truncate;
  var $abs = dartx.abs;
  var $split = dartx.split;
  var $replaceAll = dartx.replaceAll;
  var $sign = dartx.sign;
  var $modulo = dartx['%'];
  var $compareTo = dartx.compareTo;
  var $length = dartx.length;
  var $first = dartx.first;
  var $isNotEmpty = dartx.isNotEmpty;
  var $runtimeType = dartx.runtimeType;
  var $clear = dartx.clear;
  var $values = dartx.values;
  var $sort = dartx.sort;
  var $add = dartx.add;
  var $buffer = dartx.buffer;
  var $asByteData = dartx.asByteData;
  var $setUint32 = dartx.setUint32;
  var $setAll = dartx.setAll;
  var $offsetInBytes = dartx.offsetInBytes;
  var $lengthInBytes = dartx.lengthInBytes;
  var $getUint32 = dartx.getUint32;
  var $asUint8List = dartx.asUint8List;
  var $putIfAbsent = dartx.putIfAbsent;
  var $setUint8 = dartx.setUint8;
  var $codeUnits = dartx.codeUnits;
  var $setInt32 = dartx.setInt32;
  var $floorToDouble = dartx.floorToDouble;
  var $toDouble = dartx.toDouble;
  var $setFloat64 = dartx.setFloat64;
  var $getInt32 = dartx.getInt32;
  var $getUint8 = dartx.getUint8;
  var $getFloat64 = dartx.getFloat64;
  var $toInt = dartx.toInt;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    ListOfString: () => (T.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListOfStringTodynamic: () => (T.ListOfStringTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T.ListOfString()])))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    dynamicToNull: () => (T.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    VoidToNull: () => (T.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    ObjectAndStackTraceTovoid: () => (T.ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))(),
    ZoneAndZoneDelegateAndZone__Tovoid: () => (T.ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))(),
    MapOfString$String: () => (T.MapOfString$String = dart.constFn(core.Map$(core.String, core.String)))(),
    MapEntryOfString$String: () => (T.MapEntryOfString$String = dart.constFn(core.MapEntry$(core.String, core.String)))(),
    MapEntryOfString$StringToListTile: () => (T.MapEntryOfString$StringToListTile = dart.constFn(dart.fnType(list_tile.ListTile, [T.MapEntryOfString$String()])))(),
    MapEntryOfString$MapOfString$String: () => (T.MapEntryOfString$MapOfString$String = dart.constFn(core.MapEntry$(core.String, T.MapOfString$String())))(),
    MapEntryOfString$MapOfString$StringToCard: () => (T.MapEntryOfString$MapOfString$StringToCard = dart.constFn(dart.fnType(card.Card, [T.MapEntryOfString$MapOfString$String()])))(),
    NotificationAppLaunchDetailsN: () => (T.NotificationAppLaunchDetailsN = dart.constFn(dart.nullable(types$.NotificationAppLaunchDetails)))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    ExpandoOfObject: () => (T.ExpandoOfObject = dart.constFn(core.Expando$(core.Object)))(),
    boolN: () => (T.boolN = dart.constFn(dart.nullable(core.bool)))(),
    MapN: () => (T.MapN = dart.constFn(dart.nullable(core.Map)))(),
    intN: () => (T.intN = dart.constFn(dart.nullable(core.int)))(),
    StringN: () => (T.StringN = dart.constFn(dart.nullable(core.String)))(),
    MapToPendingNotificationRequest: () => (T.MapToPendingNotificationRequest = dart.constFn(dart.fnType(types$.PendingNotificationRequest, [core.Map])))(),
    JSArrayOfPendingNotificationRequest: () => (T.JSArrayOfPendingNotificationRequest = dart.constFn(_interceptors.JSArray$(types$.PendingNotificationRequest)))(),
    ListOfPendingNotificationRequest: () => (T.ListOfPendingNotificationRequest = dart.constFn(core.List$(types$.PendingNotificationRequest)))(),
    MapToActiveNotification: () => (T.MapToActiveNotification = dart.constFn(dart.fnType(types$.ActiveNotification, [core.Map])))(),
    JSArrayOfActiveNotification: () => (T.JSArrayOfActiveNotification = dart.constFn(_interceptors.JSArray$(types$.ActiveNotification)))(),
    ListOfActiveNotification: () => (T.ListOfActiveNotification = dart.constFn(core.List$(types$.ActiveNotification)))(),
    FutureOrOfbool: () => (T.FutureOrOfbool = dart.constFn(async.FutureOr$(core.bool)))(),
    IdentityMapOfString$Object: () => (T.IdentityMapOfString$Object = dart.constFn(_js_helper.IdentityMap$(core.String, core.Object)))(),
    ObjectN: () => (T.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    IdentityMapOfString$ObjectN: () => (T.IdentityMapOfString$ObjectN = dart.constFn(_js_helper.IdentityMap$(core.String, T.ObjectN())))(),
    AndroidServiceForegroundTypeToint: () => (T.AndroidServiceForegroundTypeToint = dart.constFn(dart.fnType(core.int, [enums.AndroidServiceForegroundType])))(),
    dynamicToMessage: () => (T.dynamicToMessage = dart.constFn(dart.fnType(message.Message, [dart.dynamic])))(),
    ListOfMessage: () => (T.ListOfMessage = dart.constFn(core.List$(message.Message)))(),
    ListNOfMessage: () => (T.ListNOfMessage = dart.constFn(dart.nullable(T.ListOfMessage())))(),
    MessagingStyleInformationN: () => (T.MessagingStyleInformationN = dart.constFn(dart.nullable(messaging_style_information.MessagingStyleInformation)))(),
    Int64ListN: () => (T.Int64ListN = dart.constFn(dart.nullable(typed_data.Int64List)))(),
    MapToAndroidNotificationChannel: () => (T.MapToAndroidNotificationChannel = dart.constFn(dart.fnType(notification_channel.AndroidNotificationChannel, [core.Map])))(),
    ListOfAndroidNotificationChannel: () => (T.ListOfAndroidNotificationChannel = dart.constFn(core.List$(notification_channel.AndroidNotificationChannel)))(),
    ListNOfAndroidNotificationChannel: () => (T.ListNOfAndroidNotificationChannel = dart.constFn(dart.nullable(T.ListOfAndroidNotificationChannel())))(),
    FutureOfvoid: () => (T.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    IdentityMapOfString$bool: () => (T.IdentityMapOfString$bool = dart.constFn(_js_helper.IdentityMap$(core.String, core.bool)))(),
    IdentityMapOfString$boolN: () => (T.IdentityMapOfString$boolN = dart.constFn(_js_helper.IdentityMap$(core.String, T.boolN())))(),
    JSArrayOfImportance: () => (T.JSArrayOfImportance = dart.constFn(_interceptors.JSArray$(enums.Importance)))(),
    JSArrayOfPriority: () => (T.JSArrayOfPriority = dart.constFn(_interceptors.JSArray$(enums.Priority)))(),
    JSArrayOfAudioAttributesUsage: () => (T.JSArrayOfAudioAttributesUsage = dart.constFn(_interceptors.JSArray$(enums.AudioAttributesUsage)))(),
    JSArrayOfDay: () => (T.JSArrayOfDay = dart.constFn(_interceptors.JSArray$(types.Day)))(),
    MapOfint$int: () => (T.MapOfint$int = dart.constFn(core.Map$(core.int, core.int)))(),
    JSArrayOfLinuxNotificationUrgency: () => (T.JSArrayOfLinuxNotificationUrgency = dart.constFn(_interceptors.JSArray$(enums$0.LinuxNotificationUrgency)))(),
    NotificationResponseTovoid: () => (T.NotificationResponseTovoid = dart.constFn(dart.fnType(dart.void, [types$.NotificationResponse])))(),
    NotificationResponseToNvoid: () => (T.NotificationResponseToNvoid = dart.constFn(dart.nullable(T.NotificationResponseTovoid())))(),
    dynamicToMap: () => (T.dynamicToMap = dart.constFn(dart.fnType(core.Map, [dart.dynamic])))(),
    MapOfString$dynamic: () => (T.MapOfString$dynamic = dart.constFn(core.Map$(core.String, dart.dynamic)))(),
    MapToMapOfString$dynamic: () => (T.MapToMapOfString$dynamic = dart.constFn(dart.fnType(T.MapOfString$dynamic(), [core.Map])))(),
    MapOfString$dynamicTovoid: () => (T.MapOfString$dynamicTovoid = dart.constFn(dart.fnType(dart.void, [T.MapOfString$dynamic()])))(),
    intNToNull: () => (T.intNToNull = dart.constFn(dart.fnType(core.Null, [T.intN()])))(),
    MapOfString$Object: () => (T.MapOfString$Object = dart.constFn(core.Map$(core.String, core.Object)))(),
    VoidToMapOfString$Object: () => (T.VoidToMapOfString$Object = dart.constFn(dart.fnType(T.MapOfString$Object(), [])))(),
    MapOfString$ObjectN: () => (T.MapOfString$ObjectN = dart.constFn(core.Map$(core.String, T.ObjectN())))(),
    VoidToMapOfString$ObjectN: () => (T.VoidToMapOfString$ObjectN = dart.constFn(dart.fnType(T.MapOfString$ObjectN(), [])))(),
    MessageToMapOfString$ObjectN: () => (T.MessageToMapOfString$ObjectN = dart.constFn(dart.fnType(T.MapOfString$ObjectN(), [message.Message])))(),
    BigPictureStyleInformationN: () => (T.BigPictureStyleInformationN = dart.constFn(dart.nullable(big_picture_style_information.BigPictureStyleInformation)))(),
    BigTextStyleInformationN: () => (T.BigTextStyleInformationN = dart.constFn(dart.nullable(big_text_style_information.BigTextStyleInformation)))(),
    InboxStyleInformationN: () => (T.InboxStyleInformationN = dart.constFn(dart.nullable(inbox_style_information.InboxStyleInformation)))(),
    MediaStyleInformationN: () => (T.MediaStyleInformationN = dart.constFn(dart.nullable(media_style_information.MediaStyleInformation)))(),
    DefaultStyleInformationN: () => (T.DefaultStyleInformationN = dart.constFn(dart.nullable(default_style_information.DefaultStyleInformation)))(),
    IdentityMapOfString$dynamic: () => (T.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    AndroidNotificationActionInputToMapOfString$dynamic: () => (T.AndroidNotificationActionInputToMapOfString$dynamic = dart.constFn(dart.fnType(T.MapOfString$dynamic(), [notification_details$.AndroidNotificationActionInput])))(),
    AndroidNotificationActionToMapOfString$dynamic: () => (T.AndroidNotificationActionToMapOfString$dynamic = dart.constFn(dart.fnType(T.MapOfString$dynamic(), [notification_details$.AndroidNotificationAction])))(),
    ListOfAndroidNotificationAction: () => (T.ListOfAndroidNotificationAction = dart.constFn(core.List$(notification_details$.AndroidNotificationAction)))(),
    ListNOfAndroidNotificationAction: () => (T.ListNOfAndroidNotificationAction = dart.constFn(dart.nullable(T.ListOfAndroidNotificationAction())))(),
    ListNOfAndroidNotificationActionToMapOfString$Object: () => (T.ListNOfAndroidNotificationActionToMapOfString$Object = dart.constFn(dart.fnType(T.MapOfString$Object(), [T.ListNOfAndroidNotificationAction()])))(),
    DarwinNotificationActionOptionToint: () => (T.DarwinNotificationActionOptionToint = dart.constFn(dart.fnType(core.int, [notification_action_option.DarwinNotificationActionOption])))(),
    DarwinNotificationActionToMapOfString$Object: () => (T.DarwinNotificationActionToMapOfString$Object = dart.constFn(dart.fnType(T.MapOfString$Object(), [notification_action.DarwinNotificationAction])))(),
    DarwinNotificationCategoryOptionToint: () => (T.DarwinNotificationCategoryOptionToint = dart.constFn(dart.fnType(core.int, [notification_category_option.DarwinNotificationCategoryOption])))(),
    DarwinNotificationCategoryToMapOfString$Object: () => (T.DarwinNotificationCategoryToMapOfString$Object = dart.constFn(dart.fnType(T.MapOfString$Object(), [notification_category.DarwinNotificationCategory])))(),
    DarwinNotificationAttachmentToMapOfString$Object: () => (T.DarwinNotificationAttachmentToMapOfString$Object = dart.constFn(dart.fnType(T.MapOfString$Object(), [notification_attachment.DarwinNotificationAttachment])))(),
    IdentityMapOfString$int: () => (T.IdentityMapOfString$int = dart.constFn(_js_helper.IdentityMap$(core.String, core.int)))(),
    MapOfString$int: () => (T.MapOfString$int = dart.constFn(core.Map$(core.String, core.int)))(),
    VoidToMapOfString$int: () => (T.VoidToMapOfString$int = dart.constFn(dart.fnType(T.MapOfString$int(), [])))(),
    intToString: () => (T.intToString = dart.constFn(dart.fnType(core.String, [core.int])))(),
    JSArrayOfint: () => (T.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    JSArrayOfTimeZone: () => (T.JSArrayOfTimeZone = dart.constFn(_interceptors.JSArray$(location$.TimeZone)))(),
    IdentityMapOfString$Location: () => (T.IdentityMapOfString$Location = dart.constFn(_js_helper.IdentityMap$(core.String, location$.Location)))(),
    ListOfint: () => (T.ListOfint = dart.constFn(core.List$(core.int)))(),
    JSArrayOfListOfint: () => (T.JSArrayOfListOfint = dart.constFn(_interceptors.JSArray$(T.ListOfint())))(),
    LocationAndLocationToint: () => (T.LocationAndLocationToint = dart.constFn(dart.fnType(core.int, [location$.Location, location$.Location])))(),
    SyncIterableOfLocation: () => (T.SyncIterableOfLocation = dart.constFn(_js_helper.SyncIterable$(location$.Location)))(),
    VoidToint: () => (T.VoidToint = dart.constFn(dart.fnType(core.int, [])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(main.main, T.VoidTovoid());
    },
    get C3() {
      return C[3] = dart.constMap(core.String, core.String, ["Breakfast", "Aloo Paratha, Curd, Pickle / Veg Upma / Egg Bhurji / Tea, Milk, Coffee / Bread, Butter, Jam", "Lunch", "Phulkas, Rajma Curry, Plain Rice, Rasam, Beetroot Poriyal, Curd / Chicken Gravy (Non-Veg Option)", "Snacks", "Panipuri / Dahipuri / Tea, Coffee, Milk", "Dinner", "Roti, Tomato Egg Gravy / Dosa, Sambar, Mint Chutney / White Rice, Rasam, Dry Kovakkai Poriyal, Butter Milk / Salad (Carrot, Cucumber, Tomato) / Fruit (Papaya), Milk"]);
    },
    get C4() {
      return C[4] = dart.constMap(core.String, core.String, ["Breakfast", "Idly, Vada, Sambar, Chutney / Veg Egg Masala / Tea, Milk, Coffee / Bread, Butter, Jam", "Lunch", "Brinjal Kara Kuzhambu, Phulkas, White Rice, Rasam, Kootu, Beans Poriyal, Curd / Chicken Manchurian (Non-Veg Option)", "Snacks", "Mysore Bonda / Sambar Vada / Tea, Coffee, Milk", "Dinner", "Chole Bhature, Channa Masala, Mirchi Raitha / Lemon Sevai, Tomato Sevai, Pottukadalai Chutney / White Rice, Rasam, Gobi 65, Butter Milk / Salad (Carrot, Beetroot, Cucumber) / Milk"]);
    },
    get C5() {
      return C[5] = dart.constMap(core.String, core.String, ["Breakfast", "Pongal / Uthappam / Wheat Upma, Coconut Chutney / Paruppu Vada / Gobi Paratha, Curd, Pickle / Omelette / Tea, Milk, Coffee / Bread, Butter, Jam", "Lunch", "Phulka, Bhindi Fry, Jeera Rice, Rasam, Dal, Thovayal, Pickle, Papad, Curd / Chicken Tikka (Non-Veg Option)", "Snacks", "Burger / Cutlet with Sauce / Tea, Coffee, Milk", "Dinner", "Phulka, Mushroom Masala / Podi Dosa, Sambar, Groundnut Chutney / White Rice, Rasam, Dry Vazhakkai Poriyal, Butter Milk / Milk, Salad, Ice Cream"]);
    },
    get C6() {
      return C[6] = dart.constMap(core.String, core.String, ["Breakfast", "Thin Onion Dosa, Sambar, Chutney, Medu Vada / Poori, Chana Masala, Aloo Masala / Scrambled Egg / Tea, Milk, Coffee / Bread, Butter, Jam", "Lunch", "Chapathi, Paneer Butter Masala, Lemon Rice, Curd Rice, Papad, Ghee, Thovayal, Pickle / Chicken Curry (Non-Veg Option)", "Snacks", "Bread Pakoda / Samosa, Green Chutney / Tea, Coffee, Milk", "Dinner", "Brinjal Biryani / Veg Biryani, Raitha, French Fries / Chapathi, Egg Gravy / White Rice, Rasam, Mixed Veg Poriyal, Butter Milk / Fruit Salad / Milk, Gulab Jamun"]);
    },
    get C7() {
      return C[7] = dart.constMap(core.String, core.String, ["Breakfast", "Carrot Uttappam, Sambar, Onion Tomato Chutney / Veg Khichadi or Sabudana Khichadi with Carrot and Beans, Curd / French Toast / Tea, Milk, Coffee / Wheat Bread, Butter, Jam", "Lunch", "Phulka, Bhaji, White Rice, Moor Kulambu, Potato Fry, Curd, Pickle / Chicken Curry (Non-Veg Option)", "Snacks", "Boiled Sweet Corn with Masala / Tea, Coffee, Milk", "Dinner", "Wheat Paratha (Chettinad Chicken Gravy / Butter Chicken) / Millet Idly, Chilli Idly, Sambar, Tomato Chutney / White Rice, Rasam, Butter Milk / Salad, Rose Milk / Badam Milk"]);
    },
    get C8() {
      return C[8] = dart.constMap(core.String, core.String, ["Breakfast", "Gobi Paratha / Paneer Paratha, Curd, Pickle / Pongal, Coconut Chutney, Sambar, Vada / Boiled Egg / Tea, Milk, Coffee / Bread, Butter, Jam", "Lunch", "Chapathi, Veg Kurma, Lemon Rice, Poriyal, Papad, Pickle / Egg Masala (Non-Veg Option)", "Snacks", "Masala Puri / Veg Noodles / Tea, Coffee, Milk", "Dinner", "Red Pasta / Dahi Papdi Chat / Tea, Coffee, Milk / Phulka, Veg Sabji, Dal Makhani / Onion Podi Uttappam, Sambar, Kara Chutney / White Rice, Sambar, Tomato Rasam, Carrot Poriyal / Butter Milk, Salad"]);
    },
    get C9() {
      return C[9] = dart.constMap(core.String, core.String, ["Breakfast", "White Puttu / Ragi Puttu / Kadala Curry / Grated Coconut, Banana, Sugar, Ghee / Pav Bhaji, Masala, Chopped Onions / Tea, Milk, Coffee / Bread, Butter, Jam", "Lunch", "Chicken Biryani, Onion Raitha / Dindukkal Chicken Gravy / Brinjal Curry / Boiled Egg / Pulka, Mutton Curry / White Rice, Rasam, Curd", "Snacks", "Tea, Coffee, Milk", "Dinner", "Phulka, Veg Subji, Dal Makhani / Onion Podi Uttappam, Sambar, Kara Chutney / White Rice, Sambar, Tomato Rasam, Carrot Poriyal / Butter Milk, Salad, Milk"]);
    },
    get C2() {
      return C[2] = dart.constMap(core.String, T.MapOfString$String(), ["Monday", C[3] || CT.C3, "Tuesday", C[4] || CT.C4, "Wednesday", C[5] || CT.C5, "Thursday", C[6] || CT.C6, "Friday", C[7] || CT.C7, "Saturday", C[8] || CT.C8, "Sunday", C[9] || CT.C9]);
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: main.MessMenuScreen.prototype,
        [Widget_key]: null,
        [MessMenuScreen_menu]: C[2] || CT.C2
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "Mess Menu"
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 8,
        [EdgeInsets_right]: 8,
        [EdgeInsets_top]: 8,
        [EdgeInsets_left]: 8
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: initialization_settings$.AndroidInitializationSettings.prototype,
        [AndroidInitializationSettings_defaultIcon]: "@mipmap/ic_launcher"
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: main.MessMenuApp.prototype,
        [Widget_key]: null
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: core.Object.prototype
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: types$.NotificationAppLaunchDetails.prototype,
        [NotificationAppLaunchDetails_notificationResponse]: null,
        [NotificationAppLaunchDetails_didNotificationLaunchApp]: false
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: enums.AndroidServiceStartType.prototype,
        [AndroidServiceStartType_value]: 1
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: enums.AndroidIconSource.prototype,
        [_Enum__name]: "drawableResource",
        [_Enum_index]: 0
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: enums.AndroidIconSource.prototype,
        [_Enum__name]: "contentUri",
        [_Enum_index]: 2
      });
    },
    get C19() {
      return C[19] = dart.fn(callback_dispatcher.callbackDispatcher, T.VoidTovoid());
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C[22] || CT.C22
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[21] || CT.C21,
        [MethodChannel_name]: "dexterous.com/flutter/local_notifications"
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: categories.AndroidNotificationCategory.prototype,
        [name$]: "alarm"
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: categories.AndroidNotificationCategory.prototype,
        [name$]: "call"
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: categories.AndroidNotificationCategory.prototype,
        [name$]: "email"
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: categories.AndroidNotificationCategory.prototype,
        [name$]: "err"
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: categories.AndroidNotificationCategory.prototype,
        [name$]: "event"
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: categories.AndroidNotificationCategory.prototype,
        [name$]: "location_sharing"
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: categories.AndroidNotificationCategory.prototype,
        [name$]: "msg"
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: categories.AndroidNotificationCategory.prototype,
        [name$]: "missed_call"
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: categories.AndroidNotificationCategory.prototype,
        [name$]: "navigation"
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: categories.AndroidNotificationCategory.prototype,
        [name$]: "progress"
      });
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: categories.AndroidNotificationCategory.prototype,
        [name$]: "promo"
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: categories.AndroidNotificationCategory.prototype,
        [name$]: "recommendation"
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: categories.AndroidNotificationCategory.prototype,
        [name$]: "reminder"
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: categories.AndroidNotificationCategory.prototype,
        [name$]: "service"
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: categories.AndroidNotificationCategory.prototype,
        [name$]: "social"
      });
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: categories.AndroidNotificationCategory.prototype,
        [name$]: "status"
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: categories.AndroidNotificationCategory.prototype,
        [name$]: "stopwatch"
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: categories.AndroidNotificationCategory.prototype,
        [name$]: "sys"
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: categories.AndroidNotificationCategory.prototype,
        [name$]: "transport"
      });
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: categories.AndroidNotificationCategory.prototype,
        [name$]: "workout"
      });
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: enums.AndroidBitmapSource.prototype,
        [_Enum__name]: "drawable",
        [_Enum_index]: 0
      });
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: enums.AndroidBitmapSource.prototype,
        [_Enum__name]: "filePath",
        [_Enum_index]: 1
      });
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: enums.AndroidBitmapSource.prototype,
        [_Enum__name]: "byteArray",
        [_Enum_index]: 2
      });
    },
    get C43() {
      return C[43] = dart.constList([C[44] || CT.C44, C[45] || CT.C45, C[46] || CT.C46], enums.AndroidBitmapSource);
    },
    get C48() {
      return C[48] = dart.const({
        __proto__: enums.AndroidIconSource.prototype,
        [_Enum__name]: "bitmapFilePath",
        [_Enum_index]: 1
      });
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: enums.AndroidIconSource.prototype,
        [_Enum__name]: "flutterBitmapAsset",
        [_Enum_index]: 3
      });
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: enums.AndroidIconSource.prototype,
        [_Enum__name]: "byteArray",
        [_Enum_index]: 4
      });
    },
    get C47() {
      return C[47] = dart.constList([C[17] || CT.C17, C[48] || CT.C48, C[18] || CT.C18, C[49] || CT.C49, C[50] || CT.C50], enums.AndroidIconSource);
    },
    get C52() {
      return C[52] = dart.const({
        __proto__: enums.AndroidNotificationStyle.prototype,
        [_Enum__name]: "defaultStyle",
        [_Enum_index]: 0
      });
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: enums.AndroidNotificationStyle.prototype,
        [_Enum__name]: "bigPicture",
        [_Enum_index]: 1
      });
    },
    get C54() {
      return C[54] = dart.const({
        __proto__: enums.AndroidNotificationStyle.prototype,
        [_Enum__name]: "bigText",
        [_Enum_index]: 2
      });
    },
    get C55() {
      return C[55] = dart.const({
        __proto__: enums.AndroidNotificationStyle.prototype,
        [_Enum__name]: "inbox",
        [_Enum_index]: 3
      });
    },
    get C56() {
      return C[56] = dart.const({
        __proto__: enums.AndroidNotificationStyle.prototype,
        [_Enum__name]: "messaging",
        [_Enum_index]: 4
      });
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: enums.AndroidNotificationStyle.prototype,
        [_Enum__name]: "media",
        [_Enum_index]: 5
      });
    },
    get C51() {
      return C[51] = dart.constList([C[52] || CT.C52, C[53] || CT.C53, C[54] || CT.C54, C[55] || CT.C55, C[56] || CT.C56, C[57] || CT.C57], enums.AndroidNotificationStyle);
    },
    get C59() {
      return C[59] = dart.const({
        __proto__: enums.AndroidNotificationSoundSource.prototype,
        [_Enum__name]: "rawResource",
        [_Enum_index]: 0
      });
    },
    get C60() {
      return C[60] = dart.const({
        __proto__: enums.AndroidNotificationSoundSource.prototype,
        [_Enum__name]: "uri",
        [_Enum_index]: 1
      });
    },
    get C58() {
      return C[58] = dart.constList([C[59] || CT.C59, C[60] || CT.C60], enums.AndroidNotificationSoundSource);
    },
    get C62() {
      return C[62] = dart.const({
        __proto__: enums.AndroidNotificationChannelAction.prototype,
        [_Enum__name]: "createIfNotExists",
        [_Enum_index]: 0
      });
    },
    get C63() {
      return C[63] = dart.const({
        __proto__: enums.AndroidNotificationChannelAction.prototype,
        [_Enum__name]: "update",
        [_Enum_index]: 1
      });
    },
    get C61() {
      return C[61] = dart.constList([C[62] || CT.C62, C[63] || CT.C63], enums.AndroidNotificationChannelAction);
    },
    get C64() {
      return C[64] = dart.const({
        __proto__: enums.AndroidServiceForegroundType.prototype,
        [value$]: -1
      });
    },
    get C65() {
      return C[65] = dart.const({
        __proto__: enums.AndroidServiceForegroundType.prototype,
        [value$]: 0
      });
    },
    get C66() {
      return C[66] = dart.const({
        __proto__: enums.AndroidServiceForegroundType.prototype,
        [value$]: 1
      });
    },
    get C67() {
      return C[67] = dart.const({
        __proto__: enums.AndroidServiceForegroundType.prototype,
        [value$]: 2
      });
    },
    get C68() {
      return C[68] = dart.const({
        __proto__: enums.AndroidServiceForegroundType.prototype,
        [value$]: 4
      });
    },
    get C69() {
      return C[69] = dart.const({
        __proto__: enums.AndroidServiceForegroundType.prototype,
        [value$]: 8
      });
    },
    get C70() {
      return C[70] = dart.const({
        __proto__: enums.AndroidServiceForegroundType.prototype,
        [value$]: 16
      });
    },
    get C71() {
      return C[71] = dart.const({
        __proto__: enums.AndroidServiceForegroundType.prototype,
        [value$]: 32
      });
    },
    get C72() {
      return C[72] = dart.const({
        __proto__: enums.AndroidServiceForegroundType.prototype,
        [value$]: 64
      });
    },
    get C73() {
      return C[73] = dart.const({
        __proto__: enums.AndroidServiceForegroundType.prototype,
        [value$]: 128
      });
    },
    get C74() {
      return C[74] = dart.const({
        __proto__: enums.AndroidServiceStartType.prototype,
        [AndroidServiceStartType_value]: 0
      });
    },
    get C75() {
      return C[75] = dart.const({
        __proto__: enums.AndroidServiceStartType.prototype,
        [AndroidServiceStartType_value]: 2
      });
    },
    get C76() {
      return C[76] = dart.const({
        __proto__: enums.AndroidServiceStartType.prototype,
        [AndroidServiceStartType_value]: 3
      });
    },
    get C77() {
      return C[77] = dart.const({
        __proto__: enums.Importance.prototype,
        [value$1]: -1000
      });
    },
    get C78() {
      return C[78] = dart.const({
        __proto__: enums.Importance.prototype,
        [value$1]: 0
      });
    },
    get C79() {
      return C[79] = dart.const({
        __proto__: enums.Importance.prototype,
        [value$1]: 1
      });
    },
    get C80() {
      return C[80] = dart.const({
        __proto__: enums.Importance.prototype,
        [value$1]: 2
      });
    },
    get C81() {
      return C[81] = dart.const({
        __proto__: enums.Importance.prototype,
        [value$1]: 3
      });
    },
    get C82() {
      return C[82] = dart.const({
        __proto__: enums.Importance.prototype,
        [value$1]: 4
      });
    },
    get C83() {
      return C[83] = dart.const({
        __proto__: enums.Importance.prototype,
        [value$1]: 5
      });
    },
    get C84() {
      return C[84] = dart.const({
        __proto__: enums.Priority.prototype,
        [value$2]: -2
      });
    },
    get C85() {
      return C[85] = dart.const({
        __proto__: enums.Priority.prototype,
        [value$2]: -1
      });
    },
    get C86() {
      return C[86] = dart.const({
        __proto__: enums.Priority.prototype,
        [value$2]: 0
      });
    },
    get C87() {
      return C[87] = dart.const({
        __proto__: enums.Priority.prototype,
        [value$2]: 1
      });
    },
    get C88() {
      return C[88] = dart.const({
        __proto__: enums.Priority.prototype,
        [value$2]: 2
      });
    },
    get C90() {
      return C[90] = dart.const({
        __proto__: enums.GroupAlertBehavior.prototype,
        [_Enum__name]: "all",
        [_Enum_index]: 0
      });
    },
    get C91() {
      return C[91] = dart.const({
        __proto__: enums.GroupAlertBehavior.prototype,
        [_Enum__name]: "summary",
        [_Enum_index]: 1
      });
    },
    get C92() {
      return C[92] = dart.const({
        __proto__: enums.GroupAlertBehavior.prototype,
        [_Enum__name]: "children",
        [_Enum_index]: 2
      });
    },
    get C89() {
      return C[89] = dart.constList([C[90] || CT.C90, C[91] || CT.C91, C[92] || CT.C92], enums.GroupAlertBehavior);
    },
    get C94() {
      return C[94] = dart.const({
        __proto__: enums.NotificationVisibility.prototype,
        [_Enum__name]: "private",
        [_Enum_index]: 0
      });
    },
    get C95() {
      return C[95] = dart.const({
        __proto__: enums.NotificationVisibility.prototype,
        [_Enum__name]: "public",
        [_Enum_index]: 1
      });
    },
    get C96() {
      return C[96] = dart.const({
        __proto__: enums.NotificationVisibility.prototype,
        [_Enum__name]: "secret",
        [_Enum_index]: 2
      });
    },
    get C93() {
      return C[93] = dart.constList([C[94] || CT.C94, C[95] || CT.C95, C[96] || CT.C96], enums.NotificationVisibility);
    },
    get C97() {
      return C[97] = dart.const({
        __proto__: enums.AudioAttributesUsage.prototype,
        [value$3]: 4
      });
    },
    get C98() {
      return C[98] = dart.const({
        __proto__: enums.AudioAttributesUsage.prototype,
        [value$3]: 11
      });
    },
    get C99() {
      return C[99] = dart.const({
        __proto__: enums.AudioAttributesUsage.prototype,
        [value$3]: 12
      });
    },
    get C100() {
      return C[100] = dart.const({
        __proto__: enums.AudioAttributesUsage.prototype,
        [value$3]: 13
      });
    },
    get C101() {
      return C[101] = dart.const({
        __proto__: enums.AudioAttributesUsage.prototype,
        [value$3]: 16
      });
    },
    get C102() {
      return C[102] = dart.const({
        __proto__: enums.AudioAttributesUsage.prototype,
        [value$3]: 14
      });
    },
    get C103() {
      return C[103] = dart.const({
        __proto__: enums.AudioAttributesUsage.prototype,
        [value$3]: 1
      });
    },
    get C104() {
      return C[104] = dart.const({
        __proto__: enums.AudioAttributesUsage.prototype,
        [value$3]: 5
      });
    },
    get C105() {
      return C[105] = dart.const({
        __proto__: enums.AudioAttributesUsage.prototype,
        [value$3]: 10
      });
    },
    get C106() {
      return C[106] = dart.const({
        __proto__: enums.AudioAttributesUsage.prototype,
        [value$3]: 6
      });
    },
    get C107() {
      return C[107] = dart.const({
        __proto__: enums.AudioAttributesUsage.prototype,
        [value$3]: 0
      });
    },
    get C108() {
      return C[108] = dart.const({
        __proto__: enums.AudioAttributesUsage.prototype,
        [value$3]: 2
      });
    },
    get C109() {
      return C[109] = dart.const({
        __proto__: enums.AudioAttributesUsage.prototype,
        [value$3]: 3
      });
    },
    get C110() {
      return C[110] = dart.constList([], core.String);
    },
    get C111() {
      return C[111] = dart.constSet(core.String, []);
    },
    get C112() {
      return C[112] = dart.constList([], notification_details$.AndroidNotificationActionInput);
    },
    get C113() {
      return C[113] = dart.constList([], notification_category.DarwinNotificationCategory);
    },
    get C114() {
      return C[114] = dart.const({
        __proto__: interruption_level.InterruptionLevel.prototype,
        [value$4]: 0
      });
    },
    get C115() {
      return C[115] = dart.const({
        __proto__: interruption_level.InterruptionLevel.prototype,
        [value$4]: 1
      });
    },
    get C116() {
      return C[116] = dart.const({
        __proto__: interruption_level.InterruptionLevel.prototype,
        [value$4]: 2
      });
    },
    get C117() {
      return C[117] = dart.const({
        __proto__: interruption_level.InterruptionLevel.prototype,
        [value$4]: 3
      });
    },
    get C119() {
      return C[119] = dart.const({
        __proto__: notification_action._DarwinNotificationActionType.prototype,
        [_Enum__name]: "plain",
        [_Enum_index]: 0
      });
    },
    get C120() {
      return C[120] = dart.const({
        __proto__: notification_action._DarwinNotificationActionType.prototype,
        [_Enum__name]: "text",
        [_Enum_index]: 1
      });
    },
    get C118() {
      return C[118] = dart.constList([C[119] || CT.C119, C[120] || CT.C120], notification_action._DarwinNotificationActionType);
    },
    get C121() {
      return C[121] = dart.constSet(notification_action_option.DarwinNotificationActionOption, []);
    },
    get C123() {
      return C[123] = dart.const({
        __proto__: notification_action_option.DarwinNotificationActionOption.prototype,
        [_Enum__name]: "authenticationRequired",
        [_Enum_index]: 0
      });
    },
    get C124() {
      return C[124] = dart.const({
        __proto__: notification_action_option.DarwinNotificationActionOption.prototype,
        [_Enum__name]: "destructive",
        [_Enum_index]: 1
      });
    },
    get C125() {
      return C[125] = dart.const({
        __proto__: notification_action_option.DarwinNotificationActionOption.prototype,
        [_Enum__name]: "foreground",
        [_Enum_index]: 2
      });
    },
    get C122() {
      return C[122] = dart.constList([C[123] || CT.C123, C[124] || CT.C124, C[125] || CT.C125], notification_action_option.DarwinNotificationActionOption);
    },
    get C126() {
      return C[126] = dart.constList([], notification_action.DarwinNotificationAction);
    },
    get C127() {
      return C[127] = dart.constSet(notification_category_option.DarwinNotificationCategoryOption, []);
    },
    get C129() {
      return C[129] = dart.const({
        __proto__: notification_category_option.DarwinNotificationCategoryOption.prototype,
        [_Enum__name]: "customDismissAction",
        [_Enum_index]: 0
      });
    },
    get C130() {
      return C[130] = dart.const({
        __proto__: notification_category_option.DarwinNotificationCategoryOption.prototype,
        [_Enum__name]: "allowInCarPlay",
        [_Enum_index]: 1
      });
    },
    get C131() {
      return C[131] = dart.const({
        __proto__: notification_category_option.DarwinNotificationCategoryOption.prototype,
        [_Enum__name]: "hiddenPreviewShowTitle",
        [_Enum_index]: 2
      });
    },
    get C132() {
      return C[132] = dart.const({
        __proto__: notification_category_option.DarwinNotificationCategoryOption.prototype,
        [_Enum__name]: "hiddenPreviewShowSubtitle",
        [_Enum_index]: 3
      });
    },
    get C133() {
      return C[133] = dart.const({
        __proto__: notification_category_option.DarwinNotificationCategoryOption.prototype,
        [_Enum__name]: "allowAnnouncement",
        [_Enum_index]: 4
      });
    },
    get C128() {
      return C[128] = dart.constList([C[129] || CT.C129, C[130] || CT.C130, C[131] || CT.C131, C[132] || CT.C132, C[133] || CT.C133], notification_category_option.DarwinNotificationCategoryOption);
    },
    get C135() {
      return C[135] = dart.const({
        __proto__: enums$.UILocalNotificationDateInterpretation.prototype,
        [_Enum__name]: "absoluteTime",
        [_Enum_index]: 0
      });
    },
    get C136() {
      return C[136] = dart.const({
        __proto__: enums$.UILocalNotificationDateInterpretation.prototype,
        [_Enum__name]: "wallClockTime",
        [_Enum_index]: 1
      });
    },
    get C134() {
      return C[134] = dart.constList([C[135] || CT.C135, C[136] || CT.C136], enums$.UILocalNotificationDateInterpretation);
    },
    get C137() {
      return C[137] = dart.const({
        __proto__: types.Day.prototype,
        [value$5]: 1
      });
    },
    get C138() {
      return C[138] = dart.const({
        __proto__: types.Day.prototype,
        [value$5]: 2
      });
    },
    get C139() {
      return C[139] = dart.const({
        __proto__: types.Day.prototype,
        [value$5]: 3
      });
    },
    get C140() {
      return C[140] = dart.const({
        __proto__: types.Day.prototype,
        [value$5]: 4
      });
    },
    get C141() {
      return C[141] = dart.const({
        __proto__: types.Day.prototype,
        [value$5]: 5
      });
    },
    get C142() {
      return C[142] = dart.const({
        __proto__: types.Day.prototype,
        [value$5]: 6
      });
    },
    get C143() {
      return C[143] = dart.const({
        __proto__: types.Day.prototype,
        [value$5]: 7
      });
    },
    get C145() {
      return C[145] = dart.const({
        __proto__: types.DateTimeComponents.prototype,
        [_Enum__name]: "time",
        [_Enum_index]: 0
      });
    },
    get C146() {
      return C[146] = dart.const({
        __proto__: types.DateTimeComponents.prototype,
        [_Enum__name]: "dayOfWeekAndTime",
        [_Enum_index]: 1
      });
    },
    get C147() {
      return C[147] = dart.const({
        __proto__: types.DateTimeComponents.prototype,
        [_Enum__name]: "dayOfMonthAndTime",
        [_Enum_index]: 2
      });
    },
    get C148() {
      return C[148] = dart.const({
        __proto__: types.DateTimeComponents.prototype,
        [_Enum__name]: "dateAndTime",
        [_Enum_index]: 3
      });
    },
    get C144() {
      return C[144] = dart.constList([C[145] || CT.C145, C[146] || CT.C146, C[147] || CT.C147, C[148] || CT.C148], types.DateTimeComponents);
    },
    get C149() {
      return C[149] = dart.const({
        __proto__: categories$.LinuxNotificationCategory.prototype,
        [name$3]: "device"
      });
    },
    get C150() {
      return C[150] = dart.const({
        __proto__: categories$.LinuxNotificationCategory.prototype,
        [name$3]: "device.added"
      });
    },
    get C151() {
      return C[151] = dart.const({
        __proto__: categories$.LinuxNotificationCategory.prototype,
        [name$3]: "device.error"
      });
    },
    get C152() {
      return C[152] = dart.const({
        __proto__: categories$.LinuxNotificationCategory.prototype,
        [name$3]: "device.removed"
      });
    },
    get C153() {
      return C[153] = dart.const({
        __proto__: categories$.LinuxNotificationCategory.prototype,
        [name$3]: "email"
      });
    },
    get C154() {
      return C[154] = dart.const({
        __proto__: categories$.LinuxNotificationCategory.prototype,
        [name$3]: "email.arrived"
      });
    },
    get C155() {
      return C[155] = dart.const({
        __proto__: categories$.LinuxNotificationCategory.prototype,
        [name$3]: "email.bounced"
      });
    },
    get C156() {
      return C[156] = dart.const({
        __proto__: categories$.LinuxNotificationCategory.prototype,
        [name$3]: "im"
      });
    },
    get C157() {
      return C[157] = dart.const({
        __proto__: categories$.LinuxNotificationCategory.prototype,
        [name$3]: "im.error"
      });
    },
    get C158() {
      return C[158] = dart.const({
        __proto__: categories$.LinuxNotificationCategory.prototype,
        [name$3]: "im.received"
      });
    },
    get C159() {
      return C[159] = dart.const({
        __proto__: categories$.LinuxNotificationCategory.prototype,
        [name$3]: "network"
      });
    },
    get C160() {
      return C[160] = dart.const({
        __proto__: categories$.LinuxNotificationCategory.prototype,
        [name$3]: "network.connected"
      });
    },
    get C161() {
      return C[161] = dart.const({
        __proto__: categories$.LinuxNotificationCategory.prototype,
        [name$3]: "network.disconnected"
      });
    },
    get C162() {
      return C[162] = dart.const({
        __proto__: categories$.LinuxNotificationCategory.prototype,
        [name$3]: "network.error"
      });
    },
    get C163() {
      return C[163] = dart.const({
        __proto__: categories$.LinuxNotificationCategory.prototype,
        [name$3]: "presence"
      });
    },
    get C164() {
      return C[164] = dart.const({
        __proto__: categories$.LinuxNotificationCategory.prototype,
        [name$3]: "presence.offline"
      });
    },
    get C165() {
      return C[165] = dart.const({
        __proto__: categories$.LinuxNotificationCategory.prototype,
        [name$3]: "presence.online"
      });
    },
    get C166() {
      return C[166] = dart.const({
        __proto__: categories$.LinuxNotificationCategory.prototype,
        [name$3]: "transfer"
      });
    },
    get C167() {
      return C[167] = dart.const({
        __proto__: categories$.LinuxNotificationCategory.prototype,
        [name$3]: "transfer.complete"
      });
    },
    get C168() {
      return C[168] = dart.const({
        __proto__: categories$.LinuxNotificationCategory.prototype,
        [name$3]: "transfer.error"
      });
    },
    get C169() {
      return C[169] = dart.const({
        __proto__: enums$0.LinuxNotificationUrgency.prototype,
        [value$6]: 0
      });
    },
    get C170() {
      return C[170] = dart.const({
        __proto__: enums$0.LinuxNotificationUrgency.prototype,
        [value$6]: 1
      });
    },
    get C171() {
      return C[171] = dart.const({
        __proto__: enums$0.LinuxNotificationUrgency.prototype,
        [value$6]: 2
      });
    },
    get C173() {
      return C[173] = dart.const({
        __proto__: enums$0.LinuxIconType.prototype,
        [_Enum__name]: "assets",
        [_Enum_index]: 0
      });
    },
    get C174() {
      return C[174] = dart.const({
        __proto__: enums$0.LinuxIconType.prototype,
        [_Enum__name]: "byteData",
        [_Enum_index]: 1
      });
    },
    get C175() {
      return C[175] = dart.const({
        __proto__: enums$0.LinuxIconType.prototype,
        [_Enum__name]: "theme",
        [_Enum_index]: 2
      });
    },
    get C176() {
      return C[176] = dart.const({
        __proto__: enums$0.LinuxIconType.prototype,
        [_Enum__name]: "filePath",
        [_Enum_index]: 3
      });
    },
    get C172() {
      return C[172] = dart.constList([C[173] || CT.C173, C[174] || CT.C174, C[175] || CT.C175, C[176] || CT.C176], enums$0.LinuxIconType);
    },
    get C178() {
      return C[178] = dart.const({
        __proto__: enums$0.LinuxSoundType.prototype,
        [_Enum__name]: "assets",
        [_Enum_index]: 0
      });
    },
    get C179() {
      return C[179] = dart.const({
        __proto__: enums$0.LinuxSoundType.prototype,
        [_Enum__name]: "theme",
        [_Enum_index]: 1
      });
    },
    get C177() {
      return C[177] = dart.constList([C[178] || CT.C178, C[179] || CT.C179], enums$0.LinuxSoundType);
    },
    get C181() {
      return C[181] = dart.const({
        __proto__: enums$0.LinuxHintValueType.prototype,
        [_Enum__name]: "array",
        [_Enum_index]: 0
      });
    },
    get C182() {
      return C[182] = dart.const({
        __proto__: enums$0.LinuxHintValueType.prototype,
        [_Enum__name]: "boolean",
        [_Enum_index]: 1
      });
    },
    get C183() {
      return C[183] = dart.const({
        __proto__: enums$0.LinuxHintValueType.prototype,
        [_Enum__name]: "byte",
        [_Enum_index]: 2
      });
    },
    get C184() {
      return C[184] = dart.const({
        __proto__: enums$0.LinuxHintValueType.prototype,
        [_Enum__name]: "dict",
        [_Enum_index]: 3
      });
    },
    get C185() {
      return C[185] = dart.const({
        __proto__: enums$0.LinuxHintValueType.prototype,
        [_Enum__name]: "double",
        [_Enum_index]: 4
      });
    },
    get C186() {
      return C[186] = dart.const({
        __proto__: enums$0.LinuxHintValueType.prototype,
        [_Enum__name]: "int16",
        [_Enum_index]: 5
      });
    },
    get C187() {
      return C[187] = dart.const({
        __proto__: enums$0.LinuxHintValueType.prototype,
        [_Enum__name]: "int32",
        [_Enum_index]: 6
      });
    },
    get C188() {
      return C[188] = dart.const({
        __proto__: enums$0.LinuxHintValueType.prototype,
        [_Enum__name]: "int64",
        [_Enum_index]: 7
      });
    },
    get C189() {
      return C[189] = dart.const({
        __proto__: enums$0.LinuxHintValueType.prototype,
        [_Enum__name]: "string",
        [_Enum_index]: 8
      });
    },
    get C190() {
      return C[190] = dart.const({
        __proto__: enums$0.LinuxHintValueType.prototype,
        [_Enum__name]: "struct",
        [_Enum_index]: 9
      });
    },
    get C191() {
      return C[191] = dart.const({
        __proto__: enums$0.LinuxHintValueType.prototype,
        [_Enum__name]: "uint16",
        [_Enum_index]: 10
      });
    },
    get C192() {
      return C[192] = dart.const({
        __proto__: enums$0.LinuxHintValueType.prototype,
        [_Enum__name]: "uint32",
        [_Enum_index]: 11
      });
    },
    get C193() {
      return C[193] = dart.const({
        __proto__: enums$0.LinuxHintValueType.prototype,
        [_Enum__name]: "uint64",
        [_Enum_index]: 12
      });
    },
    get C194() {
      return C[194] = dart.const({
        __proto__: enums$0.LinuxHintValueType.prototype,
        [_Enum__name]: "variant",
        [_Enum_index]: 13
      });
    },
    get C180() {
      return C[180] = dart.constList([C[181] || CT.C181, C[182] || CT.C182, C[183] || CT.C183, C[184] || CT.C184, C[185] || CT.C185, C[186] || CT.C186, C[187] || CT.C187, C[188] || CT.C188, C[189] || CT.C189, C[190] || CT.C190, C[191] || CT.C191, C[192] || CT.C192, C[193] || CT.C193, C[194] || CT.C194], enums$0.LinuxHintValueType);
    },
    get C195() {
      return C[195] = dart.const({
        __proto__: timeout.LinuxNotificationTimeout.prototype,
        [LinuxNotificationTimeout_value]: -1
      });
    },
    get C196() {
      return C[196] = dart.constList([], notification_details$1.LinuxNotificationAction);
    },
    get C198() {
      return C[198] = dart.const({
        __proto__: types$.RepeatInterval.prototype,
        [_Enum__name]: "everyMinute",
        [_Enum_index]: 0
      });
    },
    get C199() {
      return C[199] = dart.const({
        __proto__: types$.RepeatInterval.prototype,
        [_Enum__name]: "hourly",
        [_Enum_index]: 1
      });
    },
    get C200() {
      return C[200] = dart.const({
        __proto__: types$.RepeatInterval.prototype,
        [_Enum__name]: "daily",
        [_Enum_index]: 2
      });
    },
    get C201() {
      return C[201] = dart.const({
        __proto__: types$.RepeatInterval.prototype,
        [_Enum__name]: "weekly",
        [_Enum_index]: 3
      });
    },
    get C197() {
      return C[197] = dart.constList([C[198] || CT.C198, C[199] || CT.C199, C[200] || CT.C200, C[201] || CT.C201], types$.RepeatInterval);
    },
    get C203() {
      return C[203] = dart.const({
        __proto__: types$.NotificationResponseType.prototype,
        [_Enum__name]: "selectedNotification",
        [_Enum_index]: 0
      });
    },
    get C204() {
      return C[204] = dart.const({
        __proto__: types$.NotificationResponseType.prototype,
        [_Enum__name]: "selectedNotificationAction",
        [_Enum_index]: 1
      });
    },
    get C202() {
      return C[202] = dart.constList([C[203] || CT.C203, C[204] || CT.C204], types$.NotificationResponseType);
    },
    get C205() {
      return C[205] = dart.const({
        __proto__: platform_channel.EventChannel.prototype,
        [EventChannel__binaryMessenger]: null,
        [EventChannel_codec]: C[21] || CT.C21,
        [EventChannel_name]: "dexterous.com/flutter/local_notifications/actions"
      });
    },
    get C206() {
      return C[206] = dart.const({
        __proto__: default_style_information.DefaultStyleInformation.prototype,
        [htmlFormatTitle$]: false,
        [htmlFormatContent$]: false
      });
    },
    get C207() {
      return C[207] = dart.const(new _js_helper.PrivateSymbol.new('_value', _value));
    },
    get C209() {
      return C[209] = dart.const({
        __proto__: location$.TimeZone.prototype,
        [TimeZone_abbreviation]: "UTC",
        [TimeZone_isDst]: false,
        [TimeZone_offset]: 0
      });
    },
    get C208() {
      return C[208] = dart.const({
        __proto__: location$.TzInstant.prototype,
        [TzInstant_end]: 8640000000000000,
        [TzInstant_start]: -8640000000000000,
        [TzInstant_timeZone]: C[209] || CT.C209
      });
    }
  }, false);
  var C = Array(210).fill(void 0);
  var I = [
    "file:///zapp/project/lib/main.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/plugin_platform_interface-2.1.6/lib/plugin_platform_interface.dart",
    "package:plugin_platform_interface/plugin_platform_interface.dart",
    "package:flutter_local_notifications_platform_interface/flutter_local_notifications_platform_interface.dart",
    "package:flutter_local_notifications/src/flutter_local_notifications_plugin.dart",
    "package:flutter_local_notifications/src/initialization_settings.dart",
    "package:flutter_local_notifications/src/notification_details.dart",
    "package:flutter_local_notifications/src/platform_flutter_local_notifications.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/platform_flutter_local_notifications.dart",
    "package:flutter_local_notifications/src/platform_specifics/android/bitmap.dart",
    "package:flutter_local_notifications/src/platform_specifics/android/categories.dart",
    "package:flutter_local_notifications/src/platform_specifics/android/enums.dart",
    "package:flutter_local_notifications/src/platform_specifics/android/icon.dart",
    "package:flutter_local_notifications/src/platform_specifics/android/initialization_settings.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/platform_specifics/android/message.dart",
    "package:flutter_local_notifications/src/platform_specifics/android/message.dart",
    "package:flutter_local_notifications/src/platform_specifics/android/notification_channel.dart",
    "package:flutter_local_notifications/src/platform_specifics/android/notification_channel_group.dart",
    "package:flutter_local_notifications/src/platform_specifics/android/notification_details.dart",
    "package:flutter_local_notifications/src/platform_specifics/android/notification_sound.dart",
    "package:flutter_local_notifications/src/platform_specifics/android/person.dart",
    "package:flutter_local_notifications/src/platform_specifics/android/styles/default_style_information.dart",
    "package:flutter_local_notifications/src/platform_specifics/android/styles/big_picture_style_information.dart",
    "package:flutter_local_notifications/src/platform_specifics/android/styles/big_text_style_information.dart",
    "package:flutter_local_notifications/src/platform_specifics/android/styles/inbox_style_information.dart",
    "package:flutter_local_notifications/src/platform_specifics/android/styles/media_style_information.dart",
    "package:flutter_local_notifications/src/platform_specifics/android/styles/messaging_style_information.dart",
    "package:flutter_local_notifications/src/platform_specifics/android/styles/style_information.dart",
    "package:flutter_local_notifications/src/platform_specifics/darwin/initialization_settings.dart",
    "package:flutter_local_notifications/src/platform_specifics/darwin/interruption_level.dart",
    "package:flutter_local_notifications/src/platform_specifics/darwin/notification_action.dart",
    "package:flutter_local_notifications/src/platform_specifics/darwin/notification_action_option.dart",
    "package:flutter_local_notifications/src/platform_specifics/darwin/notification_attachment.dart",
    "package:flutter_local_notifications/src/platform_specifics/darwin/notification_category.dart",
    "package:flutter_local_notifications/src/platform_specifics/darwin/notification_category_option.dart",
    "package:flutter_local_notifications/src/platform_specifics/darwin/notification_details.dart",
    "package:flutter_local_notifications/src/platform_specifics/ios/enums.dart",
    "package:flutter_local_notifications/src/types.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/types.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications_linux-2.0.0/lib/src/flutter_local_notifications_stub.dart",
    "package:flutter_local_notifications_linux/src/flutter_local_notifications_platform_linux.dart",
    "package:flutter_local_notifications_linux/src/flutter_local_notifications_stub.dart",
    "package:flutter_local_notifications_linux/src/model/capabilities.dart",
    "package:flutter_local_notifications_linux/src/model/categories.dart",
    "package:flutter_local_notifications_linux/src/model/enums.dart",
    "package:flutter_local_notifications_linux/src/model/icon.dart",
    "package:flutter_local_notifications_linux/src/model/initialization_settings.dart",
    "package:flutter_local_notifications_linux/src/model/location.dart",
    "package:flutter_local_notifications_linux/src/model/notification_details.dart",
    "package:flutter_local_notifications_linux/src/model/sound.dart",
    "package:flutter_local_notifications_linux/src/model/timeout.dart",
    "package:flutter_local_notifications_platform_interface/src/types.dart",
    "package:flutter_local_notifications_linux/src/model/hint.dart",
    "package:timezone/src/date_time.dart",
    "package:timezone/src/exceptions.dart",
    "package:timezone/src/location.dart",
    "package:timezone/src/location_database.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/timezone-0.9.4/lib/src/tzdb.dart"
  ];
  $46zapp_entry.runAppGuarded = function runAppGuarded() {
    async.runZonedGuarded(core.Null, dart.fn(() => {
      if (T.ListOfStringTodynamic().is(C[0] || CT.C0)) {
        T.ListOfStringTodynamic().as(C[0] || CT.C0)(T.JSArrayOfString().of([]));
      } else {
        (C[0] || CT.C0)();
      }
      if (js.context.hasProperty("__notifyFlutterRendered")) {
        async.Future.delayed(new core.Duration.new({milliseconds: 250})).then(core.Null, dart.fn(_ => {
          js.context.callMethod("__notifyFlutterRendered", [false]);
        }, T.dynamicToNull()));
      }
    }, T.VoidToNull()), dart.fn((e, stackTrace) => {
      if (js.context.hasProperty("zappHandlerUserError")) {
        js.context.callMethod("zappHandlerUserError", [e[$toString](), stackTrace.toString()]);
      }
    }, T.ObjectAndStackTraceTovoid()), {zoneSpecification: new async._ZoneSpecification.new({print: dart.fn((self, parent, zone, line) => {
          if (js.context.hasProperty("zappHandlerUserPrint")) {
            js.context.callMethod("zappHandlerUserPrint", [line]);
          }
        }, T.ZoneAndZoneDelegateAndZone__Tovoid())})});
  };
  $46zapp_entry.main = function main$() {
    return async.async(dart.void, function* main() {
      yield ui.webOnlyWarmupEngine({runApp: dart.fn(() => {
          $46zapp_entry.runAppGuarded();
        }, T.VoidToNull()), registerPlugins: dart.fn(() => {
          web_plugin_registrant.registerPlugins();
        }, T.VoidToNull())});
    });
  };
  var Widget_key = dart.privateName(framework, "Widget.key");
  var MessMenuScreen_menu = dart.privateName(main, "MessMenuScreen.menu");
  main.MessMenuApp = class MessMenuApp extends framework.StatelessWidget {
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      return new main.MessMenuApp.new({key: key});
    }
    build(context) {
      return new app.MaterialApp.new({title: "Mess Menu", theme: theme_data.ThemeData.new({primarySwatch: colors.Colors.teal}), home: C[1] || CT.C1});
    }
  };
  (main.MessMenuApp.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    main.MessMenuApp.__proto__.new.call(this, {key: key});
    ;
  }).prototype = main.MessMenuApp.prototype;
  dart.addTypeTests(main.MessMenuApp);
  dart.addTypeCaches(main.MessMenuApp);
  dart.setMethodSignature(main.MessMenuApp, () => ({
    __proto__: dart.getMethods(main.MessMenuApp.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.MessMenuApp, I[0]);
  var Text_selectionColor = dart.privateName(text, "Text.selectionColor");
  var Text_textHeightBehavior = dart.privateName(text, "Text.textHeightBehavior");
  var Text_textWidthBasis = dart.privateName(text, "Text.textWidthBasis");
  var Text_semanticsLabel = dart.privateName(text, "Text.semanticsLabel");
  var Text_maxLines = dart.privateName(text, "Text.maxLines");
  var Text_textScaleFactor = dart.privateName(text, "Text.textScaleFactor");
  var Text_overflow = dart.privateName(text, "Text.overflow");
  var Text_softWrap = dart.privateName(text, "Text.softWrap");
  var Text_locale = dart.privateName(text, "Text.locale");
  var Text_textDirection = dart.privateName(text, "Text.textDirection");
  var Text_textAlign = dart.privateName(text, "Text.textAlign");
  var Text_strutStyle = dart.privateName(text, "Text.strutStyle");
  var Text_style = dart.privateName(text, "Text.style");
  var Text_textSpan = dart.privateName(text, "Text.textSpan");
  var Text_data = dart.privateName(text, "Text.data");
  var EdgeInsets_bottom = dart.privateName(edge_insets, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(edge_insets, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(edge_insets, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(edge_insets, "EdgeInsets.left");
  const menu = MessMenuScreen_menu;
  main.MessMenuScreen = class MessMenuScreen extends framework.StatelessWidget {
    get menu() {
      return this[menu];
    }
    set menu(value) {
      super.menu = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      return new main.MessMenuScreen.new({key: key});
    }
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: C[10] || CT.C10}), body: new scroll_view.ListView.new({children: this.menu[$entries][$map](card.Card, dart.fn(day => new card.Card.new({margin: C[11] || CT.C11, child: new expansion_tile.ExpansionTile.new({title: new text.Text.new(day.key), children: day.value[$entries][$map](list_tile.ListTile, dart.fn(meal => new list_tile.ListTile.new({title: new text.Text.new(meal.key), subtitle: new text.Text.new(meal.value)}), T.MapEntryOfString$StringToListTile()))[$toList]()})}), T.MapEntryOfString$MapOfString$StringToCard()))[$toList]()})});
    }
  };
  (main.MessMenuScreen.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    this[menu] = C[2] || CT.C2;
    main.MessMenuScreen.__proto__.new.call(this, {key: key});
    ;
  }).prototype = main.MessMenuScreen.prototype;
  dart.addTypeTests(main.MessMenuScreen);
  dart.addTypeCaches(main.MessMenuScreen);
  dart.setMethodSignature(main.MessMenuScreen, () => ({
    __proto__: dart.getMethods(main.MessMenuScreen.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.MessMenuScreen, I[0]);
  dart.setFieldSignature(main.MessMenuScreen, () => ({
    __proto__: dart.getFields(main.MessMenuScreen.__proto__),
    menu: dart.finalFieldType(core.Map$(core.String, core.Map$(core.String, core.String)))
  }));
  var AndroidInitializationSettings_defaultIcon = dart.privateName(initialization_settings$, "AndroidInitializationSettings.defaultIcon");
  main.main = function main$0() {
    return async.async(dart.void, function* main$() {
      binding.WidgetsFlutterBinding.ensureInitialized();
      let initSettingsAndroid = C[12] || CT.C12;
      let initSettings = new initialization_settings.InitializationSettings.new({android: initSettingsAndroid});
      try {
        yield main.notifications.initialize(initSettings);
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Object.is(e)) {
        } else
          throw e$;
      }
      binding.runApp(C[13] || CT.C13);
    });
  };
  dart.defineLazy(main, {
    /*main.notifications*/get notifications() {
      return flutter_local_notifications_plugin.FlutterLocalNotificationsPlugin.new();
    }
  }, false);
  web_plugin_registrant.registerPlugins = function registerPlugins() {
  };
  plugin_platform_interface.PlatformInterface = class PlatformInterface extends core.Object {
    static verify(instance, token) {
      plugin_platform_interface.PlatformInterface._verify(instance, token, {preventConstObject: true});
    }
    static verifyToken(instance, token) {
      plugin_platform_interface.PlatformInterface._verify(instance, token, {preventConstObject: false});
    }
    static _verify(instance, token, opts) {
      let preventConstObject = opts && 'preventConstObject' in opts ? opts.preventConstObject : null;
      if (plugin_platform_interface.MockPlatformInterfaceMixin.is(instance)) {
        let assertionsEnabled = false;
        if (!dart.fn(() => {
          assertionsEnabled = true;
          return true;
        }, T.VoidTobool())()) dart.assertFailed(null, I[1], 92, 14, "() {\n        assertionsEnabled = true;\n        return true;\n      }()");
        if (!assertionsEnabled) {
          dart.throw(new core.AssertionError.new("`MockPlatformInterfaceMixin` is not intended for use in release builds."));
        }
        return;
      }
      if (preventConstObject && plugin_platform_interface.PlatformInterface._instanceTokens._get(instance) === (C[14] || CT.C14)) {
        dart.throw(new core.AssertionError.new("`const Object()` cannot be used as the token."));
      }
      if (token !== plugin_platform_interface.PlatformInterface._instanceTokens._get(instance)) {
        dart.throw(new core.AssertionError.new("Platform interfaces must not be implemented with `implements`"));
      }
    }
  };
  (plugin_platform_interface.PlatformInterface.new = function(opts) {
    let token = opts && 'token' in opts ? opts.token : null;
    plugin_platform_interface.PlatformInterface._instanceTokens._set(this, token);
  }).prototype = plugin_platform_interface.PlatformInterface.prototype;
  dart.addTypeTests(plugin_platform_interface.PlatformInterface);
  dart.addTypeCaches(plugin_platform_interface.PlatformInterface);
  dart.setStaticMethodSignature(plugin_platform_interface.PlatformInterface, () => ['verify', 'verifyToken', '_verify']);
  dart.setLibraryUri(plugin_platform_interface.PlatformInterface, I[2]);
  dart.setStaticFieldSignature(plugin_platform_interface.PlatformInterface, () => ['_instanceTokens']);
  dart.defineLazy(plugin_platform_interface.PlatformInterface, {
    /*plugin_platform_interface.PlatformInterface._instanceTokens*/get _instanceTokens() {
      return new (T.ExpandoOfObject()).new();
    }
  }, false);
  flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform = class FlutterLocalNotificationsPlatform extends plugin_platform_interface.PlatformInterface {
    static get _instance() {
      let t1;
      t1 = flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform['_#_instance'];
      return t1 == null ? dart.throw(new _internal.LateError.fieldNI("_instance")) : t1;
    }
    static set _instance(_instance$35param) {
      flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform['_#_instance'] = _instance$35param;
    }
    static get instance() {
      return flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform._instance;
    }
    static set instance(instance) {
      plugin_platform_interface.PlatformInterface.verifyToken(instance, flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform._token);
      flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform._instance = instance;
    }
    getNotificationAppLaunchDetails() {
      return async.async(T.NotificationAppLaunchDetailsN(), function* getNotificationAppLaunchDetails() {
        dart.throw(new core.UnimplementedError.new("getNotificationAppLaunchDetails() has not been implemented"));
      });
    }
    show(id, title, body, opts) {
      let payload = opts && 'payload' in opts ? opts.payload : null;
      return async.async(dart.void, function* show() {
        dart.throw(new core.UnimplementedError.new("show() has not been implemented"));
      });
    }
    periodicallyShow(id, title, body, repeatInterval) {
      dart.throw(new core.UnimplementedError.new("periodicallyShow() has not been implemented"));
    }
    cancel(id) {
      return async.async(dart.void, function* cancel() {
        dart.throw(new core.UnimplementedError.new("cancel() has not been implemented"));
      });
    }
    cancelAll() {
      return async.async(dart.void, function* cancelAll() {
        dart.throw(new core.UnimplementedError.new("cancelAll() has not been implemented"));
      });
    }
    pendingNotificationRequests() {
      dart.throw(new core.UnimplementedError.new("pendingNotificationRequest() has not been implemented"));
    }
    getActiveNotifications() {
      dart.throw(new core.UnimplementedError.new("getActiveNotifications() has not been implemented"));
    }
  };
  (flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform.new = function() {
    flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform.__proto__.new.call(this, {token: flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform._token});
    ;
  }).prototype = flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform.prototype;
  dart.addTypeTests(flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform);
  dart.addTypeCaches(flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform);
  dart.setMethodSignature(flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform, () => ({
    __proto__: dart.getMethods(flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform.__proto__),
    getNotificationAppLaunchDetails: dart.fnType(async.Future$(dart.nullable(types$.NotificationAppLaunchDetails)), []),
    show: dart.fnType(async.Future$(dart.void), [core.int, dart.nullable(core.String), dart.nullable(core.String)], {payload: dart.nullable(core.String)}, {}),
    periodicallyShow: dart.fnType(async.Future$(dart.void), [core.int, dart.nullable(core.String), dart.nullable(core.String), types$.RepeatInterval]),
    cancel: dart.fnType(async.Future$(dart.void), [core.int]),
    cancelAll: dart.fnType(async.Future$(dart.void), []),
    pendingNotificationRequests: dart.fnType(async.Future$(core.List$(types$.PendingNotificationRequest)), []),
    getActiveNotifications: dart.fnType(async.Future$(core.List$(types$.ActiveNotification)), [])
  }));
  dart.setStaticGetterSignature(flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform, () => ['_instance', 'instance']);
  dart.setStaticSetterSignature(flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform, () => ['_instance', 'instance']);
  dart.setLibraryUri(flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform, I[3]);
  dart.setStaticFieldSignature(flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform, () => ['_#_instance', '_token']);
  dart.defineLazy(flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform, {
    /*flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform['_#_instance']*/get ['_#_instance']() {
      return null;
    },
    set ['_#_instance'](value) {},
    /*flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform._token*/get _token() {
      return new core.Object.new();
    }
  }, false);
  var NotificationAppLaunchDetails_notificationResponse = dart.privateName(types$, "NotificationAppLaunchDetails.notificationResponse");
  var NotificationAppLaunchDetails_didNotificationLaunchApp = dart.privateName(types$, "NotificationAppLaunchDetails.didNotificationLaunchApp");
  flutter_local_notifications_plugin.FlutterLocalNotificationsPlugin = class FlutterLocalNotificationsPlugin extends core.Object {
    static new() {
      return flutter_local_notifications_plugin.FlutterLocalNotificationsPlugin._instance;
    }
    static ['_#new#tearOff']() {
      return flutter_local_notifications_plugin.FlutterLocalNotificationsPlugin.new();
    }
    static ['_#_#tearOff']() {
      return new flutter_local_notifications_plugin.FlutterLocalNotificationsPlugin.__();
    }
    resolvePlatformSpecificImplementation(T) {
      if (dart.wrapType(T)._equals(dart.wrapType(flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform))) {
        dart.throw(new core.ArgumentError.value(dart.wrapType(T), "The type argument must be a concrete subclass of " + "FlutterLocalNotificationsPlatform"));
      }
      {
        return null;
      }
      if (platform.defaultTargetPlatform === platform.TargetPlatform.android && dart.wrapType(T)._equals(dart.wrapType(platform_flutter_local_notifications.AndroidFlutterLocalNotificationsPlugin)) && platform_flutter_local_notifications.AndroidFlutterLocalNotificationsPlugin.is(flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform.instance)) {
        return dart.nullable(T).as(flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform.instance);
      } else if (platform.defaultTargetPlatform === platform.TargetPlatform.iOS && dart.wrapType(T)._equals(dart.wrapType(platform_flutter_local_notifications.IOSFlutterLocalNotificationsPlugin)) && platform_flutter_local_notifications.IOSFlutterLocalNotificationsPlugin.is(flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform.instance)) {
        return dart.nullable(T).as(flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform.instance);
      } else if (platform.defaultTargetPlatform === platform.TargetPlatform.macOS && dart.wrapType(T)._equals(dart.wrapType(platform_flutter_local_notifications.MacOSFlutterLocalNotificationsPlugin)) && platform_flutter_local_notifications.MacOSFlutterLocalNotificationsPlugin.is(flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform.instance)) {
        return dart.nullable(T).as(flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform.instance);
      } else if (platform.defaultTargetPlatform === platform.TargetPlatform.linux && dart.wrapType(T)._equals(dart.wrapType(flutter_local_notifications_stub.LinuxFlutterLocalNotificationsPlugin)) && flutter_local_notifications_stub.LinuxFlutterLocalNotificationsPlugin.is(flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform.instance)) {
        return dart.nullable(T).as(flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform.instance);
      }
      return null;
    }
    initialize(initializationSettings, opts) {
      let onDidReceiveNotificationResponse = opts && 'onDidReceiveNotificationResponse' in opts ? opts.onDidReceiveNotificationResponse : null;
      let onDidReceiveBackgroundNotificationResponse = opts && 'onDidReceiveBackgroundNotificationResponse' in opts ? opts.onDidReceiveBackgroundNotificationResponse : null;
      return async.async(T.boolN(), (function* initialize() {
        let t1, t1$, t1$0, t1$1;
        {
          return true;
        }
        if (platform.defaultTargetPlatform === platform.TargetPlatform.android) {
          if (initializationSettings.android == null) {
            dart.throw(new core.ArgumentError.new("Android settings must be set when targeting Android platform."));
          }
          t1 = this.resolvePlatformSpecificImplementation(platform_flutter_local_notifications.AndroidFlutterLocalNotificationsPlugin);
          return t1 == null ? null : t1.initialize(dart.nullCheck(initializationSettings.android), {onDidReceiveNotificationResponse: onDidReceiveNotificationResponse, onDidReceiveBackgroundNotificationResponse: onDidReceiveBackgroundNotificationResponse});
        } else if (platform.defaultTargetPlatform === platform.TargetPlatform.iOS) {
          if (initializationSettings.iOS == null) {
            dart.throw(new core.ArgumentError.new("iOS settings must be set when targeting iOS platform."));
          }
          return yield (t1$ = this.resolvePlatformSpecificImplementation(platform_flutter_local_notifications.IOSFlutterLocalNotificationsPlugin), t1$ == null ? null : t1$.initialize(dart.nullCheck(initializationSettings.iOS), {onDidReceiveNotificationResponse: onDidReceiveNotificationResponse, onDidReceiveBackgroundNotificationResponse: onDidReceiveBackgroundNotificationResponse}));
        } else if (platform.defaultTargetPlatform === platform.TargetPlatform.macOS) {
          if (initializationSettings.macOS == null) {
            dart.throw(new core.ArgumentError.new("macOS settings must be set when targeting macOS platform."));
          }
          return yield (t1$0 = this.resolvePlatformSpecificImplementation(platform_flutter_local_notifications.MacOSFlutterLocalNotificationsPlugin), t1$0 == null ? null : t1$0.initialize(dart.nullCheck(initializationSettings.macOS), {onDidReceiveNotificationResponse: onDidReceiveNotificationResponse}));
        } else if (platform.defaultTargetPlatform === platform.TargetPlatform.linux) {
          if (initializationSettings.linux == null) {
            dart.throw(new core.ArgumentError.new("Linux settings must be set when targeting Linux platform."));
          }
          return yield (t1$1 = this.resolvePlatformSpecificImplementation(flutter_local_notifications_stub.LinuxFlutterLocalNotificationsPlugin), t1$1 == null ? null : t1$1.initialize(dart.nullCheck(initializationSettings.linux), {onDidReceiveNotificationResponse: onDidReceiveNotificationResponse}));
        }
        return true;
      }).bind(this));
    }
    getNotificationAppLaunchDetails() {
      return async.async(T.NotificationAppLaunchDetailsN(), (function* getNotificationAppLaunchDetails() {
        let t1, t1$, t1$0, t1$1;
        {
          return null;
        }
        if (platform.defaultTargetPlatform === platform.TargetPlatform.android) {
          return yield (t1 = this.resolvePlatformSpecificImplementation(platform_flutter_local_notifications.AndroidFlutterLocalNotificationsPlugin), t1 == null ? null : t1.getNotificationAppLaunchDetails());
        } else if (platform.defaultTargetPlatform === platform.TargetPlatform.iOS) {
          return yield (t1$ = this.resolvePlatformSpecificImplementation(platform_flutter_local_notifications.IOSFlutterLocalNotificationsPlugin), t1$ == null ? null : t1$.getNotificationAppLaunchDetails());
        } else if (platform.defaultTargetPlatform === platform.TargetPlatform.macOS) {
          return yield (t1$0 = this.resolvePlatformSpecificImplementation(platform_flutter_local_notifications.MacOSFlutterLocalNotificationsPlugin), t1$0 == null ? null : t1$0.getNotificationAppLaunchDetails());
        } else {
          t1$1 = (yield flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform.instance.getNotificationAppLaunchDetails());
          return t1$1 == null ? C[15] || CT.C15 : t1$1;
        }
      }).bind(this));
    }
    show(id, title, body, notificationDetails, opts) {
      let payload = opts && 'payload' in opts ? opts.payload : null;
      return async.async(dart.void, (function* show() {
        let t2, t1, t2$, t1$, t2$0, t1$0, t2$1, t1$1;
        {
          return;
        }
        if (platform.defaultTargetPlatform === platform.TargetPlatform.android) {
          yield (t1 = this.resolvePlatformSpecificImplementation(platform_flutter_local_notifications.AndroidFlutterLocalNotificationsPlugin), t1 == null ? null : t1.show(id, title, body, {notificationDetails: (t2 = notificationDetails, t2 == null ? null : t2.android), payload: payload}));
        } else if (platform.defaultTargetPlatform === platform.TargetPlatform.iOS) {
          yield (t1$ = this.resolvePlatformSpecificImplementation(platform_flutter_local_notifications.IOSFlutterLocalNotificationsPlugin), t1$ == null ? null : t1$.show(id, title, body, {notificationDetails: (t2$ = notificationDetails, t2$ == null ? null : t2$.iOS), payload: payload}));
        } else if (platform.defaultTargetPlatform === platform.TargetPlatform.macOS) {
          yield (t1$0 = this.resolvePlatformSpecificImplementation(platform_flutter_local_notifications.MacOSFlutterLocalNotificationsPlugin), t1$0 == null ? null : t1$0.show(id, title, body, {notificationDetails: (t2$0 = notificationDetails, t2$0 == null ? null : t2$0.macOS), payload: payload}));
        } else if (platform.defaultTargetPlatform === platform.TargetPlatform.linux) {
          yield (t1$1 = this.resolvePlatformSpecificImplementation(flutter_local_notifications_stub.LinuxFlutterLocalNotificationsPlugin), t1$1 == null ? null : t1$1.show(id, title, body, {notificationDetails: (t2$1 = notificationDetails, t2$1 == null ? null : t2$1.linux), payload: payload}));
        } else {
          yield flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform.instance.show(id, title, body);
        }
      }).bind(this));
    }
    cancel(id, opts) {
      let tag = opts && 'tag' in opts ? opts.tag : null;
      return async.async(dart.void, (function* cancel() {
        let t1;
        {
          return;
        }
        if (platform.defaultTargetPlatform === platform.TargetPlatform.android) {
          yield (t1 = this.resolvePlatformSpecificImplementation(platform_flutter_local_notifications.AndroidFlutterLocalNotificationsPlugin), t1 == null ? null : t1.cancel(id, {tag: tag}));
        } else {
          yield flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform.instance.cancel(id);
        }
      }).bind(this));
    }
    cancelAll() {
      return async.async(dart.void, function* cancelAll() {
        yield flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform.instance.cancelAll();
      });
    }
    schedule(id, title, body, scheduledDate, notificationDetails, opts) {
      let payload = opts && 'payload' in opts ? opts.payload : null;
      let androidAllowWhileIdle = opts && 'androidAllowWhileIdle' in opts ? opts.androidAllowWhileIdle : false;
      return async.async(dart.void, (function* schedule() {
        let t1;
        {
          return;
        }
        if (platform.defaultTargetPlatform === platform.TargetPlatform.android) {
          yield dart.nullCheck(this.resolvePlatformSpecificImplementation(platform_flutter_local_notifications.AndroidFlutterLocalNotificationsPlugin)).schedule(id, title, body, scheduledDate, notificationDetails.android, {payload: payload, androidAllowWhileIdle: androidAllowWhileIdle});
        } else if (platform.defaultTargetPlatform === platform.TargetPlatform.iOS) {
          yield (t1 = this.resolvePlatformSpecificImplementation(platform_flutter_local_notifications.IOSFlutterLocalNotificationsPlugin), t1 == null ? null : t1.schedule(id, title, body, scheduledDate, notificationDetails.iOS, {payload: payload}));
        } else if (platform.defaultTargetPlatform === platform.TargetPlatform.macOS) {
          dart.throw(new core.UnimplementedError.new());
        }
      }).bind(this));
    }
    zonedSchedule(id, title, body, scheduledDate, notificationDetails, opts) {
      let uiLocalNotificationDateInterpretation = opts && 'uiLocalNotificationDateInterpretation' in opts ? opts.uiLocalNotificationDateInterpretation : null;
      let androidAllowWhileIdle = opts && 'androidAllowWhileIdle' in opts ? opts.androidAllowWhileIdle : null;
      let payload = opts && 'payload' in opts ? opts.payload : null;
      let matchDateTimeComponents = opts && 'matchDateTimeComponents' in opts ? opts.matchDateTimeComponents : null;
      return async.async(dart.void, (function* zonedSchedule() {
        let t1, t1$;
        {
          return;
        }
        if (platform.defaultTargetPlatform === platform.TargetPlatform.android) {
          yield dart.nullCheck(this.resolvePlatformSpecificImplementation(platform_flutter_local_notifications.AndroidFlutterLocalNotificationsPlugin)).zonedSchedule(id, title, body, scheduledDate, notificationDetails.android, {payload: payload, androidAllowWhileIdle: androidAllowWhileIdle, matchDateTimeComponents: matchDateTimeComponents});
        } else if (platform.defaultTargetPlatform === platform.TargetPlatform.iOS) {
          yield (t1 = this.resolvePlatformSpecificImplementation(platform_flutter_local_notifications.IOSFlutterLocalNotificationsPlugin), t1 == null ? null : t1.zonedSchedule(id, title, body, scheduledDate, notificationDetails.iOS, {uiLocalNotificationDateInterpretation: uiLocalNotificationDateInterpretation, payload: payload, matchDateTimeComponents: matchDateTimeComponents}));
        } else if (platform.defaultTargetPlatform === platform.TargetPlatform.macOS) {
          yield (t1$ = this.resolvePlatformSpecificImplementation(platform_flutter_local_notifications.MacOSFlutterLocalNotificationsPlugin), t1$ == null ? null : t1$.zonedSchedule(id, title, body, scheduledDate, notificationDetails.macOS, {payload: payload, matchDateTimeComponents: matchDateTimeComponents}));
        }
      }).bind(this));
    }
    periodicallyShow(id, title, body, repeatInterval, notificationDetails, opts) {
      let payload = opts && 'payload' in opts ? opts.payload : null;
      let androidAllowWhileIdle = opts && 'androidAllowWhileIdle' in opts ? opts.androidAllowWhileIdle : false;
      return async.async(dart.void, (function* periodicallyShow() {
        let t1, t1$, t1$0;
        {
          return;
        }
        if (platform.defaultTargetPlatform === platform.TargetPlatform.android) {
          yield (t1 = this.resolvePlatformSpecificImplementation(platform_flutter_local_notifications.AndroidFlutterLocalNotificationsPlugin), t1 == null ? null : t1.periodicallyShow(id, title, body, repeatInterval, {notificationDetails: notificationDetails.android, payload: payload, androidAllowWhileIdle: androidAllowWhileIdle}));
        } else if (platform.defaultTargetPlatform === platform.TargetPlatform.iOS) {
          yield (t1$ = this.resolvePlatformSpecificImplementation(platform_flutter_local_notifications.IOSFlutterLocalNotificationsPlugin), t1$ == null ? null : t1$.periodicallyShow(id, title, body, repeatInterval, {notificationDetails: notificationDetails.iOS, payload: payload}));
        } else if (platform.defaultTargetPlatform === platform.TargetPlatform.macOS) {
          yield (t1$0 = this.resolvePlatformSpecificImplementation(platform_flutter_local_notifications.MacOSFlutterLocalNotificationsPlugin), t1$0 == null ? null : t1$0.periodicallyShow(id, title, body, repeatInterval, {notificationDetails: notificationDetails.macOS, payload: payload}));
        } else {
          yield flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform.instance.periodicallyShow(id, title, body, repeatInterval);
        }
      }).bind(this));
    }
    showDailyAtTime(id, title, body, notificationTime, notificationDetails, opts) {
      let payload = opts && 'payload' in opts ? opts.payload : null;
      return async.async(dart.void, (function* showDailyAtTime() {
        let t1, t1$;
        {
          return;
        }
        if (platform.defaultTargetPlatform === platform.TargetPlatform.android) {
          yield (t1 = this.resolvePlatformSpecificImplementation(platform_flutter_local_notifications.AndroidFlutterLocalNotificationsPlugin), t1 == null ? null : t1.showDailyAtTime(id, title, body, notificationTime, notificationDetails.android, {payload: payload}));
        } else if (platform.defaultTargetPlatform === platform.TargetPlatform.iOS) {
          yield (t1$ = this.resolvePlatformSpecificImplementation(platform_flutter_local_notifications.IOSFlutterLocalNotificationsPlugin), t1$ == null ? null : t1$.showDailyAtTime(id, title, body, notificationTime, notificationDetails.iOS, {payload: payload}));
        } else if (platform.defaultTargetPlatform === platform.TargetPlatform.macOS) {
          dart.throw(new core.UnimplementedError.new());
        }
      }).bind(this));
    }
    showWeeklyAtDayAndTime(id, title, body, day, notificationTime, notificationDetails, opts) {
      let payload = opts && 'payload' in opts ? opts.payload : null;
      return async.async(dart.void, (function* showWeeklyAtDayAndTime() {
        let t1, t1$;
        {
          return;
        }
        if (platform.defaultTargetPlatform === platform.TargetPlatform.android) {
          yield (t1 = this.resolvePlatformSpecificImplementation(platform_flutter_local_notifications.AndroidFlutterLocalNotificationsPlugin), t1 == null ? null : t1.showWeeklyAtDayAndTime(id, title, body, day, notificationTime, notificationDetails.android, {payload: payload}));
        } else if (platform.defaultTargetPlatform === platform.TargetPlatform.iOS) {
          yield (t1$ = this.resolvePlatformSpecificImplementation(platform_flutter_local_notifications.IOSFlutterLocalNotificationsPlugin), t1$ == null ? null : t1$.showWeeklyAtDayAndTime(id, title, body, day, notificationTime, notificationDetails.iOS, {payload: payload}));
        } else if (platform.defaultTargetPlatform === platform.TargetPlatform.macOS) {
          dart.throw(new core.UnimplementedError.new());
        }
      }).bind(this));
    }
    pendingNotificationRequests() {
      return flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform.instance.pendingNotificationRequests();
    }
    getActiveNotifications() {
      return flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform.instance.getActiveNotifications();
    }
  };
  (flutter_local_notifications_plugin.FlutterLocalNotificationsPlugin.__ = function() {
    {
      return;
    }
    if (platform.defaultTargetPlatform === platform.TargetPlatform.android) {
      flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform.instance = new platform_flutter_local_notifications.AndroidFlutterLocalNotificationsPlugin.new();
    } else if (platform.defaultTargetPlatform === platform.TargetPlatform.iOS) {
      flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform.instance = new platform_flutter_local_notifications.IOSFlutterLocalNotificationsPlugin.new();
    } else if (platform.defaultTargetPlatform === platform.TargetPlatform.macOS) {
      flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform.instance = new platform_flutter_local_notifications.MacOSFlutterLocalNotificationsPlugin.new();
    } else if (platform.defaultTargetPlatform === platform.TargetPlatform.linux) {
      flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform.instance = new flutter_local_notifications_stub.LinuxFlutterLocalNotificationsPlugin.new();
    }
  }).prototype = flutter_local_notifications_plugin.FlutterLocalNotificationsPlugin.prototype;
  dart.addTypeTests(flutter_local_notifications_plugin.FlutterLocalNotificationsPlugin);
  dart.addTypeCaches(flutter_local_notifications_plugin.FlutterLocalNotificationsPlugin);
  dart.setMethodSignature(flutter_local_notifications_plugin.FlutterLocalNotificationsPlugin, () => ({
    __proto__: dart.getMethods(flutter_local_notifications_plugin.FlutterLocalNotificationsPlugin.__proto__),
    resolvePlatformSpecificImplementation: dart.gFnType(T => [dart.nullable(T), []], T => [flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform]),
    initialize: dart.fnType(async.Future$(dart.nullable(core.bool)), [initialization_settings.InitializationSettings], {onDidReceiveBackgroundNotificationResponse: dart.nullable(dart.fnType(dart.void, [types$.NotificationResponse])), onDidReceiveNotificationResponse: dart.nullable(dart.fnType(dart.void, [types$.NotificationResponse]))}, {}),
    getNotificationAppLaunchDetails: dart.fnType(async.Future$(dart.nullable(types$.NotificationAppLaunchDetails)), []),
    show: dart.fnType(async.Future$(dart.void), [core.int, dart.nullable(core.String), dart.nullable(core.String), dart.nullable(notification_details.NotificationDetails)], {payload: dart.nullable(core.String)}, {}),
    cancel: dart.fnType(async.Future$(dart.void), [core.int], {tag: dart.nullable(core.String)}, {}),
    cancelAll: dart.fnType(async.Future$(dart.void), []),
    schedule: dart.fnType(async.Future$(dart.void), [core.int, dart.nullable(core.String), dart.nullable(core.String), core.DateTime, notification_details.NotificationDetails], {androidAllowWhileIdle: core.bool, payload: dart.nullable(core.String)}, {}),
    zonedSchedule: dart.fnType(async.Future$(dart.void), [core.int, dart.nullable(core.String), dart.nullable(core.String), date_time.TZDateTime, notification_details.NotificationDetails], {matchDateTimeComponents: dart.nullable(types.DateTimeComponents), payload: dart.nullable(core.String)}, {androidAllowWhileIdle: core.bool, uiLocalNotificationDateInterpretation: enums$.UILocalNotificationDateInterpretation}),
    periodicallyShow: dart.fnType(async.Future$(dart.void), [core.int, dart.nullable(core.String), dart.nullable(core.String), types$.RepeatInterval, notification_details.NotificationDetails], {androidAllowWhileIdle: core.bool, payload: dart.nullable(core.String)}, {}),
    showDailyAtTime: dart.fnType(async.Future$(dart.void), [core.int, dart.nullable(core.String), dart.nullable(core.String), types.Time, notification_details.NotificationDetails], {payload: dart.nullable(core.String)}, {}),
    showWeeklyAtDayAndTime: dart.fnType(async.Future$(dart.void), [core.int, dart.nullable(core.String), dart.nullable(core.String), types.Day, types.Time, notification_details.NotificationDetails], {payload: dart.nullable(core.String)}, {}),
    pendingNotificationRequests: dart.fnType(async.Future$(core.List$(types$.PendingNotificationRequest)), []),
    getActiveNotifications: dart.fnType(async.Future$(core.List$(types$.ActiveNotification)), [])
  }));
  dart.setStaticMethodSignature(flutter_local_notifications_plugin.FlutterLocalNotificationsPlugin, () => ['new']);
  dart.setLibraryUri(flutter_local_notifications_plugin.FlutterLocalNotificationsPlugin, I[4]);
  dart.setStaticFieldSignature(flutter_local_notifications_plugin.FlutterLocalNotificationsPlugin, () => ['_instance']);
  dart.defineLazy(flutter_local_notifications_plugin.FlutterLocalNotificationsPlugin, {
    /*flutter_local_notifications_plugin.FlutterLocalNotificationsPlugin._instance*/get _instance() {
      return new flutter_local_notifications_plugin.FlutterLocalNotificationsPlugin.__();
    }
  }, false);
  var android$ = dart.privateName(initialization_settings, "InitializationSettings.android");
  var iOS$ = dart.privateName(initialization_settings, "InitializationSettings.iOS");
  var macOS$ = dart.privateName(initialization_settings, "InitializationSettings.macOS");
  var linux$ = dart.privateName(initialization_settings, "InitializationSettings.linux");
  initialization_settings.InitializationSettings = class InitializationSettings extends core.Object {
    get android() {
      return this[android$];
    }
    set android(value) {
      super.android = value;
    }
    get iOS() {
      return this[iOS$];
    }
    set iOS(value) {
      super.iOS = value;
    }
    get macOS() {
      return this[macOS$];
    }
    set macOS(value) {
      super.macOS = value;
    }
    get linux() {
      return this[linux$];
    }
    set linux(value) {
      super.linux = value;
    }
    static ['_#new#tearOff'](opts) {
      let android = opts && 'android' in opts ? opts.android : null;
      let iOS = opts && 'iOS' in opts ? opts.iOS : null;
      let macOS = opts && 'macOS' in opts ? opts.macOS : null;
      let linux = opts && 'linux' in opts ? opts.linux : null;
      return new initialization_settings.InitializationSettings.new({android: android, iOS: iOS, macOS: macOS, linux: linux});
    }
  };
  (initialization_settings.InitializationSettings.new = function(opts) {
    let android = opts && 'android' in opts ? opts.android : null;
    let iOS = opts && 'iOS' in opts ? opts.iOS : null;
    let macOS = opts && 'macOS' in opts ? opts.macOS : null;
    let linux = opts && 'linux' in opts ? opts.linux : null;
    this[android$] = android;
    this[iOS$] = iOS;
    this[macOS$] = macOS;
    this[linux$] = linux;
    ;
  }).prototype = initialization_settings.InitializationSettings.prototype;
  dart.addTypeTests(initialization_settings.InitializationSettings);
  dart.addTypeCaches(initialization_settings.InitializationSettings);
  dart.setLibraryUri(initialization_settings.InitializationSettings, I[5]);
  dart.setFieldSignature(initialization_settings.InitializationSettings, () => ({
    __proto__: dart.getFields(initialization_settings.InitializationSettings.__proto__),
    android: dart.finalFieldType(dart.nullable(initialization_settings$.AndroidInitializationSettings)),
    iOS: dart.finalFieldType(dart.nullable(initialization_settings$0.DarwinInitializationSettings)),
    macOS: dart.finalFieldType(dart.nullable(initialization_settings$0.DarwinInitializationSettings)),
    linux: dart.finalFieldType(dart.nullable(initialization_settings$1.LinuxInitializationSettings))
  }));
  var android$0 = dart.privateName(notification_details, "NotificationDetails.android");
  var iOS$0 = dart.privateName(notification_details, "NotificationDetails.iOS");
  var macOS$0 = dart.privateName(notification_details, "NotificationDetails.macOS");
  var linux$0 = dart.privateName(notification_details, "NotificationDetails.linux");
  notification_details.NotificationDetails = class NotificationDetails extends core.Object {
    get android() {
      return this[android$0];
    }
    set android(value) {
      super.android = value;
    }
    get iOS() {
      return this[iOS$0];
    }
    set iOS(value) {
      super.iOS = value;
    }
    get macOS() {
      return this[macOS$0];
    }
    set macOS(value) {
      super.macOS = value;
    }
    get linux() {
      return this[linux$0];
    }
    set linux(value) {
      super.linux = value;
    }
    static ['_#new#tearOff'](opts) {
      let android = opts && 'android' in opts ? opts.android : null;
      let iOS = opts && 'iOS' in opts ? opts.iOS : null;
      let macOS = opts && 'macOS' in opts ? opts.macOS : null;
      let linux = opts && 'linux' in opts ? opts.linux : null;
      return new notification_details.NotificationDetails.new({android: android, iOS: iOS, macOS: macOS, linux: linux});
    }
  };
  (notification_details.NotificationDetails.new = function(opts) {
    let android = opts && 'android' in opts ? opts.android : null;
    let iOS = opts && 'iOS' in opts ? opts.iOS : null;
    let macOS = opts && 'macOS' in opts ? opts.macOS : null;
    let linux = opts && 'linux' in opts ? opts.linux : null;
    this[android$0] = android;
    this[iOS$0] = iOS;
    this[macOS$0] = macOS;
    this[linux$0] = linux;
    ;
  }).prototype = notification_details.NotificationDetails.prototype;
  dart.addTypeTests(notification_details.NotificationDetails);
  dart.addTypeCaches(notification_details.NotificationDetails);
  dart.setLibraryUri(notification_details.NotificationDetails, I[6]);
  dart.setFieldSignature(notification_details.NotificationDetails, () => ({
    __proto__: dart.getFields(notification_details.NotificationDetails.__proto__),
    android: dart.finalFieldType(dart.nullable(notification_details$.AndroidNotificationDetails)),
    iOS: dart.finalFieldType(dart.nullable(notification_details$0.DarwinNotificationDetails)),
    macOS: dart.finalFieldType(dart.nullable(notification_details$0.DarwinNotificationDetails)),
    linux: dart.finalFieldType(dart.nullable(notification_details$1.LinuxNotificationDetails))
  }));
  platform_flutter_local_notifications.MethodChannelFlutterLocalNotificationsPlugin = class MethodChannelFlutterLocalNotificationsPlugin extends flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform {
    cancel(id) {
      helpers.validateId(id);
      return platform_flutter_local_notifications._channel.invokeMethod(dart.void, "cancel", id);
    }
    cancelAll() {
      return platform_flutter_local_notifications._channel.invokeMethod(dart.void, "cancelAll");
    }
    getNotificationAppLaunchDetails() {
      return async.async(T.NotificationAppLaunchDetailsN(), function* getNotificationAppLaunchDetails() {
        let result = (yield platform_flutter_local_notifications._channel.invokeMethod(core.Map, "getNotificationAppLaunchDetails"));
        let notificationResponse = T.MapN().as(result != null && result[$containsKey]("notificationResponse") ? result[$_get]("notificationResponse") : null);
        return result != null ? new types$.NotificationAppLaunchDetails.new(core.bool.as(result[$_get]("notificationLaunchedApp")), {notificationResponse: notificationResponse == null ? null : new types$.NotificationResponse.new({id: T.intN().as(notificationResponse[$_get]("notificationId")), actionId: T.StringN().as(notificationResponse[$_get]("actionId")), input: T.StringN().as(notificationResponse[$_get]("input")), notificationResponseType: types$.NotificationResponseType.values[$_get](core.int.as(notificationResponse[$_get]("notificationResponseType"))), payload: T.StringN().as(notificationResponse[$containsKey]("payload") ? notificationResponse[$_get]("payload") : null)})}) : null;
      });
    }
    pendingNotificationRequests() {
      return async.async(T.ListOfPendingNotificationRequest(), function* pendingNotificationRequests() {
        let t1, t1$;
        let pendingNotifications = (yield platform_flutter_local_notifications._channel.invokeListMethod(core.Map, "pendingNotificationRequests"));
        t1$ = (t1 = pendingNotifications, t1 == null ? null : t1[$map](types$.PendingNotificationRequest, dart.fn(p => new types$.PendingNotificationRequest.new(core.int.as(p[$_get]("id")), T.StringN().as(p[$_get]("title")), T.StringN().as(p[$_get]("body")), T.StringN().as(p[$_get]("payload"))), T.MapToPendingNotificationRequest()))[$toList]());
        return t1$ == null ? T.JSArrayOfPendingNotificationRequest().of([]) : t1$;
      });
    }
    getActiveNotifications() {
      return async.async(T.ListOfActiveNotification(), function* getActiveNotifications() {
        let t1, t1$;
        let activeNotifications = (yield platform_flutter_local_notifications._channel.invokeListMethod(core.Map, "getActiveNotifications"));
        t1$ = (t1 = activeNotifications, t1 == null ? null : t1[$map](types$.ActiveNotification, dart.fn(p => new types$.ActiveNotification.new({id: core.int.as(p[$_get]("id")), channelId: T.StringN().as(p[$_get]("channelId")), groupKey: T.StringN().as(p[$_get]("groupKey")), tag: T.StringN().as(p[$_get]("tag")), title: T.StringN().as(p[$_get]("title")), body: T.StringN().as(p[$_get]("body")), payload: T.StringN().as(p[$_get]("payload"))}), T.MapToActiveNotification()))[$toList]());
        return t1$ == null ? T.JSArrayOfActiveNotification().of([]) : t1$;
      });
    }
    static ['_#new#tearOff']() {
      return new platform_flutter_local_notifications.MethodChannelFlutterLocalNotificationsPlugin.new();
    }
  };
  (platform_flutter_local_notifications.MethodChannelFlutterLocalNotificationsPlugin.new = function() {
    platform_flutter_local_notifications.MethodChannelFlutterLocalNotificationsPlugin.__proto__.new.call(this);
    ;
  }).prototype = platform_flutter_local_notifications.MethodChannelFlutterLocalNotificationsPlugin.prototype;
  dart.addTypeTests(platform_flutter_local_notifications.MethodChannelFlutterLocalNotificationsPlugin);
  dart.addTypeCaches(platform_flutter_local_notifications.MethodChannelFlutterLocalNotificationsPlugin);
  dart.setLibraryUri(platform_flutter_local_notifications.MethodChannelFlutterLocalNotificationsPlugin, I[7]);
  var _ondidReceiveNotificationResponse = dart.privateName(platform_flutter_local_notifications, "_ondidReceiveNotificationResponse");
  var _handleMethod = dart.privateName(platform_flutter_local_notifications, "_handleMethod");
  var AndroidServiceStartType_value = dart.privateName(enums, "AndroidServiceStartType.value");
  var _personFromMap = dart.privateName(platform_flutter_local_notifications, "_personFromMap");
  var _messageFromMap = dart.privateName(platform_flutter_local_notifications, "_messageFromMap");
  var _iconFromMap = dart.privateName(platform_flutter_local_notifications, "_iconFromMap");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  var _getNotificationChannelSound = dart.privateName(platform_flutter_local_notifications, "_getNotificationChannelSound");
  platform_flutter_local_notifications.AndroidFlutterLocalNotificationsPlugin = class AndroidFlutterLocalNotificationsPlugin extends platform_flutter_local_notifications.MethodChannelFlutterLocalNotificationsPlugin {
    initialize(initializationSettings, opts) {
      let onDidReceiveNotificationResponse = opts && 'onDidReceiveNotificationResponse' in opts ? opts.onDidReceiveNotificationResponse : null;
      let onDidReceiveBackgroundNotificationResponse = opts && 'onDidReceiveBackgroundNotificationResponse' in opts ? opts.onDidReceiveBackgroundNotificationResponse : null;
      return async.async(core.bool, (function* initialize() {
        this[_ondidReceiveNotificationResponse] = onDidReceiveNotificationResponse;
        platform_flutter_local_notifications._channel.setMethodCallHandler(dart.bind(this, _handleMethod));
        let $arguments = method_channel_mappers['AndroidInitializationSettingsMapper|toMap'](initializationSettings);
        platform_flutter_local_notifications._evaluateBackgroundNotificationCallback(onDidReceiveBackgroundNotificationResponse, $arguments);
        return T.FutureOrOfbool().as(yield platform_flutter_local_notifications._channel.invokeMethod(dart.dynamic, "initialize", $arguments));
      }).bind(this));
    }
    requestPermission() {
      return async.async(T.boolN(), function* requestPermission() {
        return platform_flutter_local_notifications._channel.invokeMethod(core.bool, "requestPermission");
      });
    }
    schedule(id, title, body, scheduledDate, notificationDetails, opts) {
      let payload = opts && 'payload' in opts ? opts.payload : null;
      let androidAllowWhileIdle = opts && 'androidAllowWhileIdle' in opts ? opts.androidAllowWhileIdle : false;
      return async.async(dart.void, function* schedule() {
        let t1, t1$, t1$0;
        helpers.validateId(id);
        let serializedPlatformSpecifics = (t1$ = (t1 = notificationDetails, t1 == null ? null : method_channel_mappers['AndroidNotificationDetailsMapper|toMap'](t1)), t1$ == null ? new (T.IdentityMapOfString$Object()).new() : t1$);
        serializedPlatformSpecifics[$_set]("allowWhileIdle", androidAllowWhileIdle);
        yield platform_flutter_local_notifications._channel.invokeMethod(dart.dynamic, "schedule", new (T.IdentityMapOfString$ObjectN()).from(["id", id, "title", title, "body", body, "millisecondsSinceEpoch", scheduledDate.millisecondsSinceEpoch, "platformSpecifics", serializedPlatformSpecifics, "payload", (t1$0 = payload, t1$0 == null ? "" : t1$0)]));
      });
    }
    zonedSchedule(id, title, body, scheduledDate, notificationDetails, opts) {
      let androidAllowWhileIdle = opts && 'androidAllowWhileIdle' in opts ? opts.androidAllowWhileIdle : null;
      let payload = opts && 'payload' in opts ? opts.payload : null;
      let matchDateTimeComponents = opts && 'matchDateTimeComponents' in opts ? opts.matchDateTimeComponents : null;
      return async.async(dart.void, function* zonedSchedule() {
        let t1, t1$, t1$0, t1$1;
        helpers.validateId(id);
        helpers$.validateDateIsInTheFuture(scheduledDate, matchDateTimeComponents);
        core.ArgumentError.checkNotNull(core.bool, androidAllowWhileIdle, "androidAllowWhileIdle");
        let serializedPlatformSpecifics = (t1$ = (t1 = notificationDetails, t1 == null ? null : method_channel_mappers['AndroidNotificationDetailsMapper|toMap'](t1)), t1$ == null ? new (T.IdentityMapOfString$Object()).new() : t1$);
        serializedPlatformSpecifics[$_set]("allowWhileIdle", androidAllowWhileIdle);
        yield platform_flutter_local_notifications._channel.invokeMethod(dart.dynamic, "zonedSchedule", (t1$1 = new (T.IdentityMapOfString$ObjectN()).from(["id", id, "title", title, "body", body, "platformSpecifics", serializedPlatformSpecifics, "payload", (t1$0 = payload, t1$0 == null ? "" : t1$0)]), (() => {
          t1$1[$addAll](tz_datetime_mapper['TZDateTimeMapper|toMap'](scheduledDate));
          t1$1[$addAll](matchDateTimeComponents == null ? new (T.IdentityMapOfString$Object()).new() : new (T.IdentityMapOfString$Object()).from(["matchDateTimeComponents", matchDateTimeComponents.index]));
          return t1$1;
        })()));
      });
    }
    showDailyAtTime(id, title, body, notificationTime, notificationDetails, opts) {
      let payload = opts && 'payload' in opts ? opts.payload : null;
      return async.async(dart.void, function* showDailyAtTime() {
        let t1, t1$;
        helpers.validateId(id);
        yield platform_flutter_local_notifications._channel.invokeMethod(dart.dynamic, "showDailyAtTime", new (T.IdentityMapOfString$ObjectN()).from(["id", id, "title", title, "body", body, "calledAt", $default.clock.now().millisecondsSinceEpoch, "repeatInterval", types$.RepeatInterval.daily.index, "repeatTime", type_mappers['TimeMapper|toMap'](notificationTime), "platformSpecifics", (t1 = notificationDetails, t1 == null ? null : method_channel_mappers['AndroidNotificationDetailsMapper|toMap'](t1)), "payload", (t1$ = payload, t1$ == null ? "" : t1$)]));
      });
    }
    showWeeklyAtDayAndTime(id, title, body, day, notificationTime, notificationDetails, opts) {
      let payload = opts && 'payload' in opts ? opts.payload : null;
      return async.async(dart.void, function* showWeeklyAtDayAndTime() {
        let t1, t1$;
        helpers.validateId(id);
        yield platform_flutter_local_notifications._channel.invokeMethod(dart.dynamic, "showWeeklyAtDayAndTime", new (T.IdentityMapOfString$ObjectN()).from(["id", id, "title", title, "body", body, "calledAt", $default.clock.now().millisecondsSinceEpoch, "repeatInterval", types$.RepeatInterval.weekly.index, "repeatTime", type_mappers['TimeMapper|toMap'](notificationTime), "day", day.value, "platformSpecifics", (t1 = notificationDetails, t1 == null ? null : method_channel_mappers['AndroidNotificationDetailsMapper|toMap'](t1)), "payload", (t1$ = payload, t1$ == null ? "" : t1$)]));
      });
    }
    startForegroundService(id, title, body, opts) {
      let t1, t1$, t1$0, t1$1, t1$2;
      let notificationDetails = opts && 'notificationDetails' in opts ? opts.notificationDetails : null;
      let payload = opts && 'payload' in opts ? opts.payload : null;
      let startType = opts && 'startType' in opts ? opts.startType : C[16] || CT.C16;
      let foregroundServiceTypes = opts && 'foregroundServiceTypes' in opts ? opts.foregroundServiceTypes : null;
      helpers.validateId(id);
      if (id === 0) {
        dart.throw(new core.ArgumentError.value(id, "id", "The id of a notification used for an Android foreground service must not be 0!"));
      }
      if (dart.test((t1$ = (t1 = foregroundServiceTypes, t1 == null ? null : t1[$isEmpty]), t1$ == null ? false : t1$))) {
        dart.throw(new core.ArgumentError.value(foregroundServiceTypes, "foregroundServiceType", "foregroundServiceType may be null but it must never be empty!"));
      }
      return platform_flutter_local_notifications._channel.invokeMethod(dart.void, "startForegroundService", new (T.IdentityMapOfString$ObjectN()).from(["notificationData", new (T.IdentityMapOfString$ObjectN()).from(["id", id, "title", title, "body", body, "payload", (t1$0 = payload, t1$0 == null ? "" : t1$0), "platformSpecifics", (t1$1 = notificationDetails, t1$1 == null ? null : method_channel_mappers['AndroidNotificationDetailsMapper|toMap'](t1$1))]), "startType", startType.value, "foregroundServiceTypes", (t1$2 = foregroundServiceTypes, t1$2 == null ? null : t1$2[$map](core.int, dart.fn(type => type.value, T.AndroidServiceForegroundTypeToint()))[$toList]())]));
    }
    stopForegroundService() {
      return platform_flutter_local_notifications._channel.invokeMethod(dart.void, "stopForegroundService");
    }
    show(id, title, body, opts) {
      let t1, t1$;
      let notificationDetails = opts && 'notificationDetails' in opts ? opts.notificationDetails : null;
      let payload = opts && 'payload' in opts ? opts.payload : null;
      helpers.validateId(id);
      return platform_flutter_local_notifications._channel.invokeMethod(dart.void, "show", new (T.IdentityMapOfString$ObjectN()).from(["id", id, "title", title, "body", body, "payload", (t1 = payload, t1 == null ? "" : t1), "platformSpecifics", (t1$ = notificationDetails, t1$ == null ? null : method_channel_mappers['AndroidNotificationDetailsMapper|toMap'](t1$))]));
    }
    periodicallyShow(id, title, body, repeatInterval, opts) {
      let notificationDetails = opts && 'notificationDetails' in opts ? opts.notificationDetails : null;
      let payload = opts && 'payload' in opts ? opts.payload : null;
      let androidAllowWhileIdle = opts && 'androidAllowWhileIdle' in opts ? opts.androidAllowWhileIdle : false;
      return async.async(dart.void, function* periodicallyShow() {
        let t1, t1$, t1$0;
        helpers.validateId(id);
        let serializedPlatformSpecifics = (t1$ = (t1 = notificationDetails, t1 == null ? null : method_channel_mappers['AndroidNotificationDetailsMapper|toMap'](t1)), t1$ == null ? new (T.IdentityMapOfString$Object()).new() : t1$);
        serializedPlatformSpecifics[$_set]("allowWhileIdle", androidAllowWhileIdle);
        yield platform_flutter_local_notifications._channel.invokeMethod(dart.dynamic, "periodicallyShow", new (T.IdentityMapOfString$ObjectN()).from(["id", id, "title", title, "body", body, "calledAt", $default.clock.now().millisecondsSinceEpoch, "repeatInterval", repeatInterval.index, "platformSpecifics", serializedPlatformSpecifics, "payload", (t1$0 = payload, t1$0 == null ? "" : t1$0)]));
      });
    }
    cancel(id, opts) {
      let tag = opts && 'tag' in opts ? opts.tag : null;
      return async.async(dart.void, function* cancel() {
        helpers.validateId(id);
        return platform_flutter_local_notifications._channel.invokeMethod(dart.void, "cancel", new (T.IdentityMapOfString$ObjectN()).from(["id", id, "tag", tag]));
      });
    }
    createNotificationChannelGroup(notificationChannelGroup) {
      return platform_flutter_local_notifications._channel.invokeMethod(dart.void, "createNotificationChannelGroup", method_channel_mappers['AndroidNotificationChannelGroupMapper|toMap'](notificationChannelGroup));
    }
    deleteNotificationChannelGroup(groupId) {
      return platform_flutter_local_notifications._channel.invokeMethod(dart.void, "deleteNotificationChannelGroup", groupId);
    }
    createNotificationChannel(notificationChannel) {
      return platform_flutter_local_notifications._channel.invokeMethod(dart.void, "createNotificationChannel", method_channel_mappers['AndroidNotificationChannelMapper|toMap'](notificationChannel));
    }
    deleteNotificationChannel(channelId) {
      return platform_flutter_local_notifications._channel.invokeMethod(dart.void, "deleteNotificationChannel", channelId);
    }
    getActiveNotificationMessagingStyle(id, opts) {
      let tag = opts && 'tag' in opts ? opts.tag : null;
      return async.async(T.MessagingStyleInformationN(), (function* getActiveNotificationMessagingStyle() {
        let t2, t1;
        let m = (yield platform_flutter_local_notifications._channel.invokeMethod(core.Map, "getActiveNotificationMessagingStyle", new (T.IdentityMapOfString$ObjectN()).from(["id", id, "tag", tag])));
        if (m == null) {
          return null;
        }
        return new messaging_style_information.MessagingStyleInformation.new(dart.nullCheck(this[_personFromMap](T.MapN().as(m[$_get]("person")))), {conversationTitle: T.StringN().as(m[$_get]("conversationTitle")), groupConversation: T.boolN().as(m[$_get]("groupConversation")), messages: T.ListNOfMessage().as((t1 = m[$_get]("messages"), t1 == null ? null : (t2 = dart.dgsend(t1, [message.Message], 'map', [dart.fn(m => this[_messageFromMap](core.Map.as(m)), T.dynamicToMessage())]), t2 == null ? null : dart.dsend(t2, 'toList', []))))});
      }).bind(this));
    }
    [_personFromMap](m) {
      if (m == null) {
        return null;
      }
      return new person.Person.new({bot: core.bool.as(m[$_get]("bot")), icon: this[_iconFromMap](T.MapN().as(m[$_get]("icon"))), important: core.bool.as(m[$_get]("important")), key: T.StringN().as(m[$_get]("key")), name: T.StringN().as(m[$_get]("name")), uri: T.StringN().as(m[$_get]("uri"))});
    }
    [_messageFromMap](m) {
      return new message.Message.new(core.String.as(m[$_get]("text")), new core.DateTime.fromMillisecondsSinceEpoch(core.int.as(m[$_get]("timestamp"))), this[_personFromMap](T.MapN().as(m[$_get]("person"))));
    }
    [_iconFromMap](m) {
      if (m == null) {
        return null;
      }
      switch (enums.AndroidIconSource.values[$_get](core.int.as(m[$_get]("source")))) {
        case C[17] || CT.C17:
          {
            return new icon.DrawableResourceAndroidIcon.new(core.String.as(m[$_get]("data")));
          }
        case C[18] || CT.C18:
          {
            return new icon.ContentUriAndroidIcon.new(core.String.as(m[$_get]("data")));
          }
        default:
          {
            return null;
          }
      }
    }
    getNotificationChannels() {
      return async.async(T.ListNOfAndroidNotificationChannel(), (function* getNotificationChannels() {
        let t1;
        let notificationChannels = (yield platform_flutter_local_notifications._channel.invokeListMethod(core.Map, "getNotificationChannels"));
        t1 = notificationChannels;
        return t1 == null ? null : t1[$map](notification_channel.AndroidNotificationChannel, dart.fn(a => new notification_channel.AndroidNotificationChannel.new(core.String.as(a[$_get]("id")), core.String.as(a[$_get]("name")), {description: T.StringN().as(a[$_get]("description")), groupId: T.StringN().as(a[$_get]("groupId")), showBadge: core.bool.as(a[$_get]("showBadge")), importance: new enums.Importance.new(core.int.as(a[$_get]("importance"))), playSound: core.bool.as(a[$_get]("playSound")), sound: this[_getNotificationChannelSound](a), enableLights: core.bool.as(a[$_get]("enableLights")), enableVibration: core.bool.as(a[$_get]("enableVibration")), vibrationPattern: T.Int64ListN().as(a[$_get]("vibrationPattern")), ledColor: new ui.Color.new(core.int.as(a[$_get]("ledColor")))}), T.MapToAndroidNotificationChannel()))[$toList]();
      }).bind(this));
    }
    areNotificationsEnabled() {
      return async.async(T.boolN(), function* areNotificationsEnabled() {
        return yield platform_flutter_local_notifications._channel.invokeMethod(core.bool, "areNotificationsEnabled");
      });
    }
    [_getNotificationChannelSound](channelMap) {
      let soundSourceIndex = T.intN().as(channelMap[$_get]("soundSource"));
      let sound = null;
      if (soundSourceIndex != null) {
        if (soundSourceIndex === enums.AndroidNotificationSoundSource.rawResource.index) {
          sound = new notification_sound.RawResourceAndroidNotificationSound.new(T.StringN().as(channelMap[$_get]("sound")));
        } else if (soundSourceIndex === enums.AndroidNotificationSoundSource.uri.index) {
          sound = new notification_sound.UriAndroidNotificationSound.new(core.String.as(channelMap[$_get]("sound")));
        }
      }
      return sound;
    }
    [_handleMethod](call) {
      return async.async(dart.void, (function* _handleMethod() {
        let t1;
        switch (call.method) {
          case "didReceiveNotificationResponse":
            {
              t1 = this[_ondidReceiveNotificationResponse];
              t1 == null ? null : t1(new types$.NotificationResponse.new({id: T.intN().as(dart.dsend(call.arguments, '_get', ["notificationId"])), actionId: T.StringN().as(dart.dsend(call.arguments, '_get', ["actionId"])), input: T.StringN().as(dart.dsend(call.arguments, '_get', ["input"])), payload: T.StringN().as(dart.dsend(call.arguments, '_get', ["payload"])), notificationResponseType: types$.NotificationResponseType.values[$_get](core.int.as(dart.dsend(call.arguments, '_get', ["notificationResponseType"])))}));
              break;
            }
          default:
            {
              return yield T.FutureOfvoid().error("Method not defined");
            }
        }
      }).bind(this));
    }
    static ['_#new#tearOff']() {
      return new platform_flutter_local_notifications.AndroidFlutterLocalNotificationsPlugin.new();
    }
  };
  (platform_flutter_local_notifications.AndroidFlutterLocalNotificationsPlugin.new = function() {
    this[_ondidReceiveNotificationResponse] = null;
    platform_flutter_local_notifications.AndroidFlutterLocalNotificationsPlugin.__proto__.new.call(this);
    ;
  }).prototype = platform_flutter_local_notifications.AndroidFlutterLocalNotificationsPlugin.prototype;
  dart.addTypeTests(platform_flutter_local_notifications.AndroidFlutterLocalNotificationsPlugin);
  dart.addTypeCaches(platform_flutter_local_notifications.AndroidFlutterLocalNotificationsPlugin);
  dart.setMethodSignature(platform_flutter_local_notifications.AndroidFlutterLocalNotificationsPlugin, () => ({
    __proto__: dart.getMethods(platform_flutter_local_notifications.AndroidFlutterLocalNotificationsPlugin.__proto__),
    initialize: dart.fnType(async.Future$(core.bool), [initialization_settings$.AndroidInitializationSettings], {onDidReceiveBackgroundNotificationResponse: dart.nullable(dart.fnType(dart.void, [types$.NotificationResponse])), onDidReceiveNotificationResponse: dart.nullable(dart.fnType(dart.void, [types$.NotificationResponse]))}, {}),
    requestPermission: dart.fnType(async.Future$(dart.nullable(core.bool)), []),
    schedule: dart.fnType(async.Future$(dart.void), [core.int, dart.nullable(core.String), dart.nullable(core.String), core.DateTime, dart.nullable(notification_details$.AndroidNotificationDetails)], {androidAllowWhileIdle: core.bool, payload: dart.nullable(core.String)}, {}),
    zonedSchedule: dart.fnType(async.Future$(dart.void), [core.int, dart.nullable(core.String), dart.nullable(core.String), date_time.TZDateTime, dart.nullable(notification_details$.AndroidNotificationDetails)], {matchDateTimeComponents: dart.nullable(types.DateTimeComponents), payload: dart.nullable(core.String)}, {androidAllowWhileIdle: core.bool}),
    showDailyAtTime: dart.fnType(async.Future$(dart.void), [core.int, dart.nullable(core.String), dart.nullable(core.String), types.Time, dart.nullable(notification_details$.AndroidNotificationDetails)], {payload: dart.nullable(core.String)}, {}),
    showWeeklyAtDayAndTime: dart.fnType(async.Future$(dart.void), [core.int, dart.nullable(core.String), dart.nullable(core.String), types.Day, types.Time, dart.nullable(notification_details$.AndroidNotificationDetails)], {payload: dart.nullable(core.String)}, {}),
    startForegroundService: dart.fnType(async.Future$(dart.void), [core.int, dart.nullable(core.String), dart.nullable(core.String)], {foregroundServiceTypes: dart.nullable(core.Set$(enums.AndroidServiceForegroundType)), notificationDetails: dart.nullable(notification_details$.AndroidNotificationDetails), payload: dart.nullable(core.String), startType: enums.AndroidServiceStartType}, {}),
    stopForegroundService: dart.fnType(async.Future$(dart.void), []),
    show: dart.fnType(async.Future$(dart.void), [core.int, dart.nullable(core.String), dart.nullable(core.String)], {notificationDetails: dart.nullable(notification_details$.AndroidNotificationDetails), payload: dart.nullable(core.String)}, {}),
    periodicallyShow: dart.fnType(async.Future$(dart.void), [core.int, dart.nullable(core.String), dart.nullable(core.String), types$.RepeatInterval], {androidAllowWhileIdle: core.bool, notificationDetails: dart.nullable(notification_details$.AndroidNotificationDetails), payload: dart.nullable(core.String)}, {}),
    cancel: dart.fnType(async.Future$(dart.void), [core.int], {tag: dart.nullable(core.String)}, {}),
    createNotificationChannelGroup: dart.fnType(async.Future$(dart.void), [notification_channel_group.AndroidNotificationChannelGroup]),
    deleteNotificationChannelGroup: dart.fnType(async.Future$(dart.void), [core.String]),
    createNotificationChannel: dart.fnType(async.Future$(dart.void), [notification_channel.AndroidNotificationChannel]),
    deleteNotificationChannel: dart.fnType(async.Future$(dart.void), [core.String]),
    getActiveNotificationMessagingStyle: dart.fnType(async.Future$(dart.nullable(messaging_style_information.MessagingStyleInformation)), [core.int], {tag: dart.nullable(core.String)}, {}),
    [_personFromMap]: dart.fnType(dart.nullable(person.Person), [dart.nullable(core.Map)]),
    [_messageFromMap]: dart.fnType(message.Message, [core.Map]),
    [_iconFromMap]: dart.fnType(dart.nullable(icon.AndroidIcon$(core.Object)), [dart.nullable(core.Map)]),
    getNotificationChannels: dart.fnType(async.Future$(dart.nullable(core.List$(notification_channel.AndroidNotificationChannel))), []),
    areNotificationsEnabled: dart.fnType(async.Future$(dart.nullable(core.bool)), []),
    [_getNotificationChannelSound]: dart.fnType(dart.nullable(notification_sound.AndroidNotificationSound), [core.Map]),
    [_handleMethod]: dart.fnType(async.Future$(dart.void), [message_codec.MethodCall])
  }));
  dart.setLibraryUri(platform_flutter_local_notifications.AndroidFlutterLocalNotificationsPlugin, I[7]);
  dart.setFieldSignature(platform_flutter_local_notifications.AndroidFlutterLocalNotificationsPlugin, () => ({
    __proto__: dart.getFields(platform_flutter_local_notifications.AndroidFlutterLocalNotificationsPlugin.__proto__),
    [_ondidReceiveNotificationResponse]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [types$.NotificationResponse])))
  }));
  var _onDidReceiveNotificationResponse = dart.privateName(platform_flutter_local_notifications, "_onDidReceiveNotificationResponse");
  var _onDidReceiveLocalNotification = dart.privateName(platform_flutter_local_notifications, "_onDidReceiveLocalNotification");
  platform_flutter_local_notifications.IOSFlutterLocalNotificationsPlugin = class IOSFlutterLocalNotificationsPlugin extends platform_flutter_local_notifications.MethodChannelFlutterLocalNotificationsPlugin {
    initialize(initializationSettings, opts) {
      let onDidReceiveNotificationResponse = opts && 'onDidReceiveNotificationResponse' in opts ? opts.onDidReceiveNotificationResponse : null;
      let onDidReceiveBackgroundNotificationResponse = opts && 'onDidReceiveBackgroundNotificationResponse' in opts ? opts.onDidReceiveBackgroundNotificationResponse : null;
      return async.async(T.boolN(), (function* initialize() {
        this[_onDidReceiveNotificationResponse] = onDidReceiveNotificationResponse;
        this[_onDidReceiveLocalNotification] = initializationSettings.onDidReceiveLocalNotification;
        platform_flutter_local_notifications._channel.setMethodCallHandler(dart.bind(this, _handleMethod));
        let $arguments = mappers['DarwinInitializationSettingsMapper|toMap'](initializationSettings);
        platform_flutter_local_notifications._evaluateBackgroundNotificationCallback(onDidReceiveBackgroundNotificationResponse, $arguments);
        return yield platform_flutter_local_notifications._channel.invokeMethod(core.bool, "initialize", $arguments);
      }).bind(this));
    }
    requestPermissions(opts) {
      let sound = opts && 'sound' in opts ? opts.sound : false;
      let alert = opts && 'alert' in opts ? opts.alert : false;
      let badge = opts && 'badge' in opts ? opts.badge : false;
      let critical = opts && 'critical' in opts ? opts.critical : false;
      return platform_flutter_local_notifications._channel.invokeMethod(T.boolN(), "requestPermissions", new (T.IdentityMapOfString$bool()).from(["sound", sound, "alert", alert, "badge", badge, "critical", critical]));
    }
    schedule(id, title, body, scheduledDate, notificationDetails, opts) {
      let payload = opts && 'payload' in opts ? opts.payload : null;
      return async.async(dart.void, function* schedule() {
        let t1, t1$;
        helpers.validateId(id);
        yield platform_flutter_local_notifications._channel.invokeMethod(dart.dynamic, "schedule", new (T.IdentityMapOfString$ObjectN()).from(["id", id, "title", title, "body", body, "millisecondsSinceEpoch", scheduledDate.millisecondsSinceEpoch, "platformSpecifics", (t1 = notificationDetails, t1 == null ? null : mappers['DarwinNotificationDetailsMapper|toMap'](t1)), "payload", (t1$ = payload, t1$ == null ? "" : t1$)]));
      });
    }
    zonedSchedule(id, title, body, scheduledDate, notificationDetails, opts) {
      let uiLocalNotificationDateInterpretation = opts && 'uiLocalNotificationDateInterpretation' in opts ? opts.uiLocalNotificationDateInterpretation : null;
      let payload = opts && 'payload' in opts ? opts.payload : null;
      let matchDateTimeComponents = opts && 'matchDateTimeComponents' in opts ? opts.matchDateTimeComponents : null;
      return async.async(dart.void, function* zonedSchedule() {
        let t1, t1$, t1$0, t1$1;
        helpers.validateId(id);
        helpers$.validateDateIsInTheFuture(scheduledDate, matchDateTimeComponents);
        core.ArgumentError.checkNotNull(enums$.UILocalNotificationDateInterpretation, uiLocalNotificationDateInterpretation, "uiLocalNotificationDateInterpretation");
        let serializedPlatformSpecifics = (t1$ = (t1 = notificationDetails, t1 == null ? null : mappers['DarwinNotificationDetailsMapper|toMap'](t1)), t1$ == null ? new (T.IdentityMapOfString$Object()).new() : t1$);
        yield platform_flutter_local_notifications._channel.invokeMethod(dart.dynamic, "zonedSchedule", (t1$1 = new (T.IdentityMapOfString$ObjectN()).from(["id", id, "title", title, "body", body, "platformSpecifics", serializedPlatformSpecifics, "payload", (t1$0 = payload, t1$0 == null ? "" : t1$0), "uiLocalNotificationDateInterpretation", uiLocalNotificationDateInterpretation.index]), (() => {
          t1$1[$addAll](tz_datetime_mapper['TZDateTimeMapper|toMap'](scheduledDate));
          t1$1[$addAll](matchDateTimeComponents == null ? new (T.IdentityMapOfString$Object()).new() : new (T.IdentityMapOfString$Object()).from(["matchDateTimeComponents", matchDateTimeComponents.index]));
          return t1$1;
        })()));
      });
    }
    showDailyAtTime(id, title, body, notificationTime, notificationDetails, opts) {
      let payload = opts && 'payload' in opts ? opts.payload : null;
      return async.async(dart.void, function* showDailyAtTime() {
        let t1, t1$;
        helpers.validateId(id);
        yield platform_flutter_local_notifications._channel.invokeMethod(dart.dynamic, "showDailyAtTime", new (T.IdentityMapOfString$ObjectN()).from(["id", id, "title", title, "body", body, "calledAt", $default.clock.now().millisecondsSinceEpoch, "repeatInterval", types$.RepeatInterval.daily.index, "repeatTime", type_mappers['TimeMapper|toMap'](notificationTime), "platformSpecifics", (t1 = notificationDetails, t1 == null ? null : mappers['DarwinNotificationDetailsMapper|toMap'](t1)), "payload", (t1$ = payload, t1$ == null ? "" : t1$)]));
      });
    }
    showWeeklyAtDayAndTime(id, title, body, day, notificationTime, notificationDetails, opts) {
      let payload = opts && 'payload' in opts ? opts.payload : null;
      return async.async(dart.void, function* showWeeklyAtDayAndTime() {
        let t1, t1$;
        helpers.validateId(id);
        yield platform_flutter_local_notifications._channel.invokeMethod(dart.dynamic, "showWeeklyAtDayAndTime", new (T.IdentityMapOfString$ObjectN()).from(["id", id, "title", title, "body", body, "calledAt", $default.clock.now().millisecondsSinceEpoch, "repeatInterval", types$.RepeatInterval.weekly.index, "repeatTime", type_mappers['TimeMapper|toMap'](notificationTime), "day", day.value, "platformSpecifics", (t1 = notificationDetails, t1 == null ? null : mappers['DarwinNotificationDetailsMapper|toMap'](t1)), "payload", (t1$ = payload, t1$ == null ? "" : t1$)]));
      });
    }
    show(id, title, body, opts) {
      let t1, t1$;
      let notificationDetails = opts && 'notificationDetails' in opts ? opts.notificationDetails : null;
      let payload = opts && 'payload' in opts ? opts.payload : null;
      helpers.validateId(id);
      return platform_flutter_local_notifications._channel.invokeMethod(dart.void, "show", new (T.IdentityMapOfString$ObjectN()).from(["id", id, "title", title, "body", body, "payload", (t1 = payload, t1 == null ? "" : t1), "platformSpecifics", (t1$ = notificationDetails, t1$ == null ? null : mappers['DarwinNotificationDetailsMapper|toMap'](t1$))]));
    }
    periodicallyShow(id, title, body, repeatInterval, opts) {
      let notificationDetails = opts && 'notificationDetails' in opts ? opts.notificationDetails : null;
      let payload = opts && 'payload' in opts ? opts.payload : null;
      return async.async(dart.void, function* periodicallyShow() {
        let t1, t1$;
        helpers.validateId(id);
        yield platform_flutter_local_notifications._channel.invokeMethod(dart.dynamic, "periodicallyShow", new (T.IdentityMapOfString$ObjectN()).from(["id", id, "title", title, "body", body, "calledAt", $default.clock.now().millisecondsSinceEpoch, "repeatInterval", repeatInterval.index, "platformSpecifics", (t1 = notificationDetails, t1 == null ? null : mappers['DarwinNotificationDetailsMapper|toMap'](t1)), "payload", (t1$ = payload, t1$ == null ? "" : t1$)]));
      });
    }
    [_handleMethod](call) {
      return async.async(dart.void, (function* _handleMethod() {
        let t1;
        switch (call.method) {
          case "didReceiveNotificationResponse":
            {
              t1 = this[_onDidReceiveNotificationResponse];
              t1 == null ? null : t1(new types$.NotificationResponse.new({id: T.intN().as(dart.dsend(call.arguments, '_get', ["notificationId"])), actionId: T.StringN().as(dart.dsend(call.arguments, '_get', ["actionId"])), input: T.StringN().as(dart.dsend(call.arguments, '_get', ["input"])), payload: T.StringN().as(dart.dsend(call.arguments, '_get', ["payload"])), notificationResponseType: types$.NotificationResponseType.values[$_get](core.int.as(dart.dsend(call.arguments, '_get', ["notificationResponseType"])))}));
              break;
            }
          case "didReceiveLocalNotification":
            {
              dart.nullCheck(this[_onDidReceiveLocalNotification])(core.int.as(dart.dsend(call.arguments, '_get', ["id"])), T.StringN().as(dart.dsend(call.arguments, '_get', ["title"])), T.StringN().as(dart.dsend(call.arguments, '_get', ["body"])), T.StringN().as(dart.dsend(call.arguments, '_get', ["payload"])));
              break;
            }
          default:
            {
              return yield T.FutureOfvoid().error("Method not defined");
            }
        }
      }).bind(this));
    }
    static ['_#new#tearOff']() {
      return new platform_flutter_local_notifications.IOSFlutterLocalNotificationsPlugin.new();
    }
  };
  (platform_flutter_local_notifications.IOSFlutterLocalNotificationsPlugin.new = function() {
    this[_onDidReceiveNotificationResponse] = null;
    this[_onDidReceiveLocalNotification] = null;
    platform_flutter_local_notifications.IOSFlutterLocalNotificationsPlugin.__proto__.new.call(this);
    ;
  }).prototype = platform_flutter_local_notifications.IOSFlutterLocalNotificationsPlugin.prototype;
  dart.addTypeTests(platform_flutter_local_notifications.IOSFlutterLocalNotificationsPlugin);
  dart.addTypeCaches(platform_flutter_local_notifications.IOSFlutterLocalNotificationsPlugin);
  dart.setMethodSignature(platform_flutter_local_notifications.IOSFlutterLocalNotificationsPlugin, () => ({
    __proto__: dart.getMethods(platform_flutter_local_notifications.IOSFlutterLocalNotificationsPlugin.__proto__),
    initialize: dart.fnType(async.Future$(dart.nullable(core.bool)), [initialization_settings$0.DarwinInitializationSettings], {onDidReceiveBackgroundNotificationResponse: dart.nullable(dart.fnType(dart.void, [types$.NotificationResponse])), onDidReceiveNotificationResponse: dart.nullable(dart.fnType(dart.void, [types$.NotificationResponse]))}, {}),
    requestPermissions: dart.fnType(async.Future$(dart.nullable(core.bool)), [], {alert: core.bool, badge: core.bool, critical: core.bool, sound: core.bool}, {}),
    schedule: dart.fnType(async.Future$(dart.void), [core.int, dart.nullable(core.String), dart.nullable(core.String), core.DateTime, dart.nullable(notification_details$0.DarwinNotificationDetails)], {payload: dart.nullable(core.String)}, {}),
    zonedSchedule: dart.fnType(async.Future$(dart.void), [core.int, dart.nullable(core.String), dart.nullable(core.String), date_time.TZDateTime, dart.nullable(notification_details$0.DarwinNotificationDetails)], {matchDateTimeComponents: dart.nullable(types.DateTimeComponents), payload: dart.nullable(core.String)}, {uiLocalNotificationDateInterpretation: enums$.UILocalNotificationDateInterpretation}),
    showDailyAtTime: dart.fnType(async.Future$(dart.void), [core.int, dart.nullable(core.String), dart.nullable(core.String), types.Time, dart.nullable(notification_details$0.DarwinNotificationDetails)], {payload: dart.nullable(core.String)}, {}),
    showWeeklyAtDayAndTime: dart.fnType(async.Future$(dart.void), [core.int, dart.nullable(core.String), dart.nullable(core.String), types.Day, types.Time, dart.nullable(notification_details$0.DarwinNotificationDetails)], {payload: dart.nullable(core.String)}, {}),
    show: dart.fnType(async.Future$(dart.void), [core.int, dart.nullable(core.String), dart.nullable(core.String)], {notificationDetails: dart.nullable(notification_details$0.DarwinNotificationDetails), payload: dart.nullable(core.String)}, {}),
    periodicallyShow: dart.fnType(async.Future$(dart.void), [core.int, dart.nullable(core.String), dart.nullable(core.String), types$.RepeatInterval], {notificationDetails: dart.nullable(notification_details$0.DarwinNotificationDetails), payload: dart.nullable(core.String)}, {}),
    [_handleMethod]: dart.fnType(async.Future$(dart.void), [message_codec.MethodCall])
  }));
  dart.setLibraryUri(platform_flutter_local_notifications.IOSFlutterLocalNotificationsPlugin, I[7]);
  dart.setFieldSignature(platform_flutter_local_notifications.IOSFlutterLocalNotificationsPlugin, () => ({
    __proto__: dart.getFields(platform_flutter_local_notifications.IOSFlutterLocalNotificationsPlugin.__proto__),
    [_onDidReceiveNotificationResponse]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [types$.NotificationResponse]))),
    [_onDidReceiveLocalNotification]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [core.int, dart.nullable(core.String), dart.nullable(core.String), dart.nullable(core.String)])))
  }));
  platform_flutter_local_notifications.MacOSFlutterLocalNotificationsPlugin = class MacOSFlutterLocalNotificationsPlugin extends platform_flutter_local_notifications.MethodChannelFlutterLocalNotificationsPlugin {
    initialize(initializationSettings, opts) {
      let onDidReceiveNotificationResponse = opts && 'onDidReceiveNotificationResponse' in opts ? opts.onDidReceiveNotificationResponse : null;
      return async.async(T.boolN(), (function* initialize() {
        this[_onDidReceiveNotificationResponse] = onDidReceiveNotificationResponse;
        platform_flutter_local_notifications._channel.setMethodCallHandler(dart.bind(this, _handleMethod));
        return yield platform_flutter_local_notifications._channel.invokeMethod(core.bool, "initialize", mappers['DarwinInitializationSettingsMapper|toMap'](initializationSettings));
      }).bind(this));
    }
    requestPermissions(opts) {
      let sound = opts && 'sound' in opts ? opts.sound : false;
      let alert = opts && 'alert' in opts ? opts.alert : false;
      let badge = opts && 'badge' in opts ? opts.badge : false;
      let critical = opts && 'critical' in opts ? opts.critical : false;
      return platform_flutter_local_notifications._channel.invokeMethod(core.bool, "requestPermissions", new (T.IdentityMapOfString$boolN()).from(["sound", sound, "alert", alert, "badge", badge, "critical", critical]));
    }
    zonedSchedule(id, title, body, scheduledDate, notificationDetails, opts) {
      let payload = opts && 'payload' in opts ? opts.payload : null;
      let matchDateTimeComponents = opts && 'matchDateTimeComponents' in opts ? opts.matchDateTimeComponents : null;
      return async.async(dart.void, function* zonedSchedule() {
        let t1, t1$, t1$0, t1$1;
        helpers.validateId(id);
        helpers$.validateDateIsInTheFuture(scheduledDate, matchDateTimeComponents);
        let serializedPlatformSpecifics = (t1$ = (t1 = notificationDetails, t1 == null ? null : mappers['DarwinNotificationDetailsMapper|toMap'](t1)), t1$ == null ? new (T.IdentityMapOfString$Object()).new() : t1$);
        yield platform_flutter_local_notifications._channel.invokeMethod(dart.dynamic, "zonedSchedule", (t1$1 = new (T.IdentityMapOfString$ObjectN()).from(["id", id, "title", title, "body", body, "platformSpecifics", serializedPlatformSpecifics, "payload", (t1$0 = payload, t1$0 == null ? "" : t1$0)]), (() => {
          t1$1[$addAll](tz_datetime_mapper['TZDateTimeMapper|toMap'](scheduledDate));
          t1$1[$addAll](matchDateTimeComponents == null ? new (T.IdentityMapOfString$Object()).new() : new (T.IdentityMapOfString$Object()).from(["matchDateTimeComponents", matchDateTimeComponents.index]));
          return t1$1;
        })()));
      });
    }
    show(id, title, body, opts) {
      let t1, t1$;
      let notificationDetails = opts && 'notificationDetails' in opts ? opts.notificationDetails : null;
      let payload = opts && 'payload' in opts ? opts.payload : null;
      helpers.validateId(id);
      return platform_flutter_local_notifications._channel.invokeMethod(dart.void, "show", new (T.IdentityMapOfString$ObjectN()).from(["id", id, "title", title, "body", body, "payload", (t1 = payload, t1 == null ? "" : t1), "platformSpecifics", (t1$ = notificationDetails, t1$ == null ? null : mappers['DarwinNotificationDetailsMapper|toMap'](t1$))]));
    }
    periodicallyShow(id, title, body, repeatInterval, opts) {
      let notificationDetails = opts && 'notificationDetails' in opts ? opts.notificationDetails : null;
      let payload = opts && 'payload' in opts ? opts.payload : null;
      return async.async(dart.void, function* periodicallyShow() {
        let t1, t1$;
        helpers.validateId(id);
        yield platform_flutter_local_notifications._channel.invokeMethod(dart.dynamic, "periodicallyShow", new (T.IdentityMapOfString$ObjectN()).from(["id", id, "title", title, "body", body, "calledAt", $default.clock.now().millisecondsSinceEpoch, "repeatInterval", repeatInterval.index, "platformSpecifics", (t1 = notificationDetails, t1 == null ? null : mappers['DarwinNotificationDetailsMapper|toMap'](t1)), "payload", (t1$ = payload, t1$ == null ? "" : t1$)]));
      });
    }
    [_handleMethod](call) {
      return async.async(dart.void, (function* _handleMethod() {
        let t1;
        switch (call.method) {
          case "didReceiveNotificationResponse":
            {
              t1 = this[_onDidReceiveNotificationResponse];
              t1 == null ? null : t1(new types$.NotificationResponse.new({id: T.intN().as(dart.dsend(call.arguments, '_get', ["notificationId"])), actionId: T.StringN().as(dart.dsend(call.arguments, '_get', ["actionId"])), input: T.StringN().as(dart.dsend(call.arguments, '_get', ["input"])), payload: T.StringN().as(dart.dsend(call.arguments, '_get', ["payload"])), notificationResponseType: types$.NotificationResponseType.values[$_get](core.int.as(dart.dsend(call.arguments, '_get', ["notificationResponseType"])))}));
              break;
            }
          default:
            {
              return yield T.FutureOfvoid().error("Method not defined");
            }
        }
      }).bind(this));
    }
    static ['_#new#tearOff']() {
      return new platform_flutter_local_notifications.MacOSFlutterLocalNotificationsPlugin.new();
    }
  };
  (platform_flutter_local_notifications.MacOSFlutterLocalNotificationsPlugin.new = function() {
    this[_onDidReceiveNotificationResponse] = null;
    platform_flutter_local_notifications.MacOSFlutterLocalNotificationsPlugin.__proto__.new.call(this);
    ;
  }).prototype = platform_flutter_local_notifications.MacOSFlutterLocalNotificationsPlugin.prototype;
  dart.addTypeTests(platform_flutter_local_notifications.MacOSFlutterLocalNotificationsPlugin);
  dart.addTypeCaches(platform_flutter_local_notifications.MacOSFlutterLocalNotificationsPlugin);
  dart.setMethodSignature(platform_flutter_local_notifications.MacOSFlutterLocalNotificationsPlugin, () => ({
    __proto__: dart.getMethods(platform_flutter_local_notifications.MacOSFlutterLocalNotificationsPlugin.__proto__),
    initialize: dart.fnType(async.Future$(dart.nullable(core.bool)), [initialization_settings$0.DarwinInitializationSettings], {onDidReceiveNotificationResponse: dart.nullable(dart.fnType(dart.void, [types$.NotificationResponse]))}, {}),
    requestPermissions: dart.fnType(async.Future$(dart.nullable(core.bool)), [], {alert: core.bool, badge: core.bool, critical: core.bool, sound: core.bool}, {}),
    zonedSchedule: dart.fnType(async.Future$(dart.void), [core.int, dart.nullable(core.String), dart.nullable(core.String), date_time.TZDateTime, dart.nullable(notification_details$0.DarwinNotificationDetails)], {matchDateTimeComponents: dart.nullable(types.DateTimeComponents), payload: dart.nullable(core.String)}, {}),
    show: dart.fnType(async.Future$(dart.void), [core.int, dart.nullable(core.String), dart.nullable(core.String)], {notificationDetails: dart.nullable(notification_details$0.DarwinNotificationDetails), payload: dart.nullable(core.String)}, {}),
    periodicallyShow: dart.fnType(async.Future$(dart.void), [core.int, dart.nullable(core.String), dart.nullable(core.String), types$.RepeatInterval], {notificationDetails: dart.nullable(notification_details$0.DarwinNotificationDetails), payload: dart.nullable(core.String)}, {}),
    [_handleMethod]: dart.fnType(async.Future$(dart.void), [message_codec.MethodCall])
  }));
  dart.setLibraryUri(platform_flutter_local_notifications.MacOSFlutterLocalNotificationsPlugin, I[7]);
  dart.setFieldSignature(platform_flutter_local_notifications.MacOSFlutterLocalNotificationsPlugin, () => ({
    __proto__: dart.getFields(platform_flutter_local_notifications.MacOSFlutterLocalNotificationsPlugin.__proto__),
    [_onDidReceiveNotificationResponse]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [types$.NotificationResponse])))
  }));
  platform_flutter_local_notifications._evaluateBackgroundNotificationCallback = function _evaluateBackgroundNotificationCallback(didReceiveBackgroundNotificationResponseCallback, $arguments) {
    if (didReceiveBackgroundNotificationResponseCallback != null) {
      let callback = ui.PluginUtilities.getCallbackHandle(didReceiveBackgroundNotificationResponseCallback);
      if (!(callback != null)) dart.assertFailed("          The backgroundHandler needs to be either a static function or a top \n          level function to be accessible as a Flutter entry point.", I[8], 1018, 12, "callback != null");
      let dispatcher = ui.PluginUtilities.getCallbackHandle(C[19] || CT.C19);
      $arguments[$_set]("dispatcher_handle", dart.nullCheck(dispatcher).toRawHandle());
      $arguments[$_set]("callback_handle", dart.nullCheck(callback).toRawHandle());
    }
  };
  var MethodChannel__binaryMessenger = dart.privateName(platform_channel, "MethodChannel._binaryMessenger");
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  var MethodChannel_codec = dart.privateName(platform_channel, "MethodChannel.codec");
  var MethodChannel_name = dart.privateName(platform_channel, "MethodChannel.name");
  dart.defineLazy(platform_flutter_local_notifications, {
    /*platform_flutter_local_notifications._channel*/get _channel() {
      return C[20] || CT.C20;
    }
  }, false);
  const _is_AndroidBitmap_default = Symbol('_is_AndroidBitmap_default');
  bitmap.AndroidBitmap$ = dart.generic(T => {
    class AndroidBitmap extends core.Object {}
    (AndroidBitmap.new = function() {
      ;
    }).prototype = AndroidBitmap.prototype;
    dart.addTypeTests(AndroidBitmap);
    AndroidBitmap.prototype[_is_AndroidBitmap_default] = true;
    dart.addTypeCaches(AndroidBitmap);
    dart.setLibraryUri(AndroidBitmap, I[9]);
    return AndroidBitmap;
  });
  bitmap.AndroidBitmap = bitmap.AndroidBitmap$();
  dart.addTypeTests(bitmap.AndroidBitmap, _is_AndroidBitmap_default);
  var _bitmap$ = dart.privateName(bitmap, "DrawableResourceAndroidBitmap._bitmap");
  var _bitmap = dart.privateName(bitmap, "_bitmap");
  bitmap.DrawableResourceAndroidBitmap = class DrawableResourceAndroidBitmap extends core.Object {
    get [_bitmap]() {
      return this[_bitmap$];
    }
    set [_bitmap](value) {
      super[_bitmap] = value;
    }
    static ['_#new#tearOff'](_bitmap) {
      return new bitmap.DrawableResourceAndroidBitmap.new(_bitmap);
    }
    get data() {
      return this[_bitmap];
    }
    get source() {
      return enums.AndroidBitmapSource.drawable;
    }
  };
  (bitmap.DrawableResourceAndroidBitmap.new = function(_bitmap) {
    this[_bitmap$] = _bitmap;
    ;
  }).prototype = bitmap.DrawableResourceAndroidBitmap.prototype;
  dart.addTypeTests(bitmap.DrawableResourceAndroidBitmap);
  dart.addTypeCaches(bitmap.DrawableResourceAndroidBitmap);
  bitmap.DrawableResourceAndroidBitmap[dart.implements] = () => [bitmap.AndroidBitmap$(core.String)];
  dart.setGetterSignature(bitmap.DrawableResourceAndroidBitmap, () => ({
    __proto__: dart.getGetters(bitmap.DrawableResourceAndroidBitmap.__proto__),
    data: core.String,
    source: enums.AndroidBitmapSource
  }));
  dart.setLibraryUri(bitmap.DrawableResourceAndroidBitmap, I[9]);
  dart.setFieldSignature(bitmap.DrawableResourceAndroidBitmap, () => ({
    __proto__: dart.getFields(bitmap.DrawableResourceAndroidBitmap.__proto__),
    [_bitmap]: dart.finalFieldType(core.String)
  }));
  var _bitmap$0 = dart.privateName(bitmap, "FilePathAndroidBitmap._bitmap");
  bitmap.FilePathAndroidBitmap = class FilePathAndroidBitmap extends core.Object {
    get [_bitmap]() {
      return this[_bitmap$0];
    }
    set [_bitmap](value) {
      super[_bitmap] = value;
    }
    static ['_#new#tearOff'](_bitmap) {
      return new bitmap.FilePathAndroidBitmap.new(_bitmap);
    }
    get data() {
      return this[_bitmap];
    }
    get source() {
      return enums.AndroidBitmapSource.filePath;
    }
  };
  (bitmap.FilePathAndroidBitmap.new = function(_bitmap) {
    this[_bitmap$0] = _bitmap;
    ;
  }).prototype = bitmap.FilePathAndroidBitmap.prototype;
  dart.addTypeTests(bitmap.FilePathAndroidBitmap);
  dart.addTypeCaches(bitmap.FilePathAndroidBitmap);
  bitmap.FilePathAndroidBitmap[dart.implements] = () => [bitmap.AndroidBitmap$(core.String)];
  dart.setGetterSignature(bitmap.FilePathAndroidBitmap, () => ({
    __proto__: dart.getGetters(bitmap.FilePathAndroidBitmap.__proto__),
    data: core.String,
    source: enums.AndroidBitmapSource
  }));
  dart.setLibraryUri(bitmap.FilePathAndroidBitmap, I[9]);
  dart.setFieldSignature(bitmap.FilePathAndroidBitmap, () => ({
    __proto__: dart.getFields(bitmap.FilePathAndroidBitmap.__proto__),
    [_bitmap]: dart.finalFieldType(core.String)
  }));
  var _bitmap$1 = dart.privateName(bitmap, "ByteArrayAndroidBitmap._bitmap");
  bitmap.ByteArrayAndroidBitmap = class ByteArrayAndroidBitmap extends core.Object {
    get [_bitmap]() {
      return this[_bitmap$1];
    }
    set [_bitmap](value) {
      super[_bitmap] = value;
    }
    static ['_#new#tearOff'](_bitmap) {
      return new bitmap.ByteArrayAndroidBitmap.new(_bitmap);
    }
    static fromBase64String(base64Image) {
      return new bitmap.ByteArrayAndroidBitmap.new(convert.base64Decode(base64Image));
    }
    static ['_#fromBase64String#tearOff'](base64Image) {
      return bitmap.ByteArrayAndroidBitmap.fromBase64String(base64Image);
    }
    get data() {
      return this[_bitmap];
    }
    get source() {
      return enums.AndroidBitmapSource.byteArray;
    }
  };
  (bitmap.ByteArrayAndroidBitmap.new = function(_bitmap) {
    this[_bitmap$1] = _bitmap;
    ;
  }).prototype = bitmap.ByteArrayAndroidBitmap.prototype;
  dart.addTypeTests(bitmap.ByteArrayAndroidBitmap);
  dart.addTypeCaches(bitmap.ByteArrayAndroidBitmap);
  bitmap.ByteArrayAndroidBitmap[dart.implements] = () => [bitmap.AndroidBitmap$(typed_data.Uint8List)];
  dart.setStaticMethodSignature(bitmap.ByteArrayAndroidBitmap, () => ['fromBase64String']);
  dart.setGetterSignature(bitmap.ByteArrayAndroidBitmap, () => ({
    __proto__: dart.getGetters(bitmap.ByteArrayAndroidBitmap.__proto__),
    data: typed_data.Uint8List,
    source: enums.AndroidBitmapSource
  }));
  dart.setLibraryUri(bitmap.ByteArrayAndroidBitmap, I[9]);
  dart.setFieldSignature(bitmap.ByteArrayAndroidBitmap, () => ({
    __proto__: dart.getFields(bitmap.ByteArrayAndroidBitmap.__proto__),
    [_bitmap]: dart.finalFieldType(typed_data.Uint8List)
  }));
  var name$ = dart.privateName(categories, "AndroidNotificationCategory.name");
  categories.AndroidNotificationCategory = class AndroidNotificationCategory extends core.Object {
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    static ['_#new#tearOff'](name) {
      return new categories.AndroidNotificationCategory.new(name);
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      return categories.AndroidNotificationCategory.is(other) && other.name === this.name;
    }
    get hashCode() {
      return this.name[$hashCode];
    }
    toString() {
      return "AndroidNotificationCategory(name: " + this.name + ")";
    }
  };
  (categories.AndroidNotificationCategory.new = function(name) {
    this[name$] = name;
    ;
  }).prototype = categories.AndroidNotificationCategory.prototype;
  dart.addTypeTests(categories.AndroidNotificationCategory);
  dart.addTypeCaches(categories.AndroidNotificationCategory);
  dart.setLibraryUri(categories.AndroidNotificationCategory, I[10]);
  dart.setFieldSignature(categories.AndroidNotificationCategory, () => ({
    __proto__: dart.getFields(categories.AndroidNotificationCategory.__proto__),
    name: dart.finalFieldType(core.String)
  }));
  dart.setStaticFieldSignature(categories.AndroidNotificationCategory, () => ['alarm', 'call', 'email', 'error', 'event', 'locationSharing', 'message', 'missedCall', 'navigation', 'progress', 'promo', 'recommendation', 'reminder', 'service', 'social', 'status', 'stopwatch', 'system', 'transport', 'workout']);
  dart.defineExtensionMethods(categories.AndroidNotificationCategory, ['_equals', 'toString']);
  dart.defineExtensionAccessors(categories.AndroidNotificationCategory, ['hashCode']);
  dart.defineLazy(categories.AndroidNotificationCategory, {
    /*categories.AndroidNotificationCategory.alarm*/get alarm() {
      return C[23] || CT.C23;
    },
    /*categories.AndroidNotificationCategory.call*/get call() {
      return C[24] || CT.C24;
    },
    /*categories.AndroidNotificationCategory.email*/get email() {
      return C[25] || CT.C25;
    },
    /*categories.AndroidNotificationCategory.error*/get error() {
      return C[26] || CT.C26;
    },
    /*categories.AndroidNotificationCategory.event*/get event() {
      return C[27] || CT.C27;
    },
    /*categories.AndroidNotificationCategory.locationSharing*/get locationSharing() {
      return C[28] || CT.C28;
    },
    /*categories.AndroidNotificationCategory.message*/get message() {
      return C[29] || CT.C29;
    },
    /*categories.AndroidNotificationCategory.missedCall*/get missedCall() {
      return C[30] || CT.C30;
    },
    /*categories.AndroidNotificationCategory.navigation*/get navigation() {
      return C[31] || CT.C31;
    },
    /*categories.AndroidNotificationCategory.progress*/get progress() {
      return C[32] || CT.C32;
    },
    /*categories.AndroidNotificationCategory.promo*/get promo() {
      return C[33] || CT.C33;
    },
    /*categories.AndroidNotificationCategory.recommendation*/get recommendation() {
      return C[34] || CT.C34;
    },
    /*categories.AndroidNotificationCategory.reminder*/get reminder() {
      return C[35] || CT.C35;
    },
    /*categories.AndroidNotificationCategory.service*/get service() {
      return C[36] || CT.C36;
    },
    /*categories.AndroidNotificationCategory.social*/get social() {
      return C[37] || CT.C37;
    },
    /*categories.AndroidNotificationCategory.status*/get status() {
      return C[38] || CT.C38;
    },
    /*categories.AndroidNotificationCategory.stopwatch*/get stopwatch() {
      return C[39] || CT.C39;
    },
    /*categories.AndroidNotificationCategory.system*/get system() {
      return C[40] || CT.C40;
    },
    /*categories.AndroidNotificationCategory.transport*/get transport() {
      return C[41] || CT.C41;
    },
    /*categories.AndroidNotificationCategory.workout*/get workout() {
      return C[42] || CT.C42;
    }
  }, false);
  var _name = dart.privateName(core, "_name");
  var _enumToString = dart.privateName(core, "_enumToString");
  enums.AndroidBitmapSource = class AndroidBitmapSource extends core._Enum {
    [_enumToString]() {
      return "AndroidBitmapSource." + this[_name];
    }
  };
  (enums.AndroidBitmapSource.new = function(index, name) {
    enums.AndroidBitmapSource.__proto__.new.call(this, index, name);
    ;
  }).prototype = enums.AndroidBitmapSource.prototype;
  dart.addTypeTests(enums.AndroidBitmapSource);
  dart.addTypeCaches(enums.AndroidBitmapSource);
  dart.setMethodSignature(enums.AndroidBitmapSource, () => ({
    __proto__: dart.getMethods(enums.AndroidBitmapSource.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(enums.AndroidBitmapSource, I[11]);
  dart.setStaticFieldSignature(enums.AndroidBitmapSource, () => ['values', 'drawable', 'filePath', 'byteArray']);
  dart.defineLazy(enums.AndroidBitmapSource, {
    /*enums.AndroidBitmapSource.values*/get values() {
      return C[43] || CT.C43;
    },
    /*enums.AndroidBitmapSource.drawable*/get drawable() {
      return C[44] || CT.C44;
    },
    /*enums.AndroidBitmapSource.filePath*/get filePath() {
      return C[45] || CT.C45;
    },
    /*enums.AndroidBitmapSource.byteArray*/get byteArray() {
      return C[46] || CT.C46;
    }
  }, false);
  enums.AndroidIconSource = class AndroidIconSource extends core._Enum {
    [_enumToString]() {
      return "AndroidIconSource." + this[_name];
    }
  };
  (enums.AndroidIconSource.new = function(index, name) {
    enums.AndroidIconSource.__proto__.new.call(this, index, name);
    ;
  }).prototype = enums.AndroidIconSource.prototype;
  dart.addTypeTests(enums.AndroidIconSource);
  dart.addTypeCaches(enums.AndroidIconSource);
  dart.setMethodSignature(enums.AndroidIconSource, () => ({
    __proto__: dart.getMethods(enums.AndroidIconSource.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(enums.AndroidIconSource, I[11]);
  dart.setStaticFieldSignature(enums.AndroidIconSource, () => ['values', 'drawableResource', 'bitmapFilePath', 'contentUri', 'flutterBitmapAsset', 'byteArray']);
  dart.defineLazy(enums.AndroidIconSource, {
    /*enums.AndroidIconSource.values*/get values() {
      return C[47] || CT.C47;
    },
    /*enums.AndroidIconSource.drawableResource*/get drawableResource() {
      return C[17] || CT.C17;
    },
    /*enums.AndroidIconSource.bitmapFilePath*/get bitmapFilePath() {
      return C[48] || CT.C48;
    },
    /*enums.AndroidIconSource.contentUri*/get contentUri() {
      return C[18] || CT.C18;
    },
    /*enums.AndroidIconSource.flutterBitmapAsset*/get flutterBitmapAsset() {
      return C[49] || CT.C49;
    },
    /*enums.AndroidIconSource.byteArray*/get byteArray() {
      return C[50] || CT.C50;
    }
  }, false);
  enums.AndroidNotificationStyle = class AndroidNotificationStyle extends core._Enum {
    [_enumToString]() {
      return "AndroidNotificationStyle." + this[_name];
    }
  };
  (enums.AndroidNotificationStyle.new = function(index, name) {
    enums.AndroidNotificationStyle.__proto__.new.call(this, index, name);
    ;
  }).prototype = enums.AndroidNotificationStyle.prototype;
  dart.addTypeTests(enums.AndroidNotificationStyle);
  dart.addTypeCaches(enums.AndroidNotificationStyle);
  dart.setMethodSignature(enums.AndroidNotificationStyle, () => ({
    __proto__: dart.getMethods(enums.AndroidNotificationStyle.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(enums.AndroidNotificationStyle, I[11]);
  dart.setStaticFieldSignature(enums.AndroidNotificationStyle, () => ['values', 'defaultStyle', 'bigPicture', 'bigText', 'inbox', 'messaging', 'media']);
  dart.defineLazy(enums.AndroidNotificationStyle, {
    /*enums.AndroidNotificationStyle.values*/get values() {
      return C[51] || CT.C51;
    },
    /*enums.AndroidNotificationStyle.defaultStyle*/get defaultStyle() {
      return C[52] || CT.C52;
    },
    /*enums.AndroidNotificationStyle.bigPicture*/get bigPicture() {
      return C[53] || CT.C53;
    },
    /*enums.AndroidNotificationStyle.bigText*/get bigText() {
      return C[54] || CT.C54;
    },
    /*enums.AndroidNotificationStyle.inbox*/get inbox() {
      return C[55] || CT.C55;
    },
    /*enums.AndroidNotificationStyle.messaging*/get messaging() {
      return C[56] || CT.C56;
    },
    /*enums.AndroidNotificationStyle.media*/get media() {
      return C[57] || CT.C57;
    }
  }, false);
  enums.AndroidNotificationSoundSource = class AndroidNotificationSoundSource extends core._Enum {
    [_enumToString]() {
      return "AndroidNotificationSoundSource." + this[_name];
    }
  };
  (enums.AndroidNotificationSoundSource.new = function(index, name) {
    enums.AndroidNotificationSoundSource.__proto__.new.call(this, index, name);
    ;
  }).prototype = enums.AndroidNotificationSoundSource.prototype;
  dart.addTypeTests(enums.AndroidNotificationSoundSource);
  dart.addTypeCaches(enums.AndroidNotificationSoundSource);
  dart.setMethodSignature(enums.AndroidNotificationSoundSource, () => ({
    __proto__: dart.getMethods(enums.AndroidNotificationSoundSource.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(enums.AndroidNotificationSoundSource, I[11]);
  dart.setStaticFieldSignature(enums.AndroidNotificationSoundSource, () => ['values', 'rawResource', 'uri']);
  dart.defineLazy(enums.AndroidNotificationSoundSource, {
    /*enums.AndroidNotificationSoundSource.values*/get values() {
      return C[58] || CT.C58;
    },
    /*enums.AndroidNotificationSoundSource.rawResource*/get rawResource() {
      return C[59] || CT.C59;
    },
    /*enums.AndroidNotificationSoundSource.uri*/get uri() {
      return C[60] || CT.C60;
    }
  }, false);
  enums.AndroidNotificationChannelAction = class AndroidNotificationChannelAction extends core._Enum {
    [_enumToString]() {
      return "AndroidNotificationChannelAction." + this[_name];
    }
  };
  (enums.AndroidNotificationChannelAction.new = function(index, name) {
    enums.AndroidNotificationChannelAction.__proto__.new.call(this, index, name);
    ;
  }).prototype = enums.AndroidNotificationChannelAction.prototype;
  dart.addTypeTests(enums.AndroidNotificationChannelAction);
  dart.addTypeCaches(enums.AndroidNotificationChannelAction);
  dart.setMethodSignature(enums.AndroidNotificationChannelAction, () => ({
    __proto__: dart.getMethods(enums.AndroidNotificationChannelAction.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(enums.AndroidNotificationChannelAction, I[11]);
  dart.setStaticFieldSignature(enums.AndroidNotificationChannelAction, () => ['values', 'createIfNotExists', 'update']);
  dart.defineLazy(enums.AndroidNotificationChannelAction, {
    /*enums.AndroidNotificationChannelAction.values*/get values() {
      return C[61] || CT.C61;
    },
    /*enums.AndroidNotificationChannelAction.createIfNotExists*/get createIfNotExists() {
      return C[62] || CT.C62;
    },
    /*enums.AndroidNotificationChannelAction.update*/get update() {
      return C[63] || CT.C63;
    }
  }, false);
  var value$ = dart.privateName(enums, "AndroidServiceForegroundType.value");
  enums.AndroidServiceForegroundType = class AndroidServiceForegroundType extends core.Object {
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
    static ['_#new#tearOff'](value) {
      return new enums.AndroidServiceForegroundType.new(value);
    }
    get hashCode() {
      return this.value;
    }
    _equals(other) {
      if (other == null) return false;
      return enums.AndroidServiceForegroundType.is(other) && other.value === this.value;
    }
  };
  (enums.AndroidServiceForegroundType.new = function(value) {
    this[value$] = value;
    ;
  }).prototype = enums.AndroidServiceForegroundType.prototype;
  dart.addTypeTests(enums.AndroidServiceForegroundType);
  dart.addTypeCaches(enums.AndroidServiceForegroundType);
  dart.setLibraryUri(enums.AndroidServiceForegroundType, I[11]);
  dart.setFieldSignature(enums.AndroidServiceForegroundType, () => ({
    __proto__: dart.getFields(enums.AndroidServiceForegroundType.__proto__),
    value: dart.finalFieldType(core.int)
  }));
  dart.setStaticFieldSignature(enums.AndroidServiceForegroundType, () => ['foregroundServiceTypeManifest', 'foregroundServiceTypeNone', 'foregroundServiceTypeDataSync', 'foregroundServiceTypeMediaPlayback', 'foregroundServiceTypePhoneCall', 'foregroundServiceTypeLocation', 'foregroundServiceTypeConnectedDevice', 'foregroundServiceTypeMediaProjection', 'foregroundServiceTypeCamera', 'foregroundServiceTypeMicrophone']);
  dart.defineExtensionMethods(enums.AndroidServiceForegroundType, ['_equals']);
  dart.defineExtensionAccessors(enums.AndroidServiceForegroundType, ['hashCode']);
  dart.defineLazy(enums.AndroidServiceForegroundType, {
    /*enums.AndroidServiceForegroundType.foregroundServiceTypeManifest*/get foregroundServiceTypeManifest() {
      return C[64] || CT.C64;
    },
    /*enums.AndroidServiceForegroundType.foregroundServiceTypeNone*/get foregroundServiceTypeNone() {
      return C[65] || CT.C65;
    },
    /*enums.AndroidServiceForegroundType.foregroundServiceTypeDataSync*/get foregroundServiceTypeDataSync() {
      return C[66] || CT.C66;
    },
    /*enums.AndroidServiceForegroundType.foregroundServiceTypeMediaPlayback*/get foregroundServiceTypeMediaPlayback() {
      return C[67] || CT.C67;
    },
    /*enums.AndroidServiceForegroundType.foregroundServiceTypePhoneCall*/get foregroundServiceTypePhoneCall() {
      return C[68] || CT.C68;
    },
    /*enums.AndroidServiceForegroundType.foregroundServiceTypeLocation*/get foregroundServiceTypeLocation() {
      return C[69] || CT.C69;
    },
    /*enums.AndroidServiceForegroundType.foregroundServiceTypeConnectedDevice*/get foregroundServiceTypeConnectedDevice() {
      return C[70] || CT.C70;
    },
    /*enums.AndroidServiceForegroundType.foregroundServiceTypeMediaProjection*/get foregroundServiceTypeMediaProjection() {
      return C[71] || CT.C71;
    },
    /*enums.AndroidServiceForegroundType.foregroundServiceTypeCamera*/get foregroundServiceTypeCamera() {
      return C[72] || CT.C72;
    },
    /*enums.AndroidServiceForegroundType.foregroundServiceTypeMicrophone*/get foregroundServiceTypeMicrophone() {
      return C[73] || CT.C73;
    }
  }, false);
  const value$0 = AndroidServiceStartType_value;
  enums.AndroidServiceStartType = class AndroidServiceStartType extends core.Object {
    get value() {
      return this[value$0];
    }
    set value(value) {
      super.value = value;
    }
    static ['_#new#tearOff'](value) {
      return new enums.AndroidServiceStartType.new(value);
    }
    get hashCode() {
      return this.value;
    }
    _equals(other) {
      if (other == null) return false;
      return enums.AndroidServiceStartType.is(other) && other.value === this.value;
    }
  };
  (enums.AndroidServiceStartType.new = function(value) {
    this[value$0] = value;
    ;
  }).prototype = enums.AndroidServiceStartType.prototype;
  dart.addTypeTests(enums.AndroidServiceStartType);
  dart.addTypeCaches(enums.AndroidServiceStartType);
  dart.setLibraryUri(enums.AndroidServiceStartType, I[11]);
  dart.setFieldSignature(enums.AndroidServiceStartType, () => ({
    __proto__: dart.getFields(enums.AndroidServiceStartType.__proto__),
    value: dart.finalFieldType(core.int)
  }));
  dart.setStaticFieldSignature(enums.AndroidServiceStartType, () => ['startStickyCompatibility', 'startSticky', 'startNotSticky', 'startRedeliverIntent']);
  dart.defineExtensionMethods(enums.AndroidServiceStartType, ['_equals']);
  dart.defineExtensionAccessors(enums.AndroidServiceStartType, ['hashCode']);
  dart.defineLazy(enums.AndroidServiceStartType, {
    /*enums.AndroidServiceStartType.startStickyCompatibility*/get startStickyCompatibility() {
      return C[74] || CT.C74;
    },
    /*enums.AndroidServiceStartType.startSticky*/get startSticky() {
      return C[16] || CT.C16;
    },
    /*enums.AndroidServiceStartType.startNotSticky*/get startNotSticky() {
      return C[75] || CT.C75;
    },
    /*enums.AndroidServiceStartType.startRedeliverIntent*/get startRedeliverIntent() {
      return C[76] || CT.C76;
    }
  }, false);
  var value$1 = dart.privateName(enums, "Importance.value");
  enums.Importance = class Importance extends core.Object {
    get value() {
      return this[value$1];
    }
    set value(value) {
      super.value = value;
    }
    static ['_#new#tearOff'](value) {
      return new enums.Importance.new(value);
    }
    static get values() {
      return T.JSArrayOfImportance().of([enums.Importance.unspecified, enums.Importance.none, enums.Importance.min, enums.Importance.low, enums.Importance.defaultImportance, enums.Importance.high, enums.Importance.max]);
    }
    get hashCode() {
      return this.value;
    }
    _equals(other) {
      if (other == null) return false;
      return enums.Importance.is(other) && other.value === this.value;
    }
  };
  (enums.Importance.new = function(value) {
    this[value$1] = value;
    ;
  }).prototype = enums.Importance.prototype;
  dart.addTypeTests(enums.Importance);
  dart.addTypeCaches(enums.Importance);
  dart.setStaticGetterSignature(enums.Importance, () => ['values']);
  dart.setLibraryUri(enums.Importance, I[11]);
  dart.setFieldSignature(enums.Importance, () => ({
    __proto__: dart.getFields(enums.Importance.__proto__),
    value: dart.finalFieldType(core.int)
  }));
  dart.setStaticFieldSignature(enums.Importance, () => ['unspecified', 'none', 'min', 'low', 'defaultImportance', 'high', 'max']);
  dart.defineExtensionMethods(enums.Importance, ['_equals']);
  dart.defineExtensionAccessors(enums.Importance, ['hashCode']);
  dart.defineLazy(enums.Importance, {
    /*enums.Importance.unspecified*/get unspecified() {
      return C[77] || CT.C77;
    },
    /*enums.Importance.none*/get none() {
      return C[78] || CT.C78;
    },
    /*enums.Importance.min*/get min() {
      return C[79] || CT.C79;
    },
    /*enums.Importance.low*/get low() {
      return C[80] || CT.C80;
    },
    /*enums.Importance.defaultImportance*/get defaultImportance() {
      return C[81] || CT.C81;
    },
    /*enums.Importance.high*/get high() {
      return C[82] || CT.C82;
    },
    /*enums.Importance.max*/get max() {
      return C[83] || CT.C83;
    }
  }, false);
  var value$2 = dart.privateName(enums, "Priority.value");
  enums.Priority = class Priority extends core.Object {
    get value() {
      return this[value$2];
    }
    set value(value) {
      super.value = value;
    }
    static ['_#new#tearOff'](value) {
      return new enums.Priority.new(value);
    }
    static get values() {
      return T.JSArrayOfPriority().of([enums.Priority.min, enums.Priority.low, enums.Priority.defaultPriority, enums.Priority.high, enums.Priority.max]);
    }
    get hashCode() {
      return this.value;
    }
    _equals(other) {
      if (other == null) return false;
      return enums.Priority.is(other) && other.value === this.value;
    }
  };
  (enums.Priority.new = function(value) {
    this[value$2] = value;
    ;
  }).prototype = enums.Priority.prototype;
  dart.addTypeTests(enums.Priority);
  dart.addTypeCaches(enums.Priority);
  dart.setStaticGetterSignature(enums.Priority, () => ['values']);
  dart.setLibraryUri(enums.Priority, I[11]);
  dart.setFieldSignature(enums.Priority, () => ({
    __proto__: dart.getFields(enums.Priority.__proto__),
    value: dart.finalFieldType(core.int)
  }));
  dart.setStaticFieldSignature(enums.Priority, () => ['min', 'low', 'defaultPriority', 'high', 'max']);
  dart.defineExtensionMethods(enums.Priority, ['_equals']);
  dart.defineExtensionAccessors(enums.Priority, ['hashCode']);
  dart.defineLazy(enums.Priority, {
    /*enums.Priority.min*/get min() {
      return C[84] || CT.C84;
    },
    /*enums.Priority.low*/get low() {
      return C[85] || CT.C85;
    },
    /*enums.Priority.defaultPriority*/get defaultPriority() {
      return C[86] || CT.C86;
    },
    /*enums.Priority.high*/get high() {
      return C[87] || CT.C87;
    },
    /*enums.Priority.max*/get max() {
      return C[88] || CT.C88;
    }
  }, false);
  enums.GroupAlertBehavior = class GroupAlertBehavior extends core._Enum {
    [_enumToString]() {
      return "GroupAlertBehavior." + this[_name];
    }
  };
  (enums.GroupAlertBehavior.new = function(index, name) {
    enums.GroupAlertBehavior.__proto__.new.call(this, index, name);
    ;
  }).prototype = enums.GroupAlertBehavior.prototype;
  dart.addTypeTests(enums.GroupAlertBehavior);
  dart.addTypeCaches(enums.GroupAlertBehavior);
  dart.setMethodSignature(enums.GroupAlertBehavior, () => ({
    __proto__: dart.getMethods(enums.GroupAlertBehavior.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(enums.GroupAlertBehavior, I[11]);
  dart.setStaticFieldSignature(enums.GroupAlertBehavior, () => ['values', 'all', 'summary', 'children']);
  dart.defineLazy(enums.GroupAlertBehavior, {
    /*enums.GroupAlertBehavior.values*/get values() {
      return C[89] || CT.C89;
    },
    /*enums.GroupAlertBehavior.all*/get all() {
      return C[90] || CT.C90;
    },
    /*enums.GroupAlertBehavior.summary*/get summary() {
      return C[91] || CT.C91;
    },
    /*enums.GroupAlertBehavior.children*/get children() {
      return C[92] || CT.C92;
    }
  }, false);
  enums.NotificationVisibility = class NotificationVisibility extends core._Enum {
    [_enumToString]() {
      return "NotificationVisibility." + this[_name];
    }
  };
  (enums.NotificationVisibility.new = function(index, name) {
    enums.NotificationVisibility.__proto__.new.call(this, index, name);
    ;
  }).prototype = enums.NotificationVisibility.prototype;
  dart.addTypeTests(enums.NotificationVisibility);
  dart.addTypeCaches(enums.NotificationVisibility);
  dart.setMethodSignature(enums.NotificationVisibility, () => ({
    __proto__: dart.getMethods(enums.NotificationVisibility.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(enums.NotificationVisibility, I[11]);
  dart.setStaticFieldSignature(enums.NotificationVisibility, () => ['values', 'private', 'public', 'secret']);
  dart.defineLazy(enums.NotificationVisibility, {
    /*enums.NotificationVisibility.values*/get values() {
      return C[93] || CT.C93;
    },
    /*enums.NotificationVisibility.private*/get private() {
      return C[94] || CT.C94;
    },
    /*enums.NotificationVisibility.public*/get public() {
      return C[95] || CT.C95;
    },
    /*enums.NotificationVisibility.secret*/get secret() {
      return C[96] || CT.C96;
    }
  }, false);
  var value$3 = dart.privateName(enums, "AudioAttributesUsage.value");
  enums.AudioAttributesUsage = class AudioAttributesUsage extends core.Object {
    get value() {
      return this[value$3];
    }
    set value(value) {
      super.value = value;
    }
    static ['_#_#tearOff'](value) {
      return new enums.AudioAttributesUsage.__(value);
    }
    static get values() {
      return T.JSArrayOfAudioAttributesUsage().of([enums.AudioAttributesUsage.alarm, enums.AudioAttributesUsage.assistanceAccessibility, enums.AudioAttributesUsage.assistanceNavigationGuidance, enums.AudioAttributesUsage.assistanceSonification, enums.AudioAttributesUsage.assistant, enums.AudioAttributesUsage.game, enums.AudioAttributesUsage.media, enums.AudioAttributesUsage.notification, enums.AudioAttributesUsage.notificationEvent, enums.AudioAttributesUsage.notificationRingtone, enums.AudioAttributesUsage.unknown, enums.AudioAttributesUsage.voiceCommunication, enums.AudioAttributesUsage.voiceCommunicationSignalling]);
    }
    get hashCode() {
      return this.value;
    }
    _equals(other) {
      if (other == null) return false;
      return enums.AudioAttributesUsage.is(other) && other.value === this.value;
    }
  };
  (enums.AudioAttributesUsage.__ = function(value) {
    this[value$3] = value;
    ;
  }).prototype = enums.AudioAttributesUsage.prototype;
  dart.addTypeTests(enums.AudioAttributesUsage);
  dart.addTypeCaches(enums.AudioAttributesUsage);
  dart.setStaticGetterSignature(enums.AudioAttributesUsage, () => ['values']);
  dart.setLibraryUri(enums.AudioAttributesUsage, I[11]);
  dart.setFieldSignature(enums.AudioAttributesUsage, () => ({
    __proto__: dart.getFields(enums.AudioAttributesUsage.__proto__),
    value: dart.finalFieldType(core.int)
  }));
  dart.setStaticFieldSignature(enums.AudioAttributesUsage, () => ['alarm', 'assistanceAccessibility', 'assistanceNavigationGuidance', 'assistanceSonification', 'assistant', 'game', 'media', 'notification', 'notificationEvent', 'notificationRingtone', 'unknown', 'voiceCommunication', 'voiceCommunicationSignalling']);
  dart.defineExtensionMethods(enums.AudioAttributesUsage, ['_equals']);
  dart.defineExtensionAccessors(enums.AudioAttributesUsage, ['hashCode']);
  dart.defineLazy(enums.AudioAttributesUsage, {
    /*enums.AudioAttributesUsage.alarm*/get alarm() {
      return C[97] || CT.C97;
    },
    /*enums.AudioAttributesUsage.assistanceAccessibility*/get assistanceAccessibility() {
      return C[98] || CT.C98;
    },
    /*enums.AudioAttributesUsage.assistanceNavigationGuidance*/get assistanceNavigationGuidance() {
      return C[99] || CT.C99;
    },
    /*enums.AudioAttributesUsage.assistanceSonification*/get assistanceSonification() {
      return C[100] || CT.C100;
    },
    /*enums.AudioAttributesUsage.assistant*/get assistant() {
      return C[101] || CT.C101;
    },
    /*enums.AudioAttributesUsage.game*/get game() {
      return C[102] || CT.C102;
    },
    /*enums.AudioAttributesUsage.media*/get media() {
      return C[103] || CT.C103;
    },
    /*enums.AudioAttributesUsage.notification*/get notification() {
      return C[104] || CT.C104;
    },
    /*enums.AudioAttributesUsage.notificationEvent*/get notificationEvent() {
      return C[105] || CT.C105;
    },
    /*enums.AudioAttributesUsage.notificationRingtone*/get notificationRingtone() {
      return C[106] || CT.C106;
    },
    /*enums.AudioAttributesUsage.unknown*/get unknown() {
      return C[107] || CT.C107;
    },
    /*enums.AudioAttributesUsage.voiceCommunication*/get voiceCommunication() {
      return C[108] || CT.C108;
    },
    /*enums.AudioAttributesUsage.voiceCommunicationSignalling*/get voiceCommunicationSignalling() {
      return C[109] || CT.C109;
    }
  }, false);
  const _is_AndroidIcon_default = Symbol('_is_AndroidIcon_default');
  icon.AndroidIcon$ = dart.generic(T => {
    class AndroidIcon extends core.Object {}
    (AndroidIcon.new = function() {
      ;
    }).prototype = AndroidIcon.prototype;
    dart.addTypeTests(AndroidIcon);
    AndroidIcon.prototype[_is_AndroidIcon_default] = true;
    dart.addTypeCaches(AndroidIcon);
    dart.setLibraryUri(AndroidIcon, I[12]);
    return AndroidIcon;
  });
  icon.AndroidIcon = icon.AndroidIcon$();
  dart.addTypeTests(icon.AndroidIcon, _is_AndroidIcon_default);
  var _icon$ = dart.privateName(icon, "DrawableResourceAndroidIcon._icon");
  var _icon = dart.privateName(icon, "_icon");
  icon.DrawableResourceAndroidIcon = class DrawableResourceAndroidIcon extends core.Object {
    get [_icon]() {
      return this[_icon$];
    }
    set [_icon](value) {
      super[_icon] = value;
    }
    static ['_#new#tearOff'](_icon) {
      return new icon.DrawableResourceAndroidIcon.new(_icon);
    }
    get data() {
      return this[_icon];
    }
    get source() {
      return enums.AndroidIconSource.drawableResource;
    }
  };
  (icon.DrawableResourceAndroidIcon.new = function(_icon) {
    this[_icon$] = _icon;
    ;
  }).prototype = icon.DrawableResourceAndroidIcon.prototype;
  dart.addTypeTests(icon.DrawableResourceAndroidIcon);
  dart.addTypeCaches(icon.DrawableResourceAndroidIcon);
  icon.DrawableResourceAndroidIcon[dart.implements] = () => [icon.AndroidIcon$(core.String)];
  dart.setGetterSignature(icon.DrawableResourceAndroidIcon, () => ({
    __proto__: dart.getGetters(icon.DrawableResourceAndroidIcon.__proto__),
    data: core.String,
    source: enums.AndroidIconSource
  }));
  dart.setLibraryUri(icon.DrawableResourceAndroidIcon, I[12]);
  dart.setFieldSignature(icon.DrawableResourceAndroidIcon, () => ({
    __proto__: dart.getFields(icon.DrawableResourceAndroidIcon.__proto__),
    [_icon]: dart.finalFieldType(core.String)
  }));
  var _icon$0 = dart.privateName(icon, "BitmapFilePathAndroidIcon._icon");
  icon.BitmapFilePathAndroidIcon = class BitmapFilePathAndroidIcon extends core.Object {
    get [_icon]() {
      return this[_icon$0];
    }
    set [_icon](value) {
      super[_icon] = value;
    }
    static ['_#new#tearOff'](_icon) {
      return new icon.BitmapFilePathAndroidIcon.new(_icon);
    }
    get data() {
      return this[_icon];
    }
    get source() {
      return enums.AndroidIconSource.bitmapFilePath;
    }
  };
  (icon.BitmapFilePathAndroidIcon.new = function(_icon) {
    this[_icon$0] = _icon;
    ;
  }).prototype = icon.BitmapFilePathAndroidIcon.prototype;
  dart.addTypeTests(icon.BitmapFilePathAndroidIcon);
  dart.addTypeCaches(icon.BitmapFilePathAndroidIcon);
  icon.BitmapFilePathAndroidIcon[dart.implements] = () => [icon.AndroidIcon$(core.String)];
  dart.setGetterSignature(icon.BitmapFilePathAndroidIcon, () => ({
    __proto__: dart.getGetters(icon.BitmapFilePathAndroidIcon.__proto__),
    data: core.String,
    source: enums.AndroidIconSource
  }));
  dart.setLibraryUri(icon.BitmapFilePathAndroidIcon, I[12]);
  dart.setFieldSignature(icon.BitmapFilePathAndroidIcon, () => ({
    __proto__: dart.getFields(icon.BitmapFilePathAndroidIcon.__proto__),
    [_icon]: dart.finalFieldType(core.String)
  }));
  var _icon$1 = dart.privateName(icon, "ContentUriAndroidIcon._icon");
  icon.ContentUriAndroidIcon = class ContentUriAndroidIcon extends core.Object {
    get [_icon]() {
      return this[_icon$1];
    }
    set [_icon](value) {
      super[_icon] = value;
    }
    static ['_#new#tearOff'](_icon) {
      return new icon.ContentUriAndroidIcon.new(_icon);
    }
    get data() {
      return this[_icon];
    }
    get source() {
      return enums.AndroidIconSource.contentUri;
    }
  };
  (icon.ContentUriAndroidIcon.new = function(_icon) {
    this[_icon$1] = _icon;
    ;
  }).prototype = icon.ContentUriAndroidIcon.prototype;
  dart.addTypeTests(icon.ContentUriAndroidIcon);
  dart.addTypeCaches(icon.ContentUriAndroidIcon);
  icon.ContentUriAndroidIcon[dart.implements] = () => [icon.AndroidIcon$(core.String)];
  dart.setGetterSignature(icon.ContentUriAndroidIcon, () => ({
    __proto__: dart.getGetters(icon.ContentUriAndroidIcon.__proto__),
    data: core.String,
    source: enums.AndroidIconSource
  }));
  dart.setLibraryUri(icon.ContentUriAndroidIcon, I[12]);
  dart.setFieldSignature(icon.ContentUriAndroidIcon, () => ({
    __proto__: dart.getFields(icon.ContentUriAndroidIcon.__proto__),
    [_icon]: dart.finalFieldType(core.String)
  }));
  var _icon$2 = dart.privateName(icon, "FlutterBitmapAssetAndroidIcon._icon");
  icon.FlutterBitmapAssetAndroidIcon = class FlutterBitmapAssetAndroidIcon extends core.Object {
    get [_icon]() {
      return this[_icon$2];
    }
    set [_icon](value) {
      super[_icon] = value;
    }
    static ['_#new#tearOff'](_icon) {
      return new icon.FlutterBitmapAssetAndroidIcon.new(_icon);
    }
    get data() {
      return this[_icon];
    }
    get source() {
      return enums.AndroidIconSource.flutterBitmapAsset;
    }
  };
  (icon.FlutterBitmapAssetAndroidIcon.new = function(_icon) {
    this[_icon$2] = _icon;
    ;
  }).prototype = icon.FlutterBitmapAssetAndroidIcon.prototype;
  dart.addTypeTests(icon.FlutterBitmapAssetAndroidIcon);
  dart.addTypeCaches(icon.FlutterBitmapAssetAndroidIcon);
  icon.FlutterBitmapAssetAndroidIcon[dart.implements] = () => [icon.AndroidIcon$(core.String)];
  dart.setGetterSignature(icon.FlutterBitmapAssetAndroidIcon, () => ({
    __proto__: dart.getGetters(icon.FlutterBitmapAssetAndroidIcon.__proto__),
    data: core.String,
    source: enums.AndroidIconSource
  }));
  dart.setLibraryUri(icon.FlutterBitmapAssetAndroidIcon, I[12]);
  dart.setFieldSignature(icon.FlutterBitmapAssetAndroidIcon, () => ({
    __proto__: dart.getFields(icon.FlutterBitmapAssetAndroidIcon.__proto__),
    [_icon]: dart.finalFieldType(core.String)
  }));
  var _icon$3 = dart.privateName(icon, "ByteArrayAndroidIcon._icon");
  icon.ByteArrayAndroidIcon = class ByteArrayAndroidIcon extends core.Object {
    get [_icon]() {
      return this[_icon$3];
    }
    set [_icon](value) {
      super[_icon] = value;
    }
    static ['_#new#tearOff'](_icon) {
      return new icon.ByteArrayAndroidIcon.new(_icon);
    }
    static fromBase64String(base64Image) {
      return new icon.ByteArrayAndroidIcon.new(convert.base64Decode(base64Image));
    }
    static ['_#fromBase64String#tearOff'](base64Image) {
      return icon.ByteArrayAndroidIcon.fromBase64String(base64Image);
    }
    get data() {
      return this[_icon];
    }
    get source() {
      return enums.AndroidIconSource.byteArray;
    }
  };
  (icon.ByteArrayAndroidIcon.new = function(_icon) {
    this[_icon$3] = _icon;
    ;
  }).prototype = icon.ByteArrayAndroidIcon.prototype;
  dart.addTypeTests(icon.ByteArrayAndroidIcon);
  dart.addTypeCaches(icon.ByteArrayAndroidIcon);
  icon.ByteArrayAndroidIcon[dart.implements] = () => [icon.AndroidIcon$(typed_data.Uint8List)];
  dart.setStaticMethodSignature(icon.ByteArrayAndroidIcon, () => ['fromBase64String']);
  dart.setGetterSignature(icon.ByteArrayAndroidIcon, () => ({
    __proto__: dart.getGetters(icon.ByteArrayAndroidIcon.__proto__),
    data: typed_data.Uint8List,
    source: enums.AndroidIconSource
  }));
  dart.setLibraryUri(icon.ByteArrayAndroidIcon, I[12]);
  dart.setFieldSignature(icon.ByteArrayAndroidIcon, () => ({
    __proto__: dart.getFields(icon.ByteArrayAndroidIcon.__proto__),
    [_icon]: dart.finalFieldType(typed_data.Uint8List)
  }));
  const defaultIcon$ = AndroidInitializationSettings_defaultIcon;
  initialization_settings$.AndroidInitializationSettings = class AndroidInitializationSettings extends core.Object {
    get defaultIcon() {
      return this[defaultIcon$];
    }
    set defaultIcon(value) {
      super.defaultIcon = value;
    }
    static ['_#new#tearOff'](defaultIcon) {
      return new initialization_settings$.AndroidInitializationSettings.new(defaultIcon);
    }
  };
  (initialization_settings$.AndroidInitializationSettings.new = function(defaultIcon) {
    this[defaultIcon$] = defaultIcon;
    ;
  }).prototype = initialization_settings$.AndroidInitializationSettings.prototype;
  dart.addTypeTests(initialization_settings$.AndroidInitializationSettings);
  dart.addTypeCaches(initialization_settings$.AndroidInitializationSettings);
  dart.setLibraryUri(initialization_settings$.AndroidInitializationSettings, I[13]);
  dart.setFieldSignature(initialization_settings$.AndroidInitializationSettings, () => ({
    __proto__: dart.getFields(initialization_settings$.AndroidInitializationSettings.__proto__),
    defaultIcon: dart.finalFieldType(core.String)
  }));
  var text$ = dart.privateName(message, "Message.text");
  var timestamp$ = dart.privateName(message, "Message.timestamp");
  var person$ = dart.privateName(message, "Message.person");
  var dataMimeType$ = dart.privateName(message, "Message.dataMimeType");
  var dataUri$ = dart.privateName(message, "Message.dataUri");
  message.Message = class Message extends core.Object {
    get text() {
      return this[text$];
    }
    set text(value) {
      super.text = value;
    }
    get timestamp() {
      return this[timestamp$];
    }
    set timestamp(value) {
      super.timestamp = value;
    }
    get person() {
      return this[person$];
    }
    set person(value) {
      super.person = value;
    }
    get dataMimeType() {
      return this[dataMimeType$];
    }
    set dataMimeType(value) {
      super.dataMimeType = value;
    }
    get dataUri() {
      return this[dataUri$];
    }
    set dataUri(value) {
      super.dataUri = value;
    }
    static ['_#new#tearOff'](text, timestamp, person, opts) {
      let dataMimeType = opts && 'dataMimeType' in opts ? opts.dataMimeType : null;
      let dataUri = opts && 'dataUri' in opts ? opts.dataUri : null;
      return new message.Message.new(text, timestamp, person, {dataMimeType: dataMimeType, dataUri: dataUri});
    }
  };
  (message.Message.new = function(text, timestamp, person, opts) {
    let dataMimeType = opts && 'dataMimeType' in opts ? opts.dataMimeType : null;
    let dataUri = opts && 'dataUri' in opts ? opts.dataUri : null;
    this[text$] = text;
    this[timestamp$] = timestamp;
    this[person$] = person;
    this[dataMimeType$] = dataMimeType;
    this[dataUri$] = dataUri;
    if (!(dataMimeType == null && dataUri == null || dataMimeType != null && dataUri != null)) dart.assertFailed("Must provide both dataMimeType and dataUri together or not at all.", I[14], 13, 11, "(dataMimeType == null && dataUri == null) ||\n              (dataMimeType != null && dataUri != null)");
    ;
  }).prototype = message.Message.prototype;
  dart.addTypeTests(message.Message);
  dart.addTypeCaches(message.Message);
  dart.setLibraryUri(message.Message, I[15]);
  dart.setFieldSignature(message.Message, () => ({
    __proto__: dart.getFields(message.Message.__proto__),
    text: dart.finalFieldType(core.String),
    timestamp: dart.finalFieldType(core.DateTime),
    person: dart.finalFieldType(dart.nullable(person.Person)),
    dataMimeType: dart.finalFieldType(dart.nullable(core.String)),
    dataUri: dart.finalFieldType(dart.nullable(core.String))
  }));
  var id$ = dart.privateName(notification_channel, "AndroidNotificationChannel.id");
  var name$0 = dart.privateName(notification_channel, "AndroidNotificationChannel.name");
  var description$ = dart.privateName(notification_channel, "AndroidNotificationChannel.description");
  var groupId$ = dart.privateName(notification_channel, "AndroidNotificationChannel.groupId");
  var importance$ = dart.privateName(notification_channel, "AndroidNotificationChannel.importance");
  var playSound$ = dart.privateName(notification_channel, "AndroidNotificationChannel.playSound");
  var sound$ = dart.privateName(notification_channel, "AndroidNotificationChannel.sound");
  var enableVibration$ = dart.privateName(notification_channel, "AndroidNotificationChannel.enableVibration");
  var enableLights$ = dart.privateName(notification_channel, "AndroidNotificationChannel.enableLights");
  var vibrationPattern$ = dart.privateName(notification_channel, "AndroidNotificationChannel.vibrationPattern");
  var ledColor$ = dart.privateName(notification_channel, "AndroidNotificationChannel.ledColor");
  var showBadge$ = dart.privateName(notification_channel, "AndroidNotificationChannel.showBadge");
  notification_channel.AndroidNotificationChannel = class AndroidNotificationChannel extends core.Object {
    get id() {
      return this[id$];
    }
    set id(value) {
      super.id = value;
    }
    get name() {
      return this[name$0];
    }
    set name(value) {
      super.name = value;
    }
    get description() {
      return this[description$];
    }
    set description(value) {
      super.description = value;
    }
    get groupId() {
      return this[groupId$];
    }
    set groupId(value) {
      super.groupId = value;
    }
    get importance() {
      return this[importance$];
    }
    set importance(value) {
      super.importance = value;
    }
    get playSound() {
      return this[playSound$];
    }
    set playSound(value) {
      super.playSound = value;
    }
    get sound() {
      return this[sound$];
    }
    set sound(value) {
      super.sound = value;
    }
    get enableVibration() {
      return this[enableVibration$];
    }
    set enableVibration(value) {
      super.enableVibration = value;
    }
    get enableLights() {
      return this[enableLights$];
    }
    set enableLights(value) {
      super.enableLights = value;
    }
    get vibrationPattern() {
      return this[vibrationPattern$];
    }
    set vibrationPattern(value) {
      super.vibrationPattern = value;
    }
    get ledColor() {
      return this[ledColor$];
    }
    set ledColor(value) {
      super.ledColor = value;
    }
    get showBadge() {
      return this[showBadge$];
    }
    set showBadge(value) {
      super.showBadge = value;
    }
    static ['_#new#tearOff'](id, name, opts) {
      let description = opts && 'description' in opts ? opts.description : null;
      let groupId = opts && 'groupId' in opts ? opts.groupId : null;
      let importance = opts && 'importance' in opts ? opts.importance : C[81] || CT.C81;
      let playSound = opts && 'playSound' in opts ? opts.playSound : true;
      let sound = opts && 'sound' in opts ? opts.sound : null;
      let enableVibration = opts && 'enableVibration' in opts ? opts.enableVibration : true;
      let vibrationPattern = opts && 'vibrationPattern' in opts ? opts.vibrationPattern : null;
      let showBadge = opts && 'showBadge' in opts ? opts.showBadge : true;
      let enableLights = opts && 'enableLights' in opts ? opts.enableLights : false;
      let ledColor = opts && 'ledColor' in opts ? opts.ledColor : null;
      return new notification_channel.AndroidNotificationChannel.new(id, name, {description: description, groupId: groupId, importance: importance, playSound: playSound, sound: sound, enableVibration: enableVibration, vibrationPattern: vibrationPattern, showBadge: showBadge, enableLights: enableLights, ledColor: ledColor});
    }
  };
  (notification_channel.AndroidNotificationChannel.new = function(id, name, opts) {
    let description = opts && 'description' in opts ? opts.description : null;
    let groupId = opts && 'groupId' in opts ? opts.groupId : null;
    let importance = opts && 'importance' in opts ? opts.importance : C[81] || CT.C81;
    let playSound = opts && 'playSound' in opts ? opts.playSound : true;
    let sound = opts && 'sound' in opts ? opts.sound : null;
    let enableVibration = opts && 'enableVibration' in opts ? opts.enableVibration : true;
    let vibrationPattern = opts && 'vibrationPattern' in opts ? opts.vibrationPattern : null;
    let showBadge = opts && 'showBadge' in opts ? opts.showBadge : true;
    let enableLights = opts && 'enableLights' in opts ? opts.enableLights : false;
    let ledColor = opts && 'ledColor' in opts ? opts.ledColor : null;
    this[id$] = id;
    this[name$0] = name;
    this[description$] = description;
    this[groupId$] = groupId;
    this[importance$] = importance;
    this[playSound$] = playSound;
    this[sound$] = sound;
    this[enableVibration$] = enableVibration;
    this[vibrationPattern$] = vibrationPattern;
    this[showBadge$] = showBadge;
    this[enableLights$] = enableLights;
    this[ledColor$] = ledColor;
    ;
  }).prototype = notification_channel.AndroidNotificationChannel.prototype;
  dart.addTypeTests(notification_channel.AndroidNotificationChannel);
  dart.addTypeCaches(notification_channel.AndroidNotificationChannel);
  dart.setLibraryUri(notification_channel.AndroidNotificationChannel, I[16]);
  dart.setFieldSignature(notification_channel.AndroidNotificationChannel, () => ({
    __proto__: dart.getFields(notification_channel.AndroidNotificationChannel.__proto__),
    id: dart.finalFieldType(core.String),
    name: dart.finalFieldType(core.String),
    description: dart.finalFieldType(dart.nullable(core.String)),
    groupId: dart.finalFieldType(dart.nullable(core.String)),
    importance: dart.finalFieldType(enums.Importance),
    playSound: dart.finalFieldType(core.bool),
    sound: dart.finalFieldType(dart.nullable(notification_sound.AndroidNotificationSound)),
    enableVibration: dart.finalFieldType(core.bool),
    enableLights: dart.finalFieldType(core.bool),
    vibrationPattern: dart.finalFieldType(dart.nullable(typed_data.Int64List)),
    ledColor: dart.finalFieldType(dart.nullable(ui.Color)),
    showBadge: dart.finalFieldType(core.bool)
  }));
  var id$0 = dart.privateName(notification_channel_group, "AndroidNotificationChannelGroup.id");
  var name$1 = dart.privateName(notification_channel_group, "AndroidNotificationChannelGroup.name");
  var description$0 = dart.privateName(notification_channel_group, "AndroidNotificationChannelGroup.description");
  notification_channel_group.AndroidNotificationChannelGroup = class AndroidNotificationChannelGroup extends core.Object {
    get id() {
      return this[id$0];
    }
    set id(value) {
      super.id = value;
    }
    get name() {
      return this[name$1];
    }
    set name(value) {
      super.name = value;
    }
    get description() {
      return this[description$0];
    }
    set description(value) {
      super.description = value;
    }
    static ['_#new#tearOff'](id, name, opts) {
      let description = opts && 'description' in opts ? opts.description : null;
      return new notification_channel_group.AndroidNotificationChannelGroup.new(id, name, {description: description});
    }
  };
  (notification_channel_group.AndroidNotificationChannelGroup.new = function(id, name, opts) {
    let description = opts && 'description' in opts ? opts.description : null;
    this[id$0] = id;
    this[name$1] = name;
    this[description$0] = description;
    ;
  }).prototype = notification_channel_group.AndroidNotificationChannelGroup.prototype;
  dart.addTypeTests(notification_channel_group.AndroidNotificationChannelGroup);
  dart.addTypeCaches(notification_channel_group.AndroidNotificationChannelGroup);
  dart.setLibraryUri(notification_channel_group.AndroidNotificationChannelGroup, I[17]);
  dart.setFieldSignature(notification_channel_group.AndroidNotificationChannelGroup, () => ({
    __proto__: dart.getFields(notification_channel_group.AndroidNotificationChannelGroup.__proto__),
    id: dart.finalFieldType(core.String),
    name: dart.finalFieldType(core.String),
    description: dart.finalFieldType(dart.nullable(core.String))
  }));
  var choices$ = dart.privateName(notification_details$, "AndroidNotificationActionInput.choices");
  var allowFreeFormInput$ = dart.privateName(notification_details$, "AndroidNotificationActionInput.allowFreeFormInput");
  var label$ = dart.privateName(notification_details$, "AndroidNotificationActionInput.label");
  var allowedMimeTypes$ = dart.privateName(notification_details$, "AndroidNotificationActionInput.allowedMimeTypes");
  notification_details$.AndroidNotificationActionInput = class AndroidNotificationActionInput extends core.Object {
    get choices() {
      return this[choices$];
    }
    set choices(value) {
      super.choices = value;
    }
    get allowFreeFormInput() {
      return this[allowFreeFormInput$];
    }
    set allowFreeFormInput(value) {
      super.allowFreeFormInput = value;
    }
    get label() {
      return this[label$];
    }
    set label(value) {
      super.label = value;
    }
    get allowedMimeTypes() {
      return this[allowedMimeTypes$];
    }
    set allowedMimeTypes(value) {
      super.allowedMimeTypes = value;
    }
    static ['_#new#tearOff'](opts) {
      let choices = opts && 'choices' in opts ? opts.choices : C[110] || CT.C110;
      let allowFreeFormInput = opts && 'allowFreeFormInput' in opts ? opts.allowFreeFormInput : true;
      let label = opts && 'label' in opts ? opts.label : null;
      let allowedMimeTypes = opts && 'allowedMimeTypes' in opts ? opts.allowedMimeTypes : C[111] || CT.C111;
      return new notification_details$.AndroidNotificationActionInput.new({choices: choices, allowFreeFormInput: allowFreeFormInput, label: label, allowedMimeTypes: allowedMimeTypes});
    }
  };
  (notification_details$.AndroidNotificationActionInput.new = function(opts) {
    let choices = opts && 'choices' in opts ? opts.choices : C[110] || CT.C110;
    let allowFreeFormInput = opts && 'allowFreeFormInput' in opts ? opts.allowFreeFormInput : true;
    let label = opts && 'label' in opts ? opts.label : null;
    let allowedMimeTypes = opts && 'allowedMimeTypes' in opts ? opts.allowedMimeTypes : C[111] || CT.C111;
    this[choices$] = choices;
    this[allowFreeFormInput$] = allowFreeFormInput;
    this[label$] = label;
    this[allowedMimeTypes$] = allowedMimeTypes;
    ;
  }).prototype = notification_details$.AndroidNotificationActionInput.prototype;
  dart.addTypeTests(notification_details$.AndroidNotificationActionInput);
  dart.addTypeCaches(notification_details$.AndroidNotificationActionInput);
  dart.setLibraryUri(notification_details$.AndroidNotificationActionInput, I[18]);
  dart.setFieldSignature(notification_details$.AndroidNotificationActionInput, () => ({
    __proto__: dart.getFields(notification_details$.AndroidNotificationActionInput.__proto__),
    choices: dart.finalFieldType(core.List$(core.String)),
    allowFreeFormInput: dart.finalFieldType(core.bool),
    label: dart.finalFieldType(dart.nullable(core.String)),
    allowedMimeTypes: dart.finalFieldType(core.Set$(core.String))
  }));
  var id$1 = dart.privateName(notification_details$, "AndroidNotificationAction.id");
  var title$ = dart.privateName(notification_details$, "AndroidNotificationAction.title");
  var titleColor$ = dart.privateName(notification_details$, "AndroidNotificationAction.titleColor");
  var icon$0 = dart.privateName(notification_details$, "AndroidNotificationAction.icon");
  var contextual$ = dart.privateName(notification_details$, "AndroidNotificationAction.contextual");
  var showsUserInterface$ = dart.privateName(notification_details$, "AndroidNotificationAction.showsUserInterface");
  var allowGeneratedReplies$ = dart.privateName(notification_details$, "AndroidNotificationAction.allowGeneratedReplies");
  var inputs$ = dart.privateName(notification_details$, "AndroidNotificationAction.inputs");
  var cancelNotification$ = dart.privateName(notification_details$, "AndroidNotificationAction.cancelNotification");
  notification_details$.AndroidNotificationAction = class AndroidNotificationAction extends core.Object {
    get id() {
      return this[id$1];
    }
    set id(value) {
      super.id = value;
    }
    get title() {
      return this[title$];
    }
    set title(value) {
      super.title = value;
    }
    get titleColor() {
      return this[titleColor$];
    }
    set titleColor(value) {
      super.titleColor = value;
    }
    get icon() {
      return this[icon$0];
    }
    set icon(value) {
      super.icon = value;
    }
    get contextual() {
      return this[contextual$];
    }
    set contextual(value) {
      super.contextual = value;
    }
    get showsUserInterface() {
      return this[showsUserInterface$];
    }
    set showsUserInterface(value) {
      super.showsUserInterface = value;
    }
    get allowGeneratedReplies() {
      return this[allowGeneratedReplies$];
    }
    set allowGeneratedReplies(value) {
      super.allowGeneratedReplies = value;
    }
    get inputs() {
      return this[inputs$];
    }
    set inputs(value) {
      super.inputs = value;
    }
    get cancelNotification() {
      return this[cancelNotification$];
    }
    set cancelNotification(value) {
      super.cancelNotification = value;
    }
    static ['_#new#tearOff'](id, title, opts) {
      let titleColor = opts && 'titleColor' in opts ? opts.titleColor : null;
      let icon = opts && 'icon' in opts ? opts.icon : null;
      let contextual = opts && 'contextual' in opts ? opts.contextual : false;
      let showsUserInterface = opts && 'showsUserInterface' in opts ? opts.showsUserInterface : false;
      let allowGeneratedReplies = opts && 'allowGeneratedReplies' in opts ? opts.allowGeneratedReplies : false;
      let inputs = opts && 'inputs' in opts ? opts.inputs : C[112] || CT.C112;
      let cancelNotification = opts && 'cancelNotification' in opts ? opts.cancelNotification : true;
      return new notification_details$.AndroidNotificationAction.new(id, title, {titleColor: titleColor, icon: icon, contextual: contextual, showsUserInterface: showsUserInterface, allowGeneratedReplies: allowGeneratedReplies, inputs: inputs, cancelNotification: cancelNotification});
    }
  };
  (notification_details$.AndroidNotificationAction.new = function(id, title, opts) {
    let titleColor = opts && 'titleColor' in opts ? opts.titleColor : null;
    let icon = opts && 'icon' in opts ? opts.icon : null;
    let contextual = opts && 'contextual' in opts ? opts.contextual : false;
    let showsUserInterface = opts && 'showsUserInterface' in opts ? opts.showsUserInterface : false;
    let allowGeneratedReplies = opts && 'allowGeneratedReplies' in opts ? opts.allowGeneratedReplies : false;
    let inputs = opts && 'inputs' in opts ? opts.inputs : C[112] || CT.C112;
    let cancelNotification = opts && 'cancelNotification' in opts ? opts.cancelNotification : true;
    this[id$1] = id;
    this[title$] = title;
    this[titleColor$] = titleColor;
    this[icon$0] = icon;
    this[contextual$] = contextual;
    this[showsUserInterface$] = showsUserInterface;
    this[allowGeneratedReplies$] = allowGeneratedReplies;
    this[inputs$] = inputs;
    this[cancelNotification$] = cancelNotification;
    ;
  }).prototype = notification_details$.AndroidNotificationAction.prototype;
  dart.addTypeTests(notification_details$.AndroidNotificationAction);
  dart.addTypeCaches(notification_details$.AndroidNotificationAction);
  dart.setLibraryUri(notification_details$.AndroidNotificationAction, I[18]);
  dart.setFieldSignature(notification_details$.AndroidNotificationAction, () => ({
    __proto__: dart.getFields(notification_details$.AndroidNotificationAction.__proto__),
    id: dart.finalFieldType(core.String),
    title: dart.finalFieldType(core.String),
    titleColor: dart.finalFieldType(dart.nullable(ui.Color)),
    icon: dart.finalFieldType(dart.nullable(bitmap.AndroidBitmap$(core.Object))),
    contextual: dart.finalFieldType(core.bool),
    showsUserInterface: dart.finalFieldType(core.bool),
    allowGeneratedReplies: dart.finalFieldType(core.bool),
    inputs: dart.finalFieldType(core.List$(notification_details$.AndroidNotificationActionInput)),
    cancelNotification: dart.finalFieldType(core.bool)
  }));
  var icon$1 = dart.privateName(notification_details$, "AndroidNotificationDetails.icon");
  var channelId$ = dart.privateName(notification_details$, "AndroidNotificationDetails.channelId");
  var channelName$ = dart.privateName(notification_details$, "AndroidNotificationDetails.channelName");
  var channelDescription$ = dart.privateName(notification_details$, "AndroidNotificationDetails.channelDescription");
  var channelShowBadge$ = dart.privateName(notification_details$, "AndroidNotificationDetails.channelShowBadge");
  var importance$0 = dart.privateName(notification_details$, "AndroidNotificationDetails.importance");
  var priority$ = dart.privateName(notification_details$, "AndroidNotificationDetails.priority");
  var playSound$0 = dart.privateName(notification_details$, "AndroidNotificationDetails.playSound");
  var sound$0 = dart.privateName(notification_details$, "AndroidNotificationDetails.sound");
  var enableVibration$0 = dart.privateName(notification_details$, "AndroidNotificationDetails.enableVibration");
  var enableLights$0 = dart.privateName(notification_details$, "AndroidNotificationDetails.enableLights");
  var vibrationPattern$0 = dart.privateName(notification_details$, "AndroidNotificationDetails.vibrationPattern");
  var styleInformation$ = dart.privateName(notification_details$, "AndroidNotificationDetails.styleInformation");
  var groupKey$ = dart.privateName(notification_details$, "AndroidNotificationDetails.groupKey");
  var setAsGroupSummary$ = dart.privateName(notification_details$, "AndroidNotificationDetails.setAsGroupSummary");
  var groupAlertBehavior$ = dart.privateName(notification_details$, "AndroidNotificationDetails.groupAlertBehavior");
  var autoCancel$ = dart.privateName(notification_details$, "AndroidNotificationDetails.autoCancel");
  var ongoing$ = dart.privateName(notification_details$, "AndroidNotificationDetails.ongoing");
  var color$ = dart.privateName(notification_details$, "AndroidNotificationDetails.color");
  var largeIcon$ = dart.privateName(notification_details$, "AndroidNotificationDetails.largeIcon");
  var onlyAlertOnce$ = dart.privateName(notification_details$, "AndroidNotificationDetails.onlyAlertOnce");
  var showWhen$ = dart.privateName(notification_details$, "AndroidNotificationDetails.showWhen");
  var when$ = dart.privateName(notification_details$, "AndroidNotificationDetails.when");
  var usesChronometer$ = dart.privateName(notification_details$, "AndroidNotificationDetails.usesChronometer");
  var showProgress$ = dart.privateName(notification_details$, "AndroidNotificationDetails.showProgress");
  var maxProgress$ = dart.privateName(notification_details$, "AndroidNotificationDetails.maxProgress");
  var progress$ = dart.privateName(notification_details$, "AndroidNotificationDetails.progress");
  var indeterminate$ = dart.privateName(notification_details$, "AndroidNotificationDetails.indeterminate");
  var ledColor$0 = dart.privateName(notification_details$, "AndroidNotificationDetails.ledColor");
  var ledOnMs$ = dart.privateName(notification_details$, "AndroidNotificationDetails.ledOnMs");
  var ledOffMs$ = dart.privateName(notification_details$, "AndroidNotificationDetails.ledOffMs");
  var ticker$ = dart.privateName(notification_details$, "AndroidNotificationDetails.ticker");
  var channelAction$ = dart.privateName(notification_details$, "AndroidNotificationDetails.channelAction");
  var visibility$ = dart.privateName(notification_details$, "AndroidNotificationDetails.visibility");
  var timeoutAfter$ = dart.privateName(notification_details$, "AndroidNotificationDetails.timeoutAfter");
  var category$ = dart.privateName(notification_details$, "AndroidNotificationDetails.category");
  var fullScreenIntent$ = dart.privateName(notification_details$, "AndroidNotificationDetails.fullScreenIntent");
  var shortcutId$ = dart.privateName(notification_details$, "AndroidNotificationDetails.shortcutId");
  var additionalFlags$ = dart.privateName(notification_details$, "AndroidNotificationDetails.additionalFlags");
  var actions$ = dart.privateName(notification_details$, "AndroidNotificationDetails.actions");
  var subText$ = dart.privateName(notification_details$, "AndroidNotificationDetails.subText");
  var tag$ = dart.privateName(notification_details$, "AndroidNotificationDetails.tag");
  var colorized$ = dart.privateName(notification_details$, "AndroidNotificationDetails.colorized");
  var number$ = dart.privateName(notification_details$, "AndroidNotificationDetails.number");
  var audioAttributesUsage$ = dart.privateName(notification_details$, "AndroidNotificationDetails.audioAttributesUsage");
  notification_details$.AndroidNotificationDetails = class AndroidNotificationDetails extends core.Object {
    get icon() {
      return this[icon$1];
    }
    set icon(value) {
      super.icon = value;
    }
    get channelId() {
      return this[channelId$];
    }
    set channelId(value) {
      super.channelId = value;
    }
    get channelName() {
      return this[channelName$];
    }
    set channelName(value) {
      super.channelName = value;
    }
    get channelDescription() {
      return this[channelDescription$];
    }
    set channelDescription(value) {
      super.channelDescription = value;
    }
    get channelShowBadge() {
      return this[channelShowBadge$];
    }
    set channelShowBadge(value) {
      super.channelShowBadge = value;
    }
    get importance() {
      return this[importance$0];
    }
    set importance(value) {
      super.importance = value;
    }
    get priority() {
      return this[priority$];
    }
    set priority(value) {
      super.priority = value;
    }
    get playSound() {
      return this[playSound$0];
    }
    set playSound(value) {
      super.playSound = value;
    }
    get sound() {
      return this[sound$0];
    }
    set sound(value) {
      super.sound = value;
    }
    get enableVibration() {
      return this[enableVibration$0];
    }
    set enableVibration(value) {
      super.enableVibration = value;
    }
    get enableLights() {
      return this[enableLights$0];
    }
    set enableLights(value) {
      super.enableLights = value;
    }
    get vibrationPattern() {
      return this[vibrationPattern$0];
    }
    set vibrationPattern(value) {
      super.vibrationPattern = value;
    }
    get styleInformation() {
      return this[styleInformation$];
    }
    set styleInformation(value) {
      super.styleInformation = value;
    }
    get groupKey() {
      return this[groupKey$];
    }
    set groupKey(value) {
      super.groupKey = value;
    }
    get setAsGroupSummary() {
      return this[setAsGroupSummary$];
    }
    set setAsGroupSummary(value) {
      super.setAsGroupSummary = value;
    }
    get groupAlertBehavior() {
      return this[groupAlertBehavior$];
    }
    set groupAlertBehavior(value) {
      super.groupAlertBehavior = value;
    }
    get autoCancel() {
      return this[autoCancel$];
    }
    set autoCancel(value) {
      super.autoCancel = value;
    }
    get ongoing() {
      return this[ongoing$];
    }
    set ongoing(value) {
      super.ongoing = value;
    }
    get color() {
      return this[color$];
    }
    set color(value) {
      super.color = value;
    }
    get largeIcon() {
      return this[largeIcon$];
    }
    set largeIcon(value) {
      super.largeIcon = value;
    }
    get onlyAlertOnce() {
      return this[onlyAlertOnce$];
    }
    set onlyAlertOnce(value) {
      super.onlyAlertOnce = value;
    }
    get showWhen() {
      return this[showWhen$];
    }
    set showWhen(value) {
      super.showWhen = value;
    }
    get when() {
      return this[when$];
    }
    set when(value) {
      super.when = value;
    }
    get usesChronometer() {
      return this[usesChronometer$];
    }
    set usesChronometer(value) {
      super.usesChronometer = value;
    }
    get showProgress() {
      return this[showProgress$];
    }
    set showProgress(value) {
      super.showProgress = value;
    }
    get maxProgress() {
      return this[maxProgress$];
    }
    set maxProgress(value) {
      super.maxProgress = value;
    }
    get progress() {
      return this[progress$];
    }
    set progress(value) {
      super.progress = value;
    }
    get indeterminate() {
      return this[indeterminate$];
    }
    set indeterminate(value) {
      super.indeterminate = value;
    }
    get ledColor() {
      return this[ledColor$0];
    }
    set ledColor(value) {
      super.ledColor = value;
    }
    get ledOnMs() {
      return this[ledOnMs$];
    }
    set ledOnMs(value) {
      super.ledOnMs = value;
    }
    get ledOffMs() {
      return this[ledOffMs$];
    }
    set ledOffMs(value) {
      super.ledOffMs = value;
    }
    get ticker() {
      return this[ticker$];
    }
    set ticker(value) {
      super.ticker = value;
    }
    get channelAction() {
      return this[channelAction$];
    }
    set channelAction(value) {
      super.channelAction = value;
    }
    get visibility() {
      return this[visibility$];
    }
    set visibility(value) {
      super.visibility = value;
    }
    get timeoutAfter() {
      return this[timeoutAfter$];
    }
    set timeoutAfter(value) {
      super.timeoutAfter = value;
    }
    get category() {
      return this[category$];
    }
    set category(value) {
      super.category = value;
    }
    get fullScreenIntent() {
      return this[fullScreenIntent$];
    }
    set fullScreenIntent(value) {
      super.fullScreenIntent = value;
    }
    get shortcutId() {
      return this[shortcutId$];
    }
    set shortcutId(value) {
      super.shortcutId = value;
    }
    get additionalFlags() {
      return this[additionalFlags$];
    }
    set additionalFlags(value) {
      super.additionalFlags = value;
    }
    get actions() {
      return this[actions$];
    }
    set actions(value) {
      super.actions = value;
    }
    get subText() {
      return this[subText$];
    }
    set subText(value) {
      super.subText = value;
    }
    get tag() {
      return this[tag$];
    }
    set tag(value) {
      super.tag = value;
    }
    get colorized() {
      return this[colorized$];
    }
    set colorized(value) {
      super.colorized = value;
    }
    get number() {
      return this[number$];
    }
    set number(value) {
      super.number = value;
    }
    get audioAttributesUsage() {
      return this[audioAttributesUsage$];
    }
    set audioAttributesUsage(value) {
      super.audioAttributesUsage = value;
    }
    static ['_#new#tearOff'](channelId, channelName, opts) {
      let channelDescription = opts && 'channelDescription' in opts ? opts.channelDescription : null;
      let icon = opts && 'icon' in opts ? opts.icon : null;
      let importance = opts && 'importance' in opts ? opts.importance : C[81] || CT.C81;
      let priority = opts && 'priority' in opts ? opts.priority : C[86] || CT.C86;
      let styleInformation = opts && 'styleInformation' in opts ? opts.styleInformation : null;
      let playSound = opts && 'playSound' in opts ? opts.playSound : true;
      let sound = opts && 'sound' in opts ? opts.sound : null;
      let enableVibration = opts && 'enableVibration' in opts ? opts.enableVibration : true;
      let vibrationPattern = opts && 'vibrationPattern' in opts ? opts.vibrationPattern : null;
      let groupKey = opts && 'groupKey' in opts ? opts.groupKey : null;
      let setAsGroupSummary = opts && 'setAsGroupSummary' in opts ? opts.setAsGroupSummary : false;
      let groupAlertBehavior = opts && 'groupAlertBehavior' in opts ? opts.groupAlertBehavior : C[90] || CT.C90;
      let autoCancel = opts && 'autoCancel' in opts ? opts.autoCancel : true;
      let ongoing = opts && 'ongoing' in opts ? opts.ongoing : false;
      let color = opts && 'color' in opts ? opts.color : null;
      let largeIcon = opts && 'largeIcon' in opts ? opts.largeIcon : null;
      let onlyAlertOnce = opts && 'onlyAlertOnce' in opts ? opts.onlyAlertOnce : false;
      let showWhen = opts && 'showWhen' in opts ? opts.showWhen : true;
      let when = opts && 'when' in opts ? opts.when : null;
      let usesChronometer = opts && 'usesChronometer' in opts ? opts.usesChronometer : false;
      let channelShowBadge = opts && 'channelShowBadge' in opts ? opts.channelShowBadge : true;
      let showProgress = opts && 'showProgress' in opts ? opts.showProgress : false;
      let maxProgress = opts && 'maxProgress' in opts ? opts.maxProgress : 0;
      let progress = opts && 'progress' in opts ? opts.progress : 0;
      let indeterminate = opts && 'indeterminate' in opts ? opts.indeterminate : false;
      let channelAction = opts && 'channelAction' in opts ? opts.channelAction : C[62] || CT.C62;
      let enableLights = opts && 'enableLights' in opts ? opts.enableLights : false;
      let ledColor = opts && 'ledColor' in opts ? opts.ledColor : null;
      let ledOnMs = opts && 'ledOnMs' in opts ? opts.ledOnMs : null;
      let ledOffMs = opts && 'ledOffMs' in opts ? opts.ledOffMs : null;
      let ticker = opts && 'ticker' in opts ? opts.ticker : null;
      let visibility = opts && 'visibility' in opts ? opts.visibility : null;
      let timeoutAfter = opts && 'timeoutAfter' in opts ? opts.timeoutAfter : null;
      let category = opts && 'category' in opts ? opts.category : null;
      let fullScreenIntent = opts && 'fullScreenIntent' in opts ? opts.fullScreenIntent : false;
      let shortcutId = opts && 'shortcutId' in opts ? opts.shortcutId : null;
      let additionalFlags = opts && 'additionalFlags' in opts ? opts.additionalFlags : null;
      let subText = opts && 'subText' in opts ? opts.subText : null;
      let tag = opts && 'tag' in opts ? opts.tag : null;
      let actions = opts && 'actions' in opts ? opts.actions : null;
      let colorized = opts && 'colorized' in opts ? opts.colorized : false;
      let number = opts && 'number' in opts ? opts.number : null;
      let audioAttributesUsage = opts && 'audioAttributesUsage' in opts ? opts.audioAttributesUsage : C[104] || CT.C104;
      return new notification_details$.AndroidNotificationDetails.new(channelId, channelName, {channelDescription: channelDescription, icon: icon, importance: importance, priority: priority, styleInformation: styleInformation, playSound: playSound, sound: sound, enableVibration: enableVibration, vibrationPattern: vibrationPattern, groupKey: groupKey, setAsGroupSummary: setAsGroupSummary, groupAlertBehavior: groupAlertBehavior, autoCancel: autoCancel, ongoing: ongoing, color: color, largeIcon: largeIcon, onlyAlertOnce: onlyAlertOnce, showWhen: showWhen, when: when, usesChronometer: usesChronometer, channelShowBadge: channelShowBadge, showProgress: showProgress, maxProgress: maxProgress, progress: progress, indeterminate: indeterminate, channelAction: channelAction, enableLights: enableLights, ledColor: ledColor, ledOnMs: ledOnMs, ledOffMs: ledOffMs, ticker: ticker, visibility: visibility, timeoutAfter: timeoutAfter, category: category, fullScreenIntent: fullScreenIntent, shortcutId: shortcutId, additionalFlags: additionalFlags, subText: subText, tag: tag, actions: actions, colorized: colorized, number: number, audioAttributesUsage: audioAttributesUsage});
    }
  };
  (notification_details$.AndroidNotificationDetails.new = function(channelId, channelName, opts) {
    let channelDescription = opts && 'channelDescription' in opts ? opts.channelDescription : null;
    let icon = opts && 'icon' in opts ? opts.icon : null;
    let importance = opts && 'importance' in opts ? opts.importance : C[81] || CT.C81;
    let priority = opts && 'priority' in opts ? opts.priority : C[86] || CT.C86;
    let styleInformation = opts && 'styleInformation' in opts ? opts.styleInformation : null;
    let playSound = opts && 'playSound' in opts ? opts.playSound : true;
    let sound = opts && 'sound' in opts ? opts.sound : null;
    let enableVibration = opts && 'enableVibration' in opts ? opts.enableVibration : true;
    let vibrationPattern = opts && 'vibrationPattern' in opts ? opts.vibrationPattern : null;
    let groupKey = opts && 'groupKey' in opts ? opts.groupKey : null;
    let setAsGroupSummary = opts && 'setAsGroupSummary' in opts ? opts.setAsGroupSummary : false;
    let groupAlertBehavior = opts && 'groupAlertBehavior' in opts ? opts.groupAlertBehavior : C[90] || CT.C90;
    let autoCancel = opts && 'autoCancel' in opts ? opts.autoCancel : true;
    let ongoing = opts && 'ongoing' in opts ? opts.ongoing : false;
    let color = opts && 'color' in opts ? opts.color : null;
    let largeIcon = opts && 'largeIcon' in opts ? opts.largeIcon : null;
    let onlyAlertOnce = opts && 'onlyAlertOnce' in opts ? opts.onlyAlertOnce : false;
    let showWhen = opts && 'showWhen' in opts ? opts.showWhen : true;
    let when = opts && 'when' in opts ? opts.when : null;
    let usesChronometer = opts && 'usesChronometer' in opts ? opts.usesChronometer : false;
    let channelShowBadge = opts && 'channelShowBadge' in opts ? opts.channelShowBadge : true;
    let showProgress = opts && 'showProgress' in opts ? opts.showProgress : false;
    let maxProgress = opts && 'maxProgress' in opts ? opts.maxProgress : 0;
    let progress = opts && 'progress' in opts ? opts.progress : 0;
    let indeterminate = opts && 'indeterminate' in opts ? opts.indeterminate : false;
    let channelAction = opts && 'channelAction' in opts ? opts.channelAction : C[62] || CT.C62;
    let enableLights = opts && 'enableLights' in opts ? opts.enableLights : false;
    let ledColor = opts && 'ledColor' in opts ? opts.ledColor : null;
    let ledOnMs = opts && 'ledOnMs' in opts ? opts.ledOnMs : null;
    let ledOffMs = opts && 'ledOffMs' in opts ? opts.ledOffMs : null;
    let ticker = opts && 'ticker' in opts ? opts.ticker : null;
    let visibility = opts && 'visibility' in opts ? opts.visibility : null;
    let timeoutAfter = opts && 'timeoutAfter' in opts ? opts.timeoutAfter : null;
    let category = opts && 'category' in opts ? opts.category : null;
    let fullScreenIntent = opts && 'fullScreenIntent' in opts ? opts.fullScreenIntent : false;
    let shortcutId = opts && 'shortcutId' in opts ? opts.shortcutId : null;
    let additionalFlags = opts && 'additionalFlags' in opts ? opts.additionalFlags : null;
    let subText = opts && 'subText' in opts ? opts.subText : null;
    let tag = opts && 'tag' in opts ? opts.tag : null;
    let actions = opts && 'actions' in opts ? opts.actions : null;
    let colorized = opts && 'colorized' in opts ? opts.colorized : false;
    let number = opts && 'number' in opts ? opts.number : null;
    let audioAttributesUsage = opts && 'audioAttributesUsage' in opts ? opts.audioAttributesUsage : C[104] || CT.C104;
    this[channelId$] = channelId;
    this[channelName$] = channelName;
    this[channelDescription$] = channelDescription;
    this[icon$1] = icon;
    this[importance$0] = importance;
    this[priority$] = priority;
    this[styleInformation$] = styleInformation;
    this[playSound$0] = playSound;
    this[sound$0] = sound;
    this[enableVibration$0] = enableVibration;
    this[vibrationPattern$0] = vibrationPattern;
    this[groupKey$] = groupKey;
    this[setAsGroupSummary$] = setAsGroupSummary;
    this[groupAlertBehavior$] = groupAlertBehavior;
    this[autoCancel$] = autoCancel;
    this[ongoing$] = ongoing;
    this[color$] = color;
    this[largeIcon$] = largeIcon;
    this[onlyAlertOnce$] = onlyAlertOnce;
    this[showWhen$] = showWhen;
    this[when$] = when;
    this[usesChronometer$] = usesChronometer;
    this[channelShowBadge$] = channelShowBadge;
    this[showProgress$] = showProgress;
    this[maxProgress$] = maxProgress;
    this[progress$] = progress;
    this[indeterminate$] = indeterminate;
    this[channelAction$] = channelAction;
    this[enableLights$0] = enableLights;
    this[ledColor$0] = ledColor;
    this[ledOnMs$] = ledOnMs;
    this[ledOffMs$] = ledOffMs;
    this[ticker$] = ticker;
    this[visibility$] = visibility;
    this[timeoutAfter$] = timeoutAfter;
    this[category$] = category;
    this[fullScreenIntent$] = fullScreenIntent;
    this[shortcutId$] = shortcutId;
    this[additionalFlags$] = additionalFlags;
    this[subText$] = subText;
    this[tag$] = tag;
    this[actions$] = actions;
    this[colorized$] = colorized;
    this[number$] = number;
    this[audioAttributesUsage$] = audioAttributesUsage;
    ;
  }).prototype = notification_details$.AndroidNotificationDetails.prototype;
  dart.addTypeTests(notification_details$.AndroidNotificationDetails);
  dart.addTypeCaches(notification_details$.AndroidNotificationDetails);
  dart.setLibraryUri(notification_details$.AndroidNotificationDetails, I[18]);
  dart.setFieldSignature(notification_details$.AndroidNotificationDetails, () => ({
    __proto__: dart.getFields(notification_details$.AndroidNotificationDetails.__proto__),
    icon: dart.finalFieldType(dart.nullable(core.String)),
    channelId: dart.finalFieldType(core.String),
    channelName: dart.finalFieldType(core.String),
    channelDescription: dart.finalFieldType(dart.nullable(core.String)),
    channelShowBadge: dart.finalFieldType(core.bool),
    importance: dart.finalFieldType(enums.Importance),
    priority: dart.finalFieldType(enums.Priority),
    playSound: dart.finalFieldType(core.bool),
    sound: dart.finalFieldType(dart.nullable(notification_sound.AndroidNotificationSound)),
    enableVibration: dart.finalFieldType(core.bool),
    enableLights: dart.finalFieldType(core.bool),
    vibrationPattern: dart.finalFieldType(dart.nullable(typed_data.Int64List)),
    styleInformation: dart.finalFieldType(dart.nullable(style_information.StyleInformation)),
    groupKey: dart.finalFieldType(dart.nullable(core.String)),
    setAsGroupSummary: dart.finalFieldType(core.bool),
    groupAlertBehavior: dart.finalFieldType(enums.GroupAlertBehavior),
    autoCancel: dart.finalFieldType(core.bool),
    ongoing: dart.finalFieldType(core.bool),
    color: dart.finalFieldType(dart.nullable(ui.Color)),
    largeIcon: dart.finalFieldType(dart.nullable(bitmap.AndroidBitmap$(core.Object))),
    onlyAlertOnce: dart.finalFieldType(core.bool),
    showWhen: dart.finalFieldType(core.bool),
    when: dart.finalFieldType(dart.nullable(core.int)),
    usesChronometer: dart.finalFieldType(core.bool),
    showProgress: dart.finalFieldType(core.bool),
    maxProgress: dart.finalFieldType(core.int),
    progress: dart.finalFieldType(core.int),
    indeterminate: dart.finalFieldType(core.bool),
    ledColor: dart.finalFieldType(dart.nullable(ui.Color)),
    ledOnMs: dart.finalFieldType(dart.nullable(core.int)),
    ledOffMs: dart.finalFieldType(dart.nullable(core.int)),
    ticker: dart.finalFieldType(dart.nullable(core.String)),
    channelAction: dart.finalFieldType(enums.AndroidNotificationChannelAction),
    visibility: dart.finalFieldType(dart.nullable(enums.NotificationVisibility)),
    timeoutAfter: dart.finalFieldType(dart.nullable(core.int)),
    category: dart.finalFieldType(dart.nullable(categories.AndroidNotificationCategory)),
    fullScreenIntent: dart.finalFieldType(core.bool),
    shortcutId: dart.finalFieldType(dart.nullable(core.String)),
    additionalFlags: dart.finalFieldType(dart.nullable(typed_data.Int32List)),
    actions: dart.finalFieldType(dart.nullable(core.List$(notification_details$.AndroidNotificationAction))),
    subText: dart.finalFieldType(dart.nullable(core.String)),
    tag: dart.finalFieldType(dart.nullable(core.String)),
    colorized: dart.finalFieldType(core.bool),
    number: dart.finalFieldType(dart.nullable(core.int)),
    audioAttributesUsage: dart.finalFieldType(enums.AudioAttributesUsage)
  }));
  notification_sound.AndroidNotificationSound = class AndroidNotificationSound extends core.Object {};
  (notification_sound.AndroidNotificationSound.new = function() {
    ;
  }).prototype = notification_sound.AndroidNotificationSound.prototype;
  dart.addTypeTests(notification_sound.AndroidNotificationSound);
  dart.addTypeCaches(notification_sound.AndroidNotificationSound);
  dart.setLibraryUri(notification_sound.AndroidNotificationSound, I[19]);
  var _sound$ = dart.privateName(notification_sound, "RawResourceAndroidNotificationSound._sound");
  var _sound = dart.privateName(notification_sound, "_sound");
  notification_sound.RawResourceAndroidNotificationSound = class RawResourceAndroidNotificationSound extends core.Object {
    get [_sound]() {
      return this[_sound$];
    }
    set [_sound](value) {
      super[_sound] = value;
    }
    static ['_#new#tearOff'](_sound) {
      return new notification_sound.RawResourceAndroidNotificationSound.new(_sound);
    }
    get sound() {
      return dart.nullCheck(this[_sound]);
    }
  };
  (notification_sound.RawResourceAndroidNotificationSound.new = function(_sound) {
    this[_sound$] = _sound;
    ;
  }).prototype = notification_sound.RawResourceAndroidNotificationSound.prototype;
  dart.addTypeTests(notification_sound.RawResourceAndroidNotificationSound);
  dart.addTypeCaches(notification_sound.RawResourceAndroidNotificationSound);
  notification_sound.RawResourceAndroidNotificationSound[dart.implements] = () => [notification_sound.AndroidNotificationSound];
  dart.setGetterSignature(notification_sound.RawResourceAndroidNotificationSound, () => ({
    __proto__: dart.getGetters(notification_sound.RawResourceAndroidNotificationSound.__proto__),
    sound: core.String
  }));
  dart.setLibraryUri(notification_sound.RawResourceAndroidNotificationSound, I[19]);
  dart.setFieldSignature(notification_sound.RawResourceAndroidNotificationSound, () => ({
    __proto__: dart.getFields(notification_sound.RawResourceAndroidNotificationSound.__proto__),
    [_sound]: dart.finalFieldType(dart.nullable(core.String))
  }));
  var _sound$0 = dart.privateName(notification_sound, "UriAndroidNotificationSound._sound");
  notification_sound.UriAndroidNotificationSound = class UriAndroidNotificationSound extends core.Object {
    get [_sound]() {
      return this[_sound$0];
    }
    set [_sound](value) {
      super[_sound] = value;
    }
    static ['_#new#tearOff'](_sound) {
      return new notification_sound.UriAndroidNotificationSound.new(_sound);
    }
    get sound() {
      return this[_sound];
    }
  };
  (notification_sound.UriAndroidNotificationSound.new = function(_sound) {
    this[_sound$0] = _sound;
    ;
  }).prototype = notification_sound.UriAndroidNotificationSound.prototype;
  dart.addTypeTests(notification_sound.UriAndroidNotificationSound);
  dart.addTypeCaches(notification_sound.UriAndroidNotificationSound);
  notification_sound.UriAndroidNotificationSound[dart.implements] = () => [notification_sound.AndroidNotificationSound];
  dart.setGetterSignature(notification_sound.UriAndroidNotificationSound, () => ({
    __proto__: dart.getGetters(notification_sound.UriAndroidNotificationSound.__proto__),
    sound: core.String
  }));
  dart.setLibraryUri(notification_sound.UriAndroidNotificationSound, I[19]);
  dart.setFieldSignature(notification_sound.UriAndroidNotificationSound, () => ({
    __proto__: dart.getFields(notification_sound.UriAndroidNotificationSound.__proto__),
    [_sound]: dart.finalFieldType(core.String)
  }));
  var bot$ = dart.privateName(person, "Person.bot");
  var icon$2 = dart.privateName(person, "Person.icon");
  var important$ = dart.privateName(person, "Person.important");
  var key$ = dart.privateName(person, "Person.key");
  var name$2 = dart.privateName(person, "Person.name");
  var uri$ = dart.privateName(person, "Person.uri");
  person.Person = class Person extends core.Object {
    get bot() {
      return this[bot$];
    }
    set bot(value) {
      super.bot = value;
    }
    get icon() {
      return this[icon$2];
    }
    set icon(value) {
      super.icon = value;
    }
    get important() {
      return this[important$];
    }
    set important(value) {
      super.important = value;
    }
    get key() {
      return this[key$];
    }
    set key(value) {
      super.key = value;
    }
    get name() {
      return this[name$2];
    }
    set name(value) {
      super.name = value;
    }
    get uri() {
      return this[uri$];
    }
    set uri(value) {
      super.uri = value;
    }
    static ['_#new#tearOff'](opts) {
      let bot = opts && 'bot' in opts ? opts.bot : false;
      let icon = opts && 'icon' in opts ? opts.icon : null;
      let important = opts && 'important' in opts ? opts.important : false;
      let key = opts && 'key' in opts ? opts.key : null;
      let name = opts && 'name' in opts ? opts.name : null;
      let uri = opts && 'uri' in opts ? opts.uri : null;
      return new person.Person.new({bot: bot, icon: icon, important: important, key: key, name: name, uri: uri});
    }
  };
  (person.Person.new = function(opts) {
    let bot = opts && 'bot' in opts ? opts.bot : false;
    let icon = opts && 'icon' in opts ? opts.icon : null;
    let important = opts && 'important' in opts ? opts.important : false;
    let key = opts && 'key' in opts ? opts.key : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let uri = opts && 'uri' in opts ? opts.uri : null;
    this[bot$] = bot;
    this[icon$2] = icon;
    this[important$] = important;
    this[key$] = key;
    this[name$2] = name;
    this[uri$] = uri;
    ;
  }).prototype = person.Person.prototype;
  dart.addTypeTests(person.Person);
  dart.addTypeCaches(person.Person);
  dart.setLibraryUri(person.Person, I[20]);
  dart.setFieldSignature(person.Person, () => ({
    __proto__: dart.getFields(person.Person.__proto__),
    bot: dart.finalFieldType(core.bool),
    icon: dart.finalFieldType(dart.nullable(icon.AndroidIcon$(core.Object))),
    important: dart.finalFieldType(core.bool),
    key: dart.finalFieldType(dart.nullable(core.String)),
    name: dart.finalFieldType(dart.nullable(core.String)),
    uri: dart.finalFieldType(dart.nullable(core.String))
  }));
  var contentTitle$ = dart.privateName(big_picture_style_information, "BigPictureStyleInformation.contentTitle");
  var summaryText$ = dart.privateName(big_picture_style_information, "BigPictureStyleInformation.summaryText");
  var htmlFormatContentTitle$ = dart.privateName(big_picture_style_information, "BigPictureStyleInformation.htmlFormatContentTitle");
  var htmlFormatSummaryText$ = dart.privateName(big_picture_style_information, "BigPictureStyleInformation.htmlFormatSummaryText");
  var largeIcon$0 = dart.privateName(big_picture_style_information, "BigPictureStyleInformation.largeIcon");
  var bigPicture$ = dart.privateName(big_picture_style_information, "BigPictureStyleInformation.bigPicture");
  var hideExpandedLargeIcon$ = dart.privateName(big_picture_style_information, "BigPictureStyleInformation.hideExpandedLargeIcon");
  var htmlFormatContent$ = dart.privateName(default_style_information, "DefaultStyleInformation.htmlFormatContent");
  var htmlFormatTitle$ = dart.privateName(default_style_information, "DefaultStyleInformation.htmlFormatTitle");
  default_style_information.DefaultStyleInformation = class DefaultStyleInformation extends core.Object {
    get htmlFormatContent() {
      return this[htmlFormatContent$];
    }
    set htmlFormatContent(value) {
      super.htmlFormatContent = value;
    }
    get htmlFormatTitle() {
      return this[htmlFormatTitle$];
    }
    set htmlFormatTitle(value) {
      super.htmlFormatTitle = value;
    }
    static ['_#new#tearOff'](htmlFormatContent, htmlFormatTitle) {
      return new default_style_information.DefaultStyleInformation.new(htmlFormatContent, htmlFormatTitle);
    }
  };
  (default_style_information.DefaultStyleInformation.new = function(htmlFormatContent, htmlFormatTitle) {
    this[htmlFormatContent$] = htmlFormatContent;
    this[htmlFormatTitle$] = htmlFormatTitle;
    ;
  }).prototype = default_style_information.DefaultStyleInformation.prototype;
  dart.addTypeTests(default_style_information.DefaultStyleInformation);
  dart.addTypeCaches(default_style_information.DefaultStyleInformation);
  default_style_information.DefaultStyleInformation[dart.implements] = () => [style_information.StyleInformation];
  dart.setLibraryUri(default_style_information.DefaultStyleInformation, I[21]);
  dart.setFieldSignature(default_style_information.DefaultStyleInformation, () => ({
    __proto__: dart.getFields(default_style_information.DefaultStyleInformation.__proto__),
    htmlFormatContent: dart.finalFieldType(core.bool),
    htmlFormatTitle: dart.finalFieldType(core.bool)
  }));
  big_picture_style_information.BigPictureStyleInformation = class BigPictureStyleInformation extends default_style_information.DefaultStyleInformation {
    get contentTitle() {
      return this[contentTitle$];
    }
    set contentTitle(value) {
      super.contentTitle = value;
    }
    get summaryText() {
      return this[summaryText$];
    }
    set summaryText(value) {
      super.summaryText = value;
    }
    get htmlFormatContentTitle() {
      return this[htmlFormatContentTitle$];
    }
    set htmlFormatContentTitle(value) {
      super.htmlFormatContentTitle = value;
    }
    get htmlFormatSummaryText() {
      return this[htmlFormatSummaryText$];
    }
    set htmlFormatSummaryText(value) {
      super.htmlFormatSummaryText = value;
    }
    get largeIcon() {
      return this[largeIcon$0];
    }
    set largeIcon(value) {
      super.largeIcon = value;
    }
    get bigPicture() {
      return this[bigPicture$];
    }
    set bigPicture(value) {
      super.bigPicture = value;
    }
    get hideExpandedLargeIcon() {
      return this[hideExpandedLargeIcon$];
    }
    set hideExpandedLargeIcon(value) {
      super.hideExpandedLargeIcon = value;
    }
    static ['_#new#tearOff'](bigPicture, opts) {
      let contentTitle = opts && 'contentTitle' in opts ? opts.contentTitle : null;
      let summaryText = opts && 'summaryText' in opts ? opts.summaryText : null;
      let htmlFormatContentTitle = opts && 'htmlFormatContentTitle' in opts ? opts.htmlFormatContentTitle : false;
      let htmlFormatSummaryText = opts && 'htmlFormatSummaryText' in opts ? opts.htmlFormatSummaryText : false;
      let largeIcon = opts && 'largeIcon' in opts ? opts.largeIcon : null;
      let htmlFormatContent = opts && 'htmlFormatContent' in opts ? opts.htmlFormatContent : false;
      let htmlFormatTitle = opts && 'htmlFormatTitle' in opts ? opts.htmlFormatTitle : false;
      let hideExpandedLargeIcon = opts && 'hideExpandedLargeIcon' in opts ? opts.hideExpandedLargeIcon : false;
      return new big_picture_style_information.BigPictureStyleInformation.new(bigPicture, {contentTitle: contentTitle, summaryText: summaryText, htmlFormatContentTitle: htmlFormatContentTitle, htmlFormatSummaryText: htmlFormatSummaryText, largeIcon: largeIcon, htmlFormatContent: htmlFormatContent, htmlFormatTitle: htmlFormatTitle, hideExpandedLargeIcon: hideExpandedLargeIcon});
    }
  };
  (big_picture_style_information.BigPictureStyleInformation.new = function(bigPicture, opts) {
    let contentTitle = opts && 'contentTitle' in opts ? opts.contentTitle : null;
    let summaryText = opts && 'summaryText' in opts ? opts.summaryText : null;
    let htmlFormatContentTitle = opts && 'htmlFormatContentTitle' in opts ? opts.htmlFormatContentTitle : false;
    let htmlFormatSummaryText = opts && 'htmlFormatSummaryText' in opts ? opts.htmlFormatSummaryText : false;
    let largeIcon = opts && 'largeIcon' in opts ? opts.largeIcon : null;
    let htmlFormatContent = opts && 'htmlFormatContent' in opts ? opts.htmlFormatContent : false;
    let htmlFormatTitle = opts && 'htmlFormatTitle' in opts ? opts.htmlFormatTitle : false;
    let hideExpandedLargeIcon = opts && 'hideExpandedLargeIcon' in opts ? opts.hideExpandedLargeIcon : false;
    this[bigPicture$] = bigPicture;
    this[contentTitle$] = contentTitle;
    this[summaryText$] = summaryText;
    this[htmlFormatContentTitle$] = htmlFormatContentTitle;
    this[htmlFormatSummaryText$] = htmlFormatSummaryText;
    this[largeIcon$0] = largeIcon;
    this[hideExpandedLargeIcon$] = hideExpandedLargeIcon;
    big_picture_style_information.BigPictureStyleInformation.__proto__.new.call(this, htmlFormatContent, htmlFormatTitle);
    ;
  }).prototype = big_picture_style_information.BigPictureStyleInformation.prototype;
  dart.addTypeTests(big_picture_style_information.BigPictureStyleInformation);
  dart.addTypeCaches(big_picture_style_information.BigPictureStyleInformation);
  dart.setLibraryUri(big_picture_style_information.BigPictureStyleInformation, I[22]);
  dart.setFieldSignature(big_picture_style_information.BigPictureStyleInformation, () => ({
    __proto__: dart.getFields(big_picture_style_information.BigPictureStyleInformation.__proto__),
    contentTitle: dart.finalFieldType(dart.nullable(core.String)),
    summaryText: dart.finalFieldType(dart.nullable(core.String)),
    htmlFormatContentTitle: dart.finalFieldType(core.bool),
    htmlFormatSummaryText: dart.finalFieldType(core.bool),
    largeIcon: dart.finalFieldType(dart.nullable(bitmap.AndroidBitmap$(core.Object))),
    bigPicture: dart.finalFieldType(bitmap.AndroidBitmap$(core.Object)),
    hideExpandedLargeIcon: dart.finalFieldType(core.bool)
  }));
  var bigText$ = dart.privateName(big_text_style_information, "BigTextStyleInformation.bigText");
  var contentTitle$0 = dart.privateName(big_text_style_information, "BigTextStyleInformation.contentTitle");
  var summaryText$0 = dart.privateName(big_text_style_information, "BigTextStyleInformation.summaryText");
  var htmlFormatBigText$ = dart.privateName(big_text_style_information, "BigTextStyleInformation.htmlFormatBigText");
  var htmlFormatContentTitle$0 = dart.privateName(big_text_style_information, "BigTextStyleInformation.htmlFormatContentTitle");
  var htmlFormatSummaryText$0 = dart.privateName(big_text_style_information, "BigTextStyleInformation.htmlFormatSummaryText");
  big_text_style_information.BigTextStyleInformation = class BigTextStyleInformation extends default_style_information.DefaultStyleInformation {
    get bigText() {
      return this[bigText$];
    }
    set bigText(value) {
      super.bigText = value;
    }
    get contentTitle() {
      return this[contentTitle$0];
    }
    set contentTitle(value) {
      super.contentTitle = value;
    }
    get summaryText() {
      return this[summaryText$0];
    }
    set summaryText(value) {
      super.summaryText = value;
    }
    get htmlFormatBigText() {
      return this[htmlFormatBigText$];
    }
    set htmlFormatBigText(value) {
      super.htmlFormatBigText = value;
    }
    get htmlFormatContentTitle() {
      return this[htmlFormatContentTitle$0];
    }
    set htmlFormatContentTitle(value) {
      super.htmlFormatContentTitle = value;
    }
    get htmlFormatSummaryText() {
      return this[htmlFormatSummaryText$0];
    }
    set htmlFormatSummaryText(value) {
      super.htmlFormatSummaryText = value;
    }
    static ['_#new#tearOff'](bigText, opts) {
      let htmlFormatBigText = opts && 'htmlFormatBigText' in opts ? opts.htmlFormatBigText : false;
      let contentTitle = opts && 'contentTitle' in opts ? opts.contentTitle : null;
      let htmlFormatContentTitle = opts && 'htmlFormatContentTitle' in opts ? opts.htmlFormatContentTitle : false;
      let summaryText = opts && 'summaryText' in opts ? opts.summaryText : null;
      let htmlFormatSummaryText = opts && 'htmlFormatSummaryText' in opts ? opts.htmlFormatSummaryText : false;
      let htmlFormatContent = opts && 'htmlFormatContent' in opts ? opts.htmlFormatContent : false;
      let htmlFormatTitle = opts && 'htmlFormatTitle' in opts ? opts.htmlFormatTitle : false;
      return new big_text_style_information.BigTextStyleInformation.new(bigText, {htmlFormatBigText: htmlFormatBigText, contentTitle: contentTitle, htmlFormatContentTitle: htmlFormatContentTitle, summaryText: summaryText, htmlFormatSummaryText: htmlFormatSummaryText, htmlFormatContent: htmlFormatContent, htmlFormatTitle: htmlFormatTitle});
    }
  };
  (big_text_style_information.BigTextStyleInformation.new = function(bigText, opts) {
    let htmlFormatBigText = opts && 'htmlFormatBigText' in opts ? opts.htmlFormatBigText : false;
    let contentTitle = opts && 'contentTitle' in opts ? opts.contentTitle : null;
    let htmlFormatContentTitle = opts && 'htmlFormatContentTitle' in opts ? opts.htmlFormatContentTitle : false;
    let summaryText = opts && 'summaryText' in opts ? opts.summaryText : null;
    let htmlFormatSummaryText = opts && 'htmlFormatSummaryText' in opts ? opts.htmlFormatSummaryText : false;
    let htmlFormatContent = opts && 'htmlFormatContent' in opts ? opts.htmlFormatContent : false;
    let htmlFormatTitle = opts && 'htmlFormatTitle' in opts ? opts.htmlFormatTitle : false;
    this[bigText$] = bigText;
    this[htmlFormatBigText$] = htmlFormatBigText;
    this[contentTitle$0] = contentTitle;
    this[htmlFormatContentTitle$0] = htmlFormatContentTitle;
    this[summaryText$0] = summaryText;
    this[htmlFormatSummaryText$0] = htmlFormatSummaryText;
    big_text_style_information.BigTextStyleInformation.__proto__.new.call(this, htmlFormatContent, htmlFormatTitle);
    ;
  }).prototype = big_text_style_information.BigTextStyleInformation.prototype;
  dart.addTypeTests(big_text_style_information.BigTextStyleInformation);
  dart.addTypeCaches(big_text_style_information.BigTextStyleInformation);
  dart.setLibraryUri(big_text_style_information.BigTextStyleInformation, I[23]);
  dart.setFieldSignature(big_text_style_information.BigTextStyleInformation, () => ({
    __proto__: dart.getFields(big_text_style_information.BigTextStyleInformation.__proto__),
    bigText: dart.finalFieldType(core.String),
    contentTitle: dart.finalFieldType(dart.nullable(core.String)),
    summaryText: dart.finalFieldType(dart.nullable(core.String)),
    htmlFormatBigText: dart.finalFieldType(core.bool),
    htmlFormatContentTitle: dart.finalFieldType(core.bool),
    htmlFormatSummaryText: dart.finalFieldType(core.bool)
  }));
  var contentTitle$1 = dart.privateName(inbox_style_information, "InboxStyleInformation.contentTitle");
  var summaryText$1 = dart.privateName(inbox_style_information, "InboxStyleInformation.summaryText");
  var lines$ = dart.privateName(inbox_style_information, "InboxStyleInformation.lines");
  var htmlFormatLines$ = dart.privateName(inbox_style_information, "InboxStyleInformation.htmlFormatLines");
  var htmlFormatContentTitle$1 = dart.privateName(inbox_style_information, "InboxStyleInformation.htmlFormatContentTitle");
  var htmlFormatSummaryText$1 = dart.privateName(inbox_style_information, "InboxStyleInformation.htmlFormatSummaryText");
  inbox_style_information.InboxStyleInformation = class InboxStyleInformation extends default_style_information.DefaultStyleInformation {
    get contentTitle() {
      return this[contentTitle$1];
    }
    set contentTitle(value) {
      super.contentTitle = value;
    }
    get summaryText() {
      return this[summaryText$1];
    }
    set summaryText(value) {
      super.summaryText = value;
    }
    get lines() {
      return this[lines$];
    }
    set lines(value) {
      super.lines = value;
    }
    get htmlFormatLines() {
      return this[htmlFormatLines$];
    }
    set htmlFormatLines(value) {
      super.htmlFormatLines = value;
    }
    get htmlFormatContentTitle() {
      return this[htmlFormatContentTitle$1];
    }
    set htmlFormatContentTitle(value) {
      super.htmlFormatContentTitle = value;
    }
    get htmlFormatSummaryText() {
      return this[htmlFormatSummaryText$1];
    }
    set htmlFormatSummaryText(value) {
      super.htmlFormatSummaryText = value;
    }
    static ['_#new#tearOff'](lines, opts) {
      let htmlFormatLines = opts && 'htmlFormatLines' in opts ? opts.htmlFormatLines : false;
      let contentTitle = opts && 'contentTitle' in opts ? opts.contentTitle : null;
      let htmlFormatContentTitle = opts && 'htmlFormatContentTitle' in opts ? opts.htmlFormatContentTitle : false;
      let summaryText = opts && 'summaryText' in opts ? opts.summaryText : null;
      let htmlFormatSummaryText = opts && 'htmlFormatSummaryText' in opts ? opts.htmlFormatSummaryText : false;
      let htmlFormatContent = opts && 'htmlFormatContent' in opts ? opts.htmlFormatContent : false;
      let htmlFormatTitle = opts && 'htmlFormatTitle' in opts ? opts.htmlFormatTitle : false;
      return new inbox_style_information.InboxStyleInformation.new(lines, {htmlFormatLines: htmlFormatLines, contentTitle: contentTitle, htmlFormatContentTitle: htmlFormatContentTitle, summaryText: summaryText, htmlFormatSummaryText: htmlFormatSummaryText, htmlFormatContent: htmlFormatContent, htmlFormatTitle: htmlFormatTitle});
    }
  };
  (inbox_style_information.InboxStyleInformation.new = function(lines, opts) {
    let htmlFormatLines = opts && 'htmlFormatLines' in opts ? opts.htmlFormatLines : false;
    let contentTitle = opts && 'contentTitle' in opts ? opts.contentTitle : null;
    let htmlFormatContentTitle = opts && 'htmlFormatContentTitle' in opts ? opts.htmlFormatContentTitle : false;
    let summaryText = opts && 'summaryText' in opts ? opts.summaryText : null;
    let htmlFormatSummaryText = opts && 'htmlFormatSummaryText' in opts ? opts.htmlFormatSummaryText : false;
    let htmlFormatContent = opts && 'htmlFormatContent' in opts ? opts.htmlFormatContent : false;
    let htmlFormatTitle = opts && 'htmlFormatTitle' in opts ? opts.htmlFormatTitle : false;
    this[lines$] = lines;
    this[htmlFormatLines$] = htmlFormatLines;
    this[contentTitle$1] = contentTitle;
    this[htmlFormatContentTitle$1] = htmlFormatContentTitle;
    this[summaryText$1] = summaryText;
    this[htmlFormatSummaryText$1] = htmlFormatSummaryText;
    inbox_style_information.InboxStyleInformation.__proto__.new.call(this, htmlFormatContent, htmlFormatTitle);
    ;
  }).prototype = inbox_style_information.InboxStyleInformation.prototype;
  dart.addTypeTests(inbox_style_information.InboxStyleInformation);
  dart.addTypeCaches(inbox_style_information.InboxStyleInformation);
  dart.setLibraryUri(inbox_style_information.InboxStyleInformation, I[24]);
  dart.setFieldSignature(inbox_style_information.InboxStyleInformation, () => ({
    __proto__: dart.getFields(inbox_style_information.InboxStyleInformation.__proto__),
    contentTitle: dart.finalFieldType(dart.nullable(core.String)),
    summaryText: dart.finalFieldType(dart.nullable(core.String)),
    lines: dart.finalFieldType(core.List$(core.String)),
    htmlFormatLines: dart.finalFieldType(core.bool),
    htmlFormatContentTitle: dart.finalFieldType(core.bool),
    htmlFormatSummaryText: dart.finalFieldType(core.bool)
  }));
  media_style_information.MediaStyleInformation = class MediaStyleInformation extends default_style_information.DefaultStyleInformation {
    static ['_#new#tearOff'](opts) {
      let htmlFormatContent = opts && 'htmlFormatContent' in opts ? opts.htmlFormatContent : false;
      let htmlFormatTitle = opts && 'htmlFormatTitle' in opts ? opts.htmlFormatTitle : false;
      return new media_style_information.MediaStyleInformation.new({htmlFormatContent: htmlFormatContent, htmlFormatTitle: htmlFormatTitle});
    }
  };
  (media_style_information.MediaStyleInformation.new = function(opts) {
    let htmlFormatContent = opts && 'htmlFormatContent' in opts ? opts.htmlFormatContent : false;
    let htmlFormatTitle = opts && 'htmlFormatTitle' in opts ? opts.htmlFormatTitle : false;
    media_style_information.MediaStyleInformation.__proto__.new.call(this, htmlFormatContent, htmlFormatTitle);
    ;
  }).prototype = media_style_information.MediaStyleInformation.prototype;
  dart.addTypeTests(media_style_information.MediaStyleInformation);
  dart.addTypeCaches(media_style_information.MediaStyleInformation);
  dart.setLibraryUri(media_style_information.MediaStyleInformation, I[25]);
  var person$0 = dart.privateName(messaging_style_information, "MessagingStyleInformation.person");
  var conversationTitle$ = dart.privateName(messaging_style_information, "MessagingStyleInformation.conversationTitle");
  var groupConversation$ = dart.privateName(messaging_style_information, "MessagingStyleInformation.groupConversation");
  var messages$ = dart.privateName(messaging_style_information, "MessagingStyleInformation.messages");
  messaging_style_information.MessagingStyleInformation = class MessagingStyleInformation extends default_style_information.DefaultStyleInformation {
    get person() {
      return this[person$0];
    }
    set person(value) {
      super.person = value;
    }
    get conversationTitle() {
      return this[conversationTitle$];
    }
    set conversationTitle(value) {
      super.conversationTitle = value;
    }
    get groupConversation() {
      return this[groupConversation$];
    }
    set groupConversation(value) {
      super.groupConversation = value;
    }
    get messages() {
      return this[messages$];
    }
    set messages(value) {
      super.messages = value;
    }
    static ['_#new#tearOff'](person, opts) {
      let conversationTitle = opts && 'conversationTitle' in opts ? opts.conversationTitle : null;
      let groupConversation = opts && 'groupConversation' in opts ? opts.groupConversation : null;
      let messages = opts && 'messages' in opts ? opts.messages : null;
      let htmlFormatContent = opts && 'htmlFormatContent' in opts ? opts.htmlFormatContent : false;
      let htmlFormatTitle = opts && 'htmlFormatTitle' in opts ? opts.htmlFormatTitle : false;
      return new messaging_style_information.MessagingStyleInformation.new(person, {conversationTitle: conversationTitle, groupConversation: groupConversation, messages: messages, htmlFormatContent: htmlFormatContent, htmlFormatTitle: htmlFormatTitle});
    }
  };
  (messaging_style_information.MessagingStyleInformation.new = function(person, opts) {
    let conversationTitle = opts && 'conversationTitle' in opts ? opts.conversationTitle : null;
    let groupConversation = opts && 'groupConversation' in opts ? opts.groupConversation : null;
    let messages = opts && 'messages' in opts ? opts.messages : null;
    let htmlFormatContent = opts && 'htmlFormatContent' in opts ? opts.htmlFormatContent : false;
    let htmlFormatTitle = opts && 'htmlFormatTitle' in opts ? opts.htmlFormatTitle : false;
    this[person$0] = person;
    this[conversationTitle$] = conversationTitle;
    this[groupConversation$] = groupConversation;
    this[messages$] = messages;
    messaging_style_information.MessagingStyleInformation.__proto__.new.call(this, htmlFormatContent, htmlFormatTitle);
    ;
  }).prototype = messaging_style_information.MessagingStyleInformation.prototype;
  dart.addTypeTests(messaging_style_information.MessagingStyleInformation);
  dart.addTypeCaches(messaging_style_information.MessagingStyleInformation);
  dart.setLibraryUri(messaging_style_information.MessagingStyleInformation, I[26]);
  dart.setFieldSignature(messaging_style_information.MessagingStyleInformation, () => ({
    __proto__: dart.getFields(messaging_style_information.MessagingStyleInformation.__proto__),
    person: dart.finalFieldType(person.Person),
    conversationTitle: dart.finalFieldType(dart.nullable(core.String)),
    groupConversation: dart.finalFieldType(dart.nullable(core.bool)),
    messages: dart.finalFieldType(dart.nullable(core.List$(message.Message)))
  }));
  style_information.StyleInformation = class StyleInformation extends core.Object {};
  (style_information.StyleInformation.new = function() {
    ;
  }).prototype = style_information.StyleInformation.prototype;
  dart.addTypeTests(style_information.StyleInformation);
  dart.addTypeCaches(style_information.StyleInformation);
  dart.setLibraryUri(style_information.StyleInformation, I[27]);
  var requestAlertPermission$ = dart.privateName(initialization_settings$0, "DarwinInitializationSettings.requestAlertPermission");
  var requestSoundPermission$ = dart.privateName(initialization_settings$0, "DarwinInitializationSettings.requestSoundPermission");
  var requestBadgePermission$ = dart.privateName(initialization_settings$0, "DarwinInitializationSettings.requestBadgePermission");
  var requestCriticalPermission$ = dart.privateName(initialization_settings$0, "DarwinInitializationSettings.requestCriticalPermission");
  var defaultPresentAlert$ = dart.privateName(initialization_settings$0, "DarwinInitializationSettings.defaultPresentAlert");
  var defaultPresentSound$ = dart.privateName(initialization_settings$0, "DarwinInitializationSettings.defaultPresentSound");
  var defaultPresentBadge$ = dart.privateName(initialization_settings$0, "DarwinInitializationSettings.defaultPresentBadge");
  var onDidReceiveLocalNotification$ = dart.privateName(initialization_settings$0, "DarwinInitializationSettings.onDidReceiveLocalNotification");
  var notificationCategories$ = dart.privateName(initialization_settings$0, "DarwinInitializationSettings.notificationCategories");
  initialization_settings$0.DarwinInitializationSettings = class DarwinInitializationSettings extends core.Object {
    get requestAlertPermission() {
      return this[requestAlertPermission$];
    }
    set requestAlertPermission(value) {
      super.requestAlertPermission = value;
    }
    get requestSoundPermission() {
      return this[requestSoundPermission$];
    }
    set requestSoundPermission(value) {
      super.requestSoundPermission = value;
    }
    get requestBadgePermission() {
      return this[requestBadgePermission$];
    }
    set requestBadgePermission(value) {
      super.requestBadgePermission = value;
    }
    get requestCriticalPermission() {
      return this[requestCriticalPermission$];
    }
    set requestCriticalPermission(value) {
      super.requestCriticalPermission = value;
    }
    get defaultPresentAlert() {
      return this[defaultPresentAlert$];
    }
    set defaultPresentAlert(value) {
      super.defaultPresentAlert = value;
    }
    get defaultPresentSound() {
      return this[defaultPresentSound$];
    }
    set defaultPresentSound(value) {
      super.defaultPresentSound = value;
    }
    get defaultPresentBadge() {
      return this[defaultPresentBadge$];
    }
    set defaultPresentBadge(value) {
      super.defaultPresentBadge = value;
    }
    get onDidReceiveLocalNotification() {
      return this[onDidReceiveLocalNotification$];
    }
    set onDidReceiveLocalNotification(value) {
      super.onDidReceiveLocalNotification = value;
    }
    get notificationCategories() {
      return this[notificationCategories$];
    }
    set notificationCategories(value) {
      super.notificationCategories = value;
    }
    static ['_#new#tearOff'](opts) {
      let requestAlertPermission = opts && 'requestAlertPermission' in opts ? opts.requestAlertPermission : true;
      let requestSoundPermission = opts && 'requestSoundPermission' in opts ? opts.requestSoundPermission : true;
      let requestBadgePermission = opts && 'requestBadgePermission' in opts ? opts.requestBadgePermission : true;
      let requestCriticalPermission = opts && 'requestCriticalPermission' in opts ? opts.requestCriticalPermission : false;
      let defaultPresentAlert = opts && 'defaultPresentAlert' in opts ? opts.defaultPresentAlert : true;
      let defaultPresentSound = opts && 'defaultPresentSound' in opts ? opts.defaultPresentSound : true;
      let defaultPresentBadge = opts && 'defaultPresentBadge' in opts ? opts.defaultPresentBadge : true;
      let onDidReceiveLocalNotification = opts && 'onDidReceiveLocalNotification' in opts ? opts.onDidReceiveLocalNotification : null;
      let notificationCategories = opts && 'notificationCategories' in opts ? opts.notificationCategories : C[113] || CT.C113;
      return new initialization_settings$0.DarwinInitializationSettings.new({requestAlertPermission: requestAlertPermission, requestSoundPermission: requestSoundPermission, requestBadgePermission: requestBadgePermission, requestCriticalPermission: requestCriticalPermission, defaultPresentAlert: defaultPresentAlert, defaultPresentSound: defaultPresentSound, defaultPresentBadge: defaultPresentBadge, onDidReceiveLocalNotification: onDidReceiveLocalNotification, notificationCategories: notificationCategories});
    }
  };
  (initialization_settings$0.DarwinInitializationSettings.new = function(opts) {
    let requestAlertPermission = opts && 'requestAlertPermission' in opts ? opts.requestAlertPermission : true;
    let requestSoundPermission = opts && 'requestSoundPermission' in opts ? opts.requestSoundPermission : true;
    let requestBadgePermission = opts && 'requestBadgePermission' in opts ? opts.requestBadgePermission : true;
    let requestCriticalPermission = opts && 'requestCriticalPermission' in opts ? opts.requestCriticalPermission : false;
    let defaultPresentAlert = opts && 'defaultPresentAlert' in opts ? opts.defaultPresentAlert : true;
    let defaultPresentSound = opts && 'defaultPresentSound' in opts ? opts.defaultPresentSound : true;
    let defaultPresentBadge = opts && 'defaultPresentBadge' in opts ? opts.defaultPresentBadge : true;
    let onDidReceiveLocalNotification = opts && 'onDidReceiveLocalNotification' in opts ? opts.onDidReceiveLocalNotification : null;
    let notificationCategories = opts && 'notificationCategories' in opts ? opts.notificationCategories : C[113] || CT.C113;
    this[requestAlertPermission$] = requestAlertPermission;
    this[requestSoundPermission$] = requestSoundPermission;
    this[requestBadgePermission$] = requestBadgePermission;
    this[requestCriticalPermission$] = requestCriticalPermission;
    this[defaultPresentAlert$] = defaultPresentAlert;
    this[defaultPresentSound$] = defaultPresentSound;
    this[defaultPresentBadge$] = defaultPresentBadge;
    this[onDidReceiveLocalNotification$] = onDidReceiveLocalNotification;
    this[notificationCategories$] = notificationCategories;
    ;
  }).prototype = initialization_settings$0.DarwinInitializationSettings.prototype;
  dart.addTypeTests(initialization_settings$0.DarwinInitializationSettings);
  dart.addTypeCaches(initialization_settings$0.DarwinInitializationSettings);
  dart.setLibraryUri(initialization_settings$0.DarwinInitializationSettings, I[28]);
  dart.setFieldSignature(initialization_settings$0.DarwinInitializationSettings, () => ({
    __proto__: dart.getFields(initialization_settings$0.DarwinInitializationSettings.__proto__),
    requestAlertPermission: dart.finalFieldType(core.bool),
    requestSoundPermission: dart.finalFieldType(core.bool),
    requestBadgePermission: dart.finalFieldType(core.bool),
    requestCriticalPermission: dart.finalFieldType(core.bool),
    defaultPresentAlert: dart.finalFieldType(core.bool),
    defaultPresentSound: dart.finalFieldType(core.bool),
    defaultPresentBadge: dart.finalFieldType(core.bool),
    onDidReceiveLocalNotification: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.int, dart.nullable(core.String), dart.nullable(core.String), dart.nullable(core.String)]))),
    notificationCategories: dart.finalFieldType(core.List$(notification_category.DarwinNotificationCategory))
  }));
  var value$4 = dart.privateName(interruption_level, "InterruptionLevel.value");
  interruption_level.InterruptionLevel = class InterruptionLevel extends core.Object {
    get value() {
      return this[value$4];
    }
    set value(value) {
      super.value = value;
    }
    static ['_#new#tearOff'](value) {
      return new interruption_level.InterruptionLevel.new(value);
    }
    get hashCode() {
      return this.value;
    }
    _equals(other) {
      if (other == null) return false;
      return interruption_level.InterruptionLevel.is(other) && other.value === this.value;
    }
  };
  (interruption_level.InterruptionLevel.new = function(value) {
    this[value$4] = value;
    ;
  }).prototype = interruption_level.InterruptionLevel.prototype;
  dart.addTypeTests(interruption_level.InterruptionLevel);
  dart.addTypeCaches(interruption_level.InterruptionLevel);
  dart.setLibraryUri(interruption_level.InterruptionLevel, I[29]);
  dart.setFieldSignature(interruption_level.InterruptionLevel, () => ({
    __proto__: dart.getFields(interruption_level.InterruptionLevel.__proto__),
    value: dart.finalFieldType(core.int)
  }));
  dart.setStaticFieldSignature(interruption_level.InterruptionLevel, () => ['passive', 'active', 'timeSensitive', 'critical']);
  dart.defineExtensionMethods(interruption_level.InterruptionLevel, ['_equals']);
  dart.defineExtensionAccessors(interruption_level.InterruptionLevel, ['hashCode']);
  dart.defineLazy(interruption_level.InterruptionLevel, {
    /*interruption_level.InterruptionLevel.passive*/get passive() {
      return C[114] || CT.C114;
    },
    /*interruption_level.InterruptionLevel.active*/get active() {
      return C[115] || CT.C115;
    },
    /*interruption_level.InterruptionLevel.timeSensitive*/get timeSensitive() {
      return C[116] || CT.C116;
    },
    /*interruption_level.InterruptionLevel.critical*/get critical() {
      return C[117] || CT.C117;
    }
  }, false);
  notification_action._DarwinNotificationActionType = class _DarwinNotificationActionType extends core._Enum {
    [_enumToString]() {
      return "_DarwinNotificationActionType." + this[_name];
    }
  };
  (notification_action._DarwinNotificationActionType.new = function(index, name) {
    notification_action._DarwinNotificationActionType.__proto__.new.call(this, index, name);
    ;
  }).prototype = notification_action._DarwinNotificationActionType.prototype;
  dart.addTypeTests(notification_action._DarwinNotificationActionType);
  dart.addTypeCaches(notification_action._DarwinNotificationActionType);
  dart.setMethodSignature(notification_action._DarwinNotificationActionType, () => ({
    __proto__: dart.getMethods(notification_action._DarwinNotificationActionType.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(notification_action._DarwinNotificationActionType, I[30]);
  dart.setStaticFieldSignature(notification_action._DarwinNotificationActionType, () => ['values', 'plain', 'text']);
  dart.defineLazy(notification_action._DarwinNotificationActionType, {
    /*notification_action._DarwinNotificationActionType.values*/get values() {
      return C[118] || CT.C118;
    },
    /*notification_action._DarwinNotificationActionType.plain*/get plain() {
      return C[119] || CT.C119;
    },
    /*notification_action._DarwinNotificationActionType.text*/get text() {
      return C[120] || CT.C120;
    }
  }, false);
  var type$ = dart.privateName(notification_action, "DarwinNotificationAction.type");
  var identifier$ = dart.privateName(notification_action, "DarwinNotificationAction.identifier");
  var title$0 = dart.privateName(notification_action, "DarwinNotificationAction.title");
  var options$ = dart.privateName(notification_action, "DarwinNotificationAction.options");
  var buttonTitle$ = dart.privateName(notification_action, "DarwinNotificationAction.buttonTitle");
  var placeholder$ = dart.privateName(notification_action, "DarwinNotificationAction.placeholder");
  notification_action.DarwinNotificationAction = class DarwinNotificationAction extends core.Object {
    get type() {
      return this[type$];
    }
    set type(value) {
      super.type = value;
    }
    get identifier() {
      return this[identifier$];
    }
    set identifier(value) {
      super.identifier = value;
    }
    get title() {
      return this[title$0];
    }
    set title(value) {
      super.title = value;
    }
    get options() {
      return this[options$];
    }
    set options(value) {
      super.options = value;
    }
    get buttonTitle() {
      return this[buttonTitle$];
    }
    set buttonTitle(value) {
      super.buttonTitle = value;
    }
    get placeholder() {
      return this[placeholder$];
    }
    set placeholder(value) {
      super.placeholder = value;
    }
    static plain(identifier, title, opts) {
      let options = opts && 'options' in opts ? opts.options : C[121] || CT.C121;
      return new notification_action.DarwinNotificationAction.__(notification_action._DarwinNotificationActionType.plain, identifier, title, {options: options});
    }
    static ['_#plain#tearOff'](identifier, title, opts) {
      let options = opts && 'options' in opts ? opts.options : C[121] || CT.C121;
      return notification_action.DarwinNotificationAction.plain(identifier, title, {options: options});
    }
    static text(identifier, title, opts) {
      let buttonTitle = opts && 'buttonTitle' in opts ? opts.buttonTitle : null;
      let placeholder = opts && 'placeholder' in opts ? opts.placeholder : null;
      let options = opts && 'options' in opts ? opts.options : C[121] || CT.C121;
      return new notification_action.DarwinNotificationAction.__(notification_action._DarwinNotificationActionType.text, identifier, title, {buttonTitle: buttonTitle, placeholder: placeholder, options: options});
    }
    static ['_#text#tearOff'](identifier, title, opts) {
      let buttonTitle = opts && 'buttonTitle' in opts ? opts.buttonTitle : null;
      let placeholder = opts && 'placeholder' in opts ? opts.placeholder : null;
      let options = opts && 'options' in opts ? opts.options : C[121] || CT.C121;
      return notification_action.DarwinNotificationAction.text(identifier, title, {buttonTitle: buttonTitle, placeholder: placeholder, options: options});
    }
    static ['_#_#tearOff'](type, identifier, title, opts) {
      let options = opts && 'options' in opts ? opts.options : C[121] || CT.C121;
      let buttonTitle = opts && 'buttonTitle' in opts ? opts.buttonTitle : null;
      let placeholder = opts && 'placeholder' in opts ? opts.placeholder : null;
      return new notification_action.DarwinNotificationAction.__(type, identifier, title, {options: options, buttonTitle: buttonTitle, placeholder: placeholder});
    }
  };
  (notification_action.DarwinNotificationAction.__ = function(type, identifier, title, opts) {
    let options = opts && 'options' in opts ? opts.options : C[121] || CT.C121;
    let buttonTitle = opts && 'buttonTitle' in opts ? opts.buttonTitle : null;
    let placeholder = opts && 'placeholder' in opts ? opts.placeholder : null;
    this[type$] = type;
    this[identifier$] = identifier;
    this[title$0] = title;
    this[options$] = options;
    this[buttonTitle$] = buttonTitle;
    this[placeholder$] = placeholder;
    ;
  }).prototype = notification_action.DarwinNotificationAction.prototype;
  dart.addTypeTests(notification_action.DarwinNotificationAction);
  dart.addTypeCaches(notification_action.DarwinNotificationAction);
  dart.setStaticMethodSignature(notification_action.DarwinNotificationAction, () => ['plain', 'text']);
  dart.setLibraryUri(notification_action.DarwinNotificationAction, I[30]);
  dart.setFieldSignature(notification_action.DarwinNotificationAction, () => ({
    __proto__: dart.getFields(notification_action.DarwinNotificationAction.__proto__),
    type: dart.finalFieldType(notification_action._DarwinNotificationActionType),
    identifier: dart.finalFieldType(core.String),
    title: dart.finalFieldType(core.String),
    options: dart.finalFieldType(core.Set$(notification_action_option.DarwinNotificationActionOption)),
    buttonTitle: dart.finalFieldType(dart.nullable(core.String)),
    placeholder: dart.finalFieldType(dart.nullable(core.String))
  }));
  notification_action_option.DarwinNotificationActionOption = class DarwinNotificationActionOption extends core._Enum {
    [_enumToString]() {
      return "DarwinNotificationActionOption." + this[_name];
    }
  };
  (notification_action_option.DarwinNotificationActionOption.new = function(index, name) {
    notification_action_option.DarwinNotificationActionOption.__proto__.new.call(this, index, name);
    ;
  }).prototype = notification_action_option.DarwinNotificationActionOption.prototype;
  dart.addTypeTests(notification_action_option.DarwinNotificationActionOption);
  dart.addTypeCaches(notification_action_option.DarwinNotificationActionOption);
  dart.setMethodSignature(notification_action_option.DarwinNotificationActionOption, () => ({
    __proto__: dart.getMethods(notification_action_option.DarwinNotificationActionOption.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(notification_action_option.DarwinNotificationActionOption, I[31]);
  dart.setStaticFieldSignature(notification_action_option.DarwinNotificationActionOption, () => ['values', 'authenticationRequired', 'destructive', 'foreground']);
  dart.defineLazy(notification_action_option.DarwinNotificationActionOption, {
    /*notification_action_option.DarwinNotificationActionOption.values*/get values() {
      return C[122] || CT.C122;
    },
    /*notification_action_option.DarwinNotificationActionOption.authenticationRequired*/get authenticationRequired() {
      return C[123] || CT.C123;
    },
    /*notification_action_option.DarwinNotificationActionOption.destructive*/get destructive() {
      return C[124] || CT.C124;
    },
    /*notification_action_option.DarwinNotificationActionOption.foreground*/get foreground() {
      return C[125] || CT.C125;
    }
  }, false);
  var filePath$ = dart.privateName(notification_attachment, "DarwinNotificationAttachment.filePath");
  var identifier$0 = dart.privateName(notification_attachment, "DarwinNotificationAttachment.identifier");
  notification_attachment.DarwinNotificationAttachment = class DarwinNotificationAttachment extends core.Object {
    get filePath() {
      return this[filePath$];
    }
    set filePath(value) {
      super.filePath = value;
    }
    get identifier() {
      return this[identifier$0];
    }
    set identifier(value) {
      super.identifier = value;
    }
    static ['_#new#tearOff'](filePath, opts) {
      let identifier = opts && 'identifier' in opts ? opts.identifier : null;
      return new notification_attachment.DarwinNotificationAttachment.new(filePath, {identifier: identifier});
    }
  };
  (notification_attachment.DarwinNotificationAttachment.new = function(filePath, opts) {
    let identifier = opts && 'identifier' in opts ? opts.identifier : null;
    this[filePath$] = filePath;
    this[identifier$0] = identifier;
    ;
  }).prototype = notification_attachment.DarwinNotificationAttachment.prototype;
  dart.addTypeTests(notification_attachment.DarwinNotificationAttachment);
  dart.addTypeCaches(notification_attachment.DarwinNotificationAttachment);
  dart.setLibraryUri(notification_attachment.DarwinNotificationAttachment, I[32]);
  dart.setFieldSignature(notification_attachment.DarwinNotificationAttachment, () => ({
    __proto__: dart.getFields(notification_attachment.DarwinNotificationAttachment.__proto__),
    filePath: dart.finalFieldType(core.String),
    identifier: dart.finalFieldType(dart.nullable(core.String))
  }));
  var identifier$1 = dart.privateName(notification_category, "DarwinNotificationCategory.identifier");
  var actions$0 = dart.privateName(notification_category, "DarwinNotificationCategory.actions");
  var options$0 = dart.privateName(notification_category, "DarwinNotificationCategory.options");
  notification_category.DarwinNotificationCategory = class DarwinNotificationCategory extends core.Object {
    get identifier() {
      return this[identifier$1];
    }
    set identifier(value) {
      super.identifier = value;
    }
    get actions() {
      return this[actions$0];
    }
    set actions(value) {
      super.actions = value;
    }
    get options() {
      return this[options$0];
    }
    set options(value) {
      super.options = value;
    }
    static ['_#new#tearOff'](identifier, opts) {
      let actions = opts && 'actions' in opts ? opts.actions : C[126] || CT.C126;
      let options = opts && 'options' in opts ? opts.options : C[127] || CT.C127;
      return new notification_category.DarwinNotificationCategory.new(identifier, {actions: actions, options: options});
    }
  };
  (notification_category.DarwinNotificationCategory.new = function(identifier, opts) {
    let actions = opts && 'actions' in opts ? opts.actions : C[126] || CT.C126;
    let options = opts && 'options' in opts ? opts.options : C[127] || CT.C127;
    this[identifier$1] = identifier;
    this[actions$0] = actions;
    this[options$0] = options;
    ;
  }).prototype = notification_category.DarwinNotificationCategory.prototype;
  dart.addTypeTests(notification_category.DarwinNotificationCategory);
  dart.addTypeCaches(notification_category.DarwinNotificationCategory);
  dart.setLibraryUri(notification_category.DarwinNotificationCategory, I[33]);
  dart.setFieldSignature(notification_category.DarwinNotificationCategory, () => ({
    __proto__: dart.getFields(notification_category.DarwinNotificationCategory.__proto__),
    identifier: dart.finalFieldType(core.String),
    actions: dart.finalFieldType(core.List$(notification_action.DarwinNotificationAction)),
    options: dart.finalFieldType(core.Set$(notification_category_option.DarwinNotificationCategoryOption))
  }));
  notification_category_option.DarwinNotificationCategoryOption = class DarwinNotificationCategoryOption extends core._Enum {
    [_enumToString]() {
      return "DarwinNotificationCategoryOption." + this[_name];
    }
  };
  (notification_category_option.DarwinNotificationCategoryOption.new = function(index, name) {
    notification_category_option.DarwinNotificationCategoryOption.__proto__.new.call(this, index, name);
    ;
  }).prototype = notification_category_option.DarwinNotificationCategoryOption.prototype;
  dart.addTypeTests(notification_category_option.DarwinNotificationCategoryOption);
  dart.addTypeCaches(notification_category_option.DarwinNotificationCategoryOption);
  dart.setMethodSignature(notification_category_option.DarwinNotificationCategoryOption, () => ({
    __proto__: dart.getMethods(notification_category_option.DarwinNotificationCategoryOption.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(notification_category_option.DarwinNotificationCategoryOption, I[34]);
  dart.setStaticFieldSignature(notification_category_option.DarwinNotificationCategoryOption, () => ['values', 'customDismissAction', 'allowInCarPlay', 'hiddenPreviewShowTitle', 'hiddenPreviewShowSubtitle', 'allowAnnouncement']);
  dart.defineLazy(notification_category_option.DarwinNotificationCategoryOption, {
    /*notification_category_option.DarwinNotificationCategoryOption.values*/get values() {
      return C[128] || CT.C128;
    },
    /*notification_category_option.DarwinNotificationCategoryOption.customDismissAction*/get customDismissAction() {
      return C[129] || CT.C129;
    },
    /*notification_category_option.DarwinNotificationCategoryOption.allowInCarPlay*/get allowInCarPlay() {
      return C[130] || CT.C130;
    },
    /*notification_category_option.DarwinNotificationCategoryOption.hiddenPreviewShowTitle*/get hiddenPreviewShowTitle() {
      return C[131] || CT.C131;
    },
    /*notification_category_option.DarwinNotificationCategoryOption.hiddenPreviewShowSubtitle*/get hiddenPreviewShowSubtitle() {
      return C[132] || CT.C132;
    },
    /*notification_category_option.DarwinNotificationCategoryOption.allowAnnouncement*/get allowAnnouncement() {
      return C[133] || CT.C133;
    }
  }, false);
  var presentAlert$ = dart.privateName(notification_details$0, "DarwinNotificationDetails.presentAlert");
  var presentSound$ = dart.privateName(notification_details$0, "DarwinNotificationDetails.presentSound");
  var presentBadge$ = dart.privateName(notification_details$0, "DarwinNotificationDetails.presentBadge");
  var sound$1 = dart.privateName(notification_details$0, "DarwinNotificationDetails.sound");
  var badgeNumber$ = dart.privateName(notification_details$0, "DarwinNotificationDetails.badgeNumber");
  var attachments$ = dart.privateName(notification_details$0, "DarwinNotificationDetails.attachments");
  var subtitle$ = dart.privateName(notification_details$0, "DarwinNotificationDetails.subtitle");
  var threadIdentifier$ = dart.privateName(notification_details$0, "DarwinNotificationDetails.threadIdentifier");
  var categoryIdentifier$ = dart.privateName(notification_details$0, "DarwinNotificationDetails.categoryIdentifier");
  var interruptionLevel$ = dart.privateName(notification_details$0, "DarwinNotificationDetails.interruptionLevel");
  notification_details$0.DarwinNotificationDetails = class DarwinNotificationDetails extends core.Object {
    get presentAlert() {
      return this[presentAlert$];
    }
    set presentAlert(value) {
      super.presentAlert = value;
    }
    get presentSound() {
      return this[presentSound$];
    }
    set presentSound(value) {
      super.presentSound = value;
    }
    get presentBadge() {
      return this[presentBadge$];
    }
    set presentBadge(value) {
      super.presentBadge = value;
    }
    get sound() {
      return this[sound$1];
    }
    set sound(value) {
      super.sound = value;
    }
    get badgeNumber() {
      return this[badgeNumber$];
    }
    set badgeNumber(value) {
      super.badgeNumber = value;
    }
    get attachments() {
      return this[attachments$];
    }
    set attachments(value) {
      super.attachments = value;
    }
    get subtitle() {
      return this[subtitle$];
    }
    set subtitle(value) {
      super.subtitle = value;
    }
    get threadIdentifier() {
      return this[threadIdentifier$];
    }
    set threadIdentifier(value) {
      super.threadIdentifier = value;
    }
    get categoryIdentifier() {
      return this[categoryIdentifier$];
    }
    set categoryIdentifier(value) {
      super.categoryIdentifier = value;
    }
    get interruptionLevel() {
      return this[interruptionLevel$];
    }
    set interruptionLevel(value) {
      super.interruptionLevel = value;
    }
    static ['_#new#tearOff'](opts) {
      let presentAlert = opts && 'presentAlert' in opts ? opts.presentAlert : null;
      let presentBadge = opts && 'presentBadge' in opts ? opts.presentBadge : null;
      let presentSound = opts && 'presentSound' in opts ? opts.presentSound : null;
      let sound = opts && 'sound' in opts ? opts.sound : null;
      let badgeNumber = opts && 'badgeNumber' in opts ? opts.badgeNumber : null;
      let attachments = opts && 'attachments' in opts ? opts.attachments : null;
      let subtitle = opts && 'subtitle' in opts ? opts.subtitle : null;
      let threadIdentifier = opts && 'threadIdentifier' in opts ? opts.threadIdentifier : null;
      let categoryIdentifier = opts && 'categoryIdentifier' in opts ? opts.categoryIdentifier : null;
      let interruptionLevel = opts && 'interruptionLevel' in opts ? opts.interruptionLevel : null;
      return new notification_details$0.DarwinNotificationDetails.new({presentAlert: presentAlert, presentBadge: presentBadge, presentSound: presentSound, sound: sound, badgeNumber: badgeNumber, attachments: attachments, subtitle: subtitle, threadIdentifier: threadIdentifier, categoryIdentifier: categoryIdentifier, interruptionLevel: interruptionLevel});
    }
  };
  (notification_details$0.DarwinNotificationDetails.new = function(opts) {
    let presentAlert = opts && 'presentAlert' in opts ? opts.presentAlert : null;
    let presentBadge = opts && 'presentBadge' in opts ? opts.presentBadge : null;
    let presentSound = opts && 'presentSound' in opts ? opts.presentSound : null;
    let sound = opts && 'sound' in opts ? opts.sound : null;
    let badgeNumber = opts && 'badgeNumber' in opts ? opts.badgeNumber : null;
    let attachments = opts && 'attachments' in opts ? opts.attachments : null;
    let subtitle = opts && 'subtitle' in opts ? opts.subtitle : null;
    let threadIdentifier = opts && 'threadIdentifier' in opts ? opts.threadIdentifier : null;
    let categoryIdentifier = opts && 'categoryIdentifier' in opts ? opts.categoryIdentifier : null;
    let interruptionLevel = opts && 'interruptionLevel' in opts ? opts.interruptionLevel : null;
    this[presentAlert$] = presentAlert;
    this[presentBadge$] = presentBadge;
    this[presentSound$] = presentSound;
    this[sound$1] = sound;
    this[badgeNumber$] = badgeNumber;
    this[attachments$] = attachments;
    this[subtitle$] = subtitle;
    this[threadIdentifier$] = threadIdentifier;
    this[categoryIdentifier$] = categoryIdentifier;
    this[interruptionLevel$] = interruptionLevel;
    ;
  }).prototype = notification_details$0.DarwinNotificationDetails.prototype;
  dart.addTypeTests(notification_details$0.DarwinNotificationDetails);
  dart.addTypeCaches(notification_details$0.DarwinNotificationDetails);
  dart.setLibraryUri(notification_details$0.DarwinNotificationDetails, I[35]);
  dart.setFieldSignature(notification_details$0.DarwinNotificationDetails, () => ({
    __proto__: dart.getFields(notification_details$0.DarwinNotificationDetails.__proto__),
    presentAlert: dart.finalFieldType(dart.nullable(core.bool)),
    presentSound: dart.finalFieldType(dart.nullable(core.bool)),
    presentBadge: dart.finalFieldType(dart.nullable(core.bool)),
    sound: dart.finalFieldType(dart.nullable(core.String)),
    badgeNumber: dart.finalFieldType(dart.nullable(core.int)),
    attachments: dart.finalFieldType(dart.nullable(core.List$(notification_attachment.DarwinNotificationAttachment))),
    subtitle: dart.finalFieldType(dart.nullable(core.String)),
    threadIdentifier: dart.finalFieldType(dart.nullable(core.String)),
    categoryIdentifier: dart.finalFieldType(dart.nullable(core.String)),
    interruptionLevel: dart.finalFieldType(dart.nullable(interruption_level.InterruptionLevel))
  }));
  enums$.UILocalNotificationDateInterpretation = class UILocalNotificationDateInterpretation extends core._Enum {
    [_enumToString]() {
      return "UILocalNotificationDateInterpretation." + this[_name];
    }
  };
  (enums$.UILocalNotificationDateInterpretation.new = function(index, name) {
    enums$.UILocalNotificationDateInterpretation.__proto__.new.call(this, index, name);
    ;
  }).prototype = enums$.UILocalNotificationDateInterpretation.prototype;
  dart.addTypeTests(enums$.UILocalNotificationDateInterpretation);
  dart.addTypeCaches(enums$.UILocalNotificationDateInterpretation);
  dart.setMethodSignature(enums$.UILocalNotificationDateInterpretation, () => ({
    __proto__: dart.getMethods(enums$.UILocalNotificationDateInterpretation.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(enums$.UILocalNotificationDateInterpretation, I[36]);
  dart.setStaticFieldSignature(enums$.UILocalNotificationDateInterpretation, () => ['values', 'absoluteTime', 'wallClockTime']);
  dart.defineLazy(enums$.UILocalNotificationDateInterpretation, {
    /*enums$.UILocalNotificationDateInterpretation.values*/get values() {
      return C[134] || CT.C134;
    },
    /*enums$.UILocalNotificationDateInterpretation.absoluteTime*/get absoluteTime() {
      return C[135] || CT.C135;
    },
    /*enums$.UILocalNotificationDateInterpretation.wallClockTime*/get wallClockTime() {
      return C[136] || CT.C136;
    }
  }, false);
  var value$5 = dart.privateName(types, "Day.value");
  types.Day = class Day extends core.Object {
    get value() {
      return this[value$5];
    }
    set value(value) {
      super.value = value;
    }
    static ['_#new#tearOff'](value) {
      return new types.Day.new(value);
    }
    static get values() {
      return T.JSArrayOfDay().of([types.Day.sunday, types.Day.monday, types.Day.tuesday, types.Day.wednesday, types.Day.thursday, types.Day.friday, types.Day.saturday]);
    }
  };
  (types.Day.new = function(value) {
    this[value$5] = value;
    ;
  }).prototype = types.Day.prototype;
  dart.addTypeTests(types.Day);
  dart.addTypeCaches(types.Day);
  dart.setStaticGetterSignature(types.Day, () => ['values']);
  dart.setLibraryUri(types.Day, I[37]);
  dart.setFieldSignature(types.Day, () => ({
    __proto__: dart.getFields(types.Day.__proto__),
    value: dart.finalFieldType(core.int)
  }));
  dart.setStaticFieldSignature(types.Day, () => ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday']);
  dart.defineLazy(types.Day, {
    /*types.Day.sunday*/get sunday() {
      return C[137] || CT.C137;
    },
    /*types.Day.monday*/get monday() {
      return C[138] || CT.C138;
    },
    /*types.Day.tuesday*/get tuesday() {
      return C[139] || CT.C139;
    },
    /*types.Day.wednesday*/get wednesday() {
      return C[140] || CT.C140;
    },
    /*types.Day.thursday*/get thursday() {
      return C[141] || CT.C141;
    },
    /*types.Day.friday*/get friday() {
      return C[142] || CT.C142;
    },
    /*types.Day.saturday*/get saturday() {
      return C[143] || CT.C143;
    }
  }, false);
  var hour$ = dart.privateName(types, "Time.hour");
  var minute$ = dart.privateName(types, "Time.minute");
  var second$ = dart.privateName(types, "Time.second");
  types.Time = class Time extends core.Object {
    get hour() {
      return this[hour$];
    }
    set hour(value) {
      super.hour = value;
    }
    get minute() {
      return this[minute$];
    }
    set minute(value) {
      super.minute = value;
    }
    get second() {
      return this[second$];
    }
    set second(value) {
      super.second = value;
    }
    static ['_#new#tearOff'](hour = 0, minute = 0, second = 0) {
      return new types.Time.new(hour, minute, second);
    }
  };
  (types.Time.new = function(hour = 0, minute = 0, second = 0) {
    this[hour$] = hour;
    this[minute$] = minute;
    this[second$] = second;
    if (!(hour >= 0 && hour < 24)) dart.assertFailed(null, I[38], 42, 16, "hour >= 0 && hour < 24");
    if (!(minute >= 0 && minute < 60)) dart.assertFailed(null, I[38], 43, 16, "minute >= 0 && minute < 60");
    if (!(second >= 0 && second < 60)) dart.assertFailed(null, I[38], 44, 16, "second >= 0 && second < 60");
    ;
  }).prototype = types.Time.prototype;
  dart.addTypeTests(types.Time);
  dart.addTypeCaches(types.Time);
  dart.setLibraryUri(types.Time, I[37]);
  dart.setFieldSignature(types.Time, () => ({
    __proto__: dart.getFields(types.Time.__proto__),
    hour: dart.finalFieldType(core.int),
    minute: dart.finalFieldType(core.int),
    second: dart.finalFieldType(core.int)
  }));
  types.DateTimeComponents = class DateTimeComponents extends core._Enum {
    [_enumToString]() {
      return "DateTimeComponents." + this[_name];
    }
  };
  (types.DateTimeComponents.new = function(index, name) {
    types.DateTimeComponents.__proto__.new.call(this, index, name);
    ;
  }).prototype = types.DateTimeComponents.prototype;
  dart.addTypeTests(types.DateTimeComponents);
  dart.addTypeCaches(types.DateTimeComponents);
  dart.setMethodSignature(types.DateTimeComponents, () => ({
    __proto__: dart.getMethods(types.DateTimeComponents.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(types.DateTimeComponents, I[37]);
  dart.setStaticFieldSignature(types.DateTimeComponents, () => ['values', 'time', 'dayOfWeekAndTime', 'dayOfMonthAndTime', 'dateAndTime']);
  dart.defineLazy(types.DateTimeComponents, {
    /*types.DateTimeComponents.values*/get values() {
      return C[144] || CT.C144;
    },
    /*types.DateTimeComponents.time*/get time() {
      return C[145] || CT.C145;
    },
    /*types.DateTimeComponents.dayOfWeekAndTime*/get dayOfWeekAndTime() {
      return C[146] || CT.C146;
    },
    /*types.DateTimeComponents.dayOfMonthAndTime*/get dayOfMonthAndTime() {
      return C[147] || CT.C147;
    },
    /*types.DateTimeComponents.dateAndTime*/get dateAndTime() {
      return C[148] || CT.C148;
    }
  }, false);
  flutter_local_notifications_platform_linux.FlutterLocalNotificationsPlatformLinux = class FlutterLocalNotificationsPlatformLinux extends flutter_local_notifications_platform_interface.FlutterLocalNotificationsPlatform {};
  (flutter_local_notifications_platform_linux.FlutterLocalNotificationsPlatformLinux.new = function() {
    flutter_local_notifications_platform_linux.FlutterLocalNotificationsPlatformLinux.__proto__.new.call(this);
    ;
  }).prototype = flutter_local_notifications_platform_linux.FlutterLocalNotificationsPlatformLinux.prototype;
  dart.addTypeTests(flutter_local_notifications_platform_linux.FlutterLocalNotificationsPlatformLinux);
  dart.addTypeCaches(flutter_local_notifications_platform_linux.FlutterLocalNotificationsPlatformLinux);
  dart.setLibraryUri(flutter_local_notifications_platform_linux.FlutterLocalNotificationsPlatformLinux, I[40]);
  flutter_local_notifications_stub.LinuxFlutterLocalNotificationsPlugin = class LinuxFlutterLocalNotificationsPlugin extends flutter_local_notifications_platform_linux.FlutterLocalNotificationsPlatformLinux {
    static ['_#new#tearOff']() {
      return new flutter_local_notifications_stub.LinuxFlutterLocalNotificationsPlugin.new();
    }
    initialize(initializationSettings, opts) {
      let onDidReceiveNotificationResponse = opts && 'onDidReceiveNotificationResponse' in opts ? opts.onDidReceiveNotificationResponse : null;
      return async.async(T.boolN(), function* initialize() {
        if (!false) dart.assertFailed(null, I[39], 28, 12, "false");
        return null;
      });
    }
    show(id, title, body, opts) {
      let notificationDetails = opts && 'notificationDetails' in opts ? opts.notificationDetails : null;
      let payload = opts && 'payload' in opts ? opts.payload : null;
      return async.async(dart.void, function* show() {
        if (!false) dart.assertFailed(null, I[39], 42, 12, "false");
      });
    }
    getCapabilities() {
      return async.async(capabilities.LinuxServerCapabilities, function* getCapabilities() {
        if (!false) dart.assertFailed(null, I[39], 49, 12, "false");
        dart.throw(new core.UnimplementedError.new());
      });
    }
    getSystemIdMap() {
      return async.async(T.MapOfint$int(), function* getSystemIdMap() {
        if (!false) dart.assertFailed(null, I[39], 57, 12, "false");
        dart.throw(new core.UnimplementedError.new());
      });
    }
  };
  (flutter_local_notifications_stub.LinuxFlutterLocalNotificationsPlugin.new = function() {
    if (!false) dart.assertFailed(null, I[39], 19, 51, "false");
    flutter_local_notifications_stub.LinuxFlutterLocalNotificationsPlugin.__proto__.new.call(this);
    ;
  }).prototype = flutter_local_notifications_stub.LinuxFlutterLocalNotificationsPlugin.prototype;
  dart.addTypeTests(flutter_local_notifications_stub.LinuxFlutterLocalNotificationsPlugin);
  dart.addTypeCaches(flutter_local_notifications_stub.LinuxFlutterLocalNotificationsPlugin);
  dart.setMethodSignature(flutter_local_notifications_stub.LinuxFlutterLocalNotificationsPlugin, () => ({
    __proto__: dart.getMethods(flutter_local_notifications_stub.LinuxFlutterLocalNotificationsPlugin.__proto__),
    initialize: dart.fnType(async.Future$(dart.nullable(core.bool)), [initialization_settings$1.LinuxInitializationSettings], {onDidReceiveNotificationResponse: dart.nullable(dart.fnType(dart.void, [types$.NotificationResponse]))}, {}),
    show: dart.fnType(async.Future$(dart.void), [core.int, dart.nullable(core.String), dart.nullable(core.String)], {notificationDetails: dart.nullable(notification_details$1.LinuxNotificationDetails), payload: dart.nullable(core.String)}, {}),
    getCapabilities: dart.fnType(async.Future$(capabilities.LinuxServerCapabilities), []),
    getSystemIdMap: dart.fnType(async.Future$(core.Map$(core.int, core.int)), [])
  }));
  dart.setLibraryUri(flutter_local_notifications_stub.LinuxFlutterLocalNotificationsPlugin, I[41]);
  var otherCapabilities$ = dart.privateName(capabilities, "LinuxServerCapabilities.otherCapabilities");
  var body$ = dart.privateName(capabilities, "LinuxServerCapabilities.body");
  var bodyHyperlinks$ = dart.privateName(capabilities, "LinuxServerCapabilities.bodyHyperlinks");
  var bodyImages$ = dart.privateName(capabilities, "LinuxServerCapabilities.bodyImages");
  var bodyMarkup$ = dart.privateName(capabilities, "LinuxServerCapabilities.bodyMarkup");
  var iconMulti$ = dart.privateName(capabilities, "LinuxServerCapabilities.iconMulti");
  var iconStatic$ = dart.privateName(capabilities, "LinuxServerCapabilities.iconStatic");
  var persistence$ = dart.privateName(capabilities, "LinuxServerCapabilities.persistence");
  var sound$2 = dart.privateName(capabilities, "LinuxServerCapabilities.sound");
  var actions$1 = dart.privateName(capabilities, "LinuxServerCapabilities.actions");
  var actionIcons$ = dart.privateName(capabilities, "LinuxServerCapabilities.actionIcons");
  capabilities.LinuxServerCapabilities = class LinuxServerCapabilities extends core.Object {
    get otherCapabilities() {
      return this[otherCapabilities$];
    }
    set otherCapabilities(value) {
      super.otherCapabilities = value;
    }
    get body() {
      return this[body$];
    }
    set body(value) {
      super.body = value;
    }
    get bodyHyperlinks() {
      return this[bodyHyperlinks$];
    }
    set bodyHyperlinks(value) {
      super.bodyHyperlinks = value;
    }
    get bodyImages() {
      return this[bodyImages$];
    }
    set bodyImages(value) {
      super.bodyImages = value;
    }
    get bodyMarkup() {
      return this[bodyMarkup$];
    }
    set bodyMarkup(value) {
      super.bodyMarkup = value;
    }
    get iconMulti() {
      return this[iconMulti$];
    }
    set iconMulti(value) {
      super.iconMulti = value;
    }
    get iconStatic() {
      return this[iconStatic$];
    }
    set iconStatic(value) {
      super.iconStatic = value;
    }
    get persistence() {
      return this[persistence$];
    }
    set persistence(value) {
      super.persistence = value;
    }
    get sound() {
      return this[sound$2];
    }
    set sound(value) {
      super.sound = value;
    }
    get actions() {
      return this[actions$1];
    }
    set actions(value) {
      super.actions = value;
    }
    get actionIcons() {
      return this[actionIcons$];
    }
    set actionIcons(value) {
      super.actionIcons = value;
    }
    static ['_#new#tearOff'](opts) {
      let otherCapabilities = opts && 'otherCapabilities' in opts ? opts.otherCapabilities : null;
      let body = opts && 'body' in opts ? opts.body : null;
      let bodyHyperlinks = opts && 'bodyHyperlinks' in opts ? opts.bodyHyperlinks : null;
      let bodyImages = opts && 'bodyImages' in opts ? opts.bodyImages : null;
      let bodyMarkup = opts && 'bodyMarkup' in opts ? opts.bodyMarkup : null;
      let iconMulti = opts && 'iconMulti' in opts ? opts.iconMulti : null;
      let iconStatic = opts && 'iconStatic' in opts ? opts.iconStatic : null;
      let persistence = opts && 'persistence' in opts ? opts.persistence : null;
      let sound = opts && 'sound' in opts ? opts.sound : null;
      let actions = opts && 'actions' in opts ? opts.actions : null;
      let actionIcons = opts && 'actionIcons' in opts ? opts.actionIcons : null;
      return new capabilities.LinuxServerCapabilities.new({otherCapabilities: otherCapabilities, body: body, bodyHyperlinks: bodyHyperlinks, bodyImages: bodyImages, bodyMarkup: bodyMarkup, iconMulti: iconMulti, iconStatic: iconStatic, persistence: persistence, sound: sound, actions: actions, actionIcons: actionIcons});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      return capabilities.LinuxServerCapabilities.is(other) && collections.setEquals(core.String, other.otherCapabilities, this.otherCapabilities) && other.body === this.body && other.bodyHyperlinks === this.bodyHyperlinks && other.bodyImages === this.bodyImages && other.bodyMarkup === this.bodyMarkup && other.iconMulti === this.iconMulti && other.iconStatic === this.iconStatic && other.persistence === this.persistence && other.sound === this.sound && other.actions === this.actions && other.actionIcons === this.actionIcons;
    }
    get hashCode() {
      return (this.otherCapabilities[$hashCode] ^ this.body[$hashCode] ^ this.bodyHyperlinks[$hashCode] ^ this.bodyImages[$hashCode] ^ this.bodyMarkup[$hashCode] ^ this.iconMulti[$hashCode] ^ this.iconStatic[$hashCode] ^ this.persistence[$hashCode] ^ this.sound[$hashCode] ^ this.actions[$hashCode] ^ this.actionIcons[$hashCode]) >>> 0;
    }
    copyWith(opts) {
      let t25, t25$, t25$0, t25$1, t25$2, t25$3, t25$4, t25$5, t25$6, t25$7, t25$8;
      let otherCapabilities = opts && 'otherCapabilities' in opts ? opts.otherCapabilities : null;
      let body = opts && 'body' in opts ? opts.body : null;
      let bodyHyperlinks = opts && 'bodyHyperlinks' in opts ? opts.bodyHyperlinks : null;
      let bodyImages = opts && 'bodyImages' in opts ? opts.bodyImages : null;
      let bodyMarkup = opts && 'bodyMarkup' in opts ? opts.bodyMarkup : null;
      let iconMulti = opts && 'iconMulti' in opts ? opts.iconMulti : null;
      let iconStatic = opts && 'iconStatic' in opts ? opts.iconStatic : null;
      let persistence = opts && 'persistence' in opts ? opts.persistence : null;
      let sound = opts && 'sound' in opts ? opts.sound : null;
      let actions = opts && 'actions' in opts ? opts.actions : null;
      let actionIcons = opts && 'actionIcons' in opts ? opts.actionIcons : null;
      return new capabilities.LinuxServerCapabilities.new({otherCapabilities: (t25 = otherCapabilities, t25 == null ? this.otherCapabilities : t25), body: (t25$ = body, t25$ == null ? this.body : t25$), bodyHyperlinks: (t25$0 = bodyHyperlinks, t25$0 == null ? this.bodyHyperlinks : t25$0), bodyImages: (t25$1 = bodyImages, t25$1 == null ? this.bodyImages : t25$1), bodyMarkup: (t25$2 = bodyMarkup, t25$2 == null ? this.bodyMarkup : t25$2), iconMulti: (t25$3 = iconMulti, t25$3 == null ? this.iconMulti : t25$3), iconStatic: (t25$4 = iconStatic, t25$4 == null ? this.iconStatic : t25$4), persistence: (t25$5 = persistence, t25$5 == null ? this.persistence : t25$5), sound: (t25$6 = sound, t25$6 == null ? this.sound : t25$6), actions: (t25$7 = actions, t25$7 == null ? this.actions : t25$7), actionIcons: (t25$8 = actionIcons, t25$8 == null ? this.actionIcons : t25$8)});
    }
    toString() {
      return "LinuxServerCapabilities(otherCapabilities: " + dart.str(this.otherCapabilities) + ", body: " + dart.str(this.body) + ", bodyHyperlinks: " + dart.str(this.bodyHyperlinks) + ", " + "bodyImages: " + dart.str(this.bodyImages) + ", bodyMarkup: " + dart.str(this.bodyMarkup) + ", " + "iconMulti: " + dart.str(this.iconMulti) + ", iconStatic: " + dart.str(this.iconStatic) + ", " + "persistence: " + dart.str(this.persistence) + ", sound: " + dart.str(this.sound) + ", actions: " + dart.str(this.actions) + ", " + "actionIcons: " + dart.str(this.actionIcons) + ")";
    }
  };
  (capabilities.LinuxServerCapabilities.new = function(opts) {
    let otherCapabilities = opts && 'otherCapabilities' in opts ? opts.otherCapabilities : null;
    let body = opts && 'body' in opts ? opts.body : null;
    let bodyHyperlinks = opts && 'bodyHyperlinks' in opts ? opts.bodyHyperlinks : null;
    let bodyImages = opts && 'bodyImages' in opts ? opts.bodyImages : null;
    let bodyMarkup = opts && 'bodyMarkup' in opts ? opts.bodyMarkup : null;
    let iconMulti = opts && 'iconMulti' in opts ? opts.iconMulti : null;
    let iconStatic = opts && 'iconStatic' in opts ? opts.iconStatic : null;
    let persistence = opts && 'persistence' in opts ? opts.persistence : null;
    let sound = opts && 'sound' in opts ? opts.sound : null;
    let actions = opts && 'actions' in opts ? opts.actions : null;
    let actionIcons = opts && 'actionIcons' in opts ? opts.actionIcons : null;
    this[otherCapabilities$] = otherCapabilities;
    this[body$] = body;
    this[bodyHyperlinks$] = bodyHyperlinks;
    this[bodyImages$] = bodyImages;
    this[bodyMarkup$] = bodyMarkup;
    this[iconMulti$] = iconMulti;
    this[iconStatic$] = iconStatic;
    this[persistence$] = persistence;
    this[sound$2] = sound;
    this[actions$1] = actions;
    this[actionIcons$] = actionIcons;
    ;
  }).prototype = capabilities.LinuxServerCapabilities.prototype;
  dart.addTypeTests(capabilities.LinuxServerCapabilities);
  dart.addTypeCaches(capabilities.LinuxServerCapabilities);
  dart.setMethodSignature(capabilities.LinuxServerCapabilities, () => ({
    __proto__: dart.getMethods(capabilities.LinuxServerCapabilities.__proto__),
    copyWith: dart.fnType(capabilities.LinuxServerCapabilities, [], {actionIcons: dart.nullable(core.bool), actions: dart.nullable(core.bool), body: dart.nullable(core.bool), bodyHyperlinks: dart.nullable(core.bool), bodyImages: dart.nullable(core.bool), bodyMarkup: dart.nullable(core.bool), iconMulti: dart.nullable(core.bool), iconStatic: dart.nullable(core.bool), otherCapabilities: dart.nullable(core.Set$(core.String)), persistence: dart.nullable(core.bool), sound: dart.nullable(core.bool)}, {})
  }));
  dart.setLibraryUri(capabilities.LinuxServerCapabilities, I[42]);
  dart.setFieldSignature(capabilities.LinuxServerCapabilities, () => ({
    __proto__: dart.getFields(capabilities.LinuxServerCapabilities.__proto__),
    otherCapabilities: dart.finalFieldType(core.Set$(core.String)),
    body: dart.finalFieldType(core.bool),
    bodyHyperlinks: dart.finalFieldType(core.bool),
    bodyImages: dart.finalFieldType(core.bool),
    bodyMarkup: dart.finalFieldType(core.bool),
    iconMulti: dart.finalFieldType(core.bool),
    iconStatic: dart.finalFieldType(core.bool),
    persistence: dart.finalFieldType(core.bool),
    sound: dart.finalFieldType(core.bool),
    actions: dart.finalFieldType(core.bool),
    actionIcons: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(capabilities.LinuxServerCapabilities, ['_equals', 'toString']);
  dart.defineExtensionAccessors(capabilities.LinuxServerCapabilities, ['hashCode']);
  var name$3 = dart.privateName(categories$, "LinuxNotificationCategory.name");
  categories$.LinuxNotificationCategory = class LinuxNotificationCategory extends core.Object {
    get name() {
      return this[name$3];
    }
    set name(value) {
      super.name = value;
    }
    static ['_#new#tearOff'](name) {
      return new categories$.LinuxNotificationCategory.new(name);
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      return categories$.LinuxNotificationCategory.is(other) && other.name === this.name;
    }
    get hashCode() {
      return this.name[$hashCode];
    }
    toString() {
      return "LinuxNotificationCategory(name: " + this.name + ")";
    }
  };
  (categories$.LinuxNotificationCategory.new = function(name) {
    this[name$3] = name;
    ;
  }).prototype = categories$.LinuxNotificationCategory.prototype;
  dart.addTypeTests(categories$.LinuxNotificationCategory);
  dart.addTypeCaches(categories$.LinuxNotificationCategory);
  dart.setLibraryUri(categories$.LinuxNotificationCategory, I[43]);
  dart.setFieldSignature(categories$.LinuxNotificationCategory, () => ({
    __proto__: dart.getFields(categories$.LinuxNotificationCategory.__proto__),
    name: dart.finalFieldType(core.String)
  }));
  dart.setStaticFieldSignature(categories$.LinuxNotificationCategory, () => ['device', 'deviceAdded', 'deviceError', 'deviceRemoved', 'email', 'emailArrived', 'emailBounced', 'im', 'imError', 'imReceived', 'network', 'networkConnected', 'networkDisconnected', 'networkError', 'presence', 'presenceOffile', 'presenceOnline', 'transfer', 'transferComplete', 'transferError']);
  dart.defineExtensionMethods(categories$.LinuxNotificationCategory, ['_equals', 'toString']);
  dart.defineExtensionAccessors(categories$.LinuxNotificationCategory, ['hashCode']);
  dart.defineLazy(categories$.LinuxNotificationCategory, {
    /*categories$.LinuxNotificationCategory.device*/get device() {
      return C[149] || CT.C149;
    },
    /*categories$.LinuxNotificationCategory.deviceAdded*/get deviceAdded() {
      return C[150] || CT.C150;
    },
    /*categories$.LinuxNotificationCategory.deviceError*/get deviceError() {
      return C[151] || CT.C151;
    },
    /*categories$.LinuxNotificationCategory.deviceRemoved*/get deviceRemoved() {
      return C[152] || CT.C152;
    },
    /*categories$.LinuxNotificationCategory.email*/get email() {
      return C[153] || CT.C153;
    },
    /*categories$.LinuxNotificationCategory.emailArrived*/get emailArrived() {
      return C[154] || CT.C154;
    },
    /*categories$.LinuxNotificationCategory.emailBounced*/get emailBounced() {
      return C[155] || CT.C155;
    },
    /*categories$.LinuxNotificationCategory.im*/get im() {
      return C[156] || CT.C156;
    },
    /*categories$.LinuxNotificationCategory.imError*/get imError() {
      return C[157] || CT.C157;
    },
    /*categories$.LinuxNotificationCategory.imReceived*/get imReceived() {
      return C[158] || CT.C158;
    },
    /*categories$.LinuxNotificationCategory.network*/get network() {
      return C[159] || CT.C159;
    },
    /*categories$.LinuxNotificationCategory.networkConnected*/get networkConnected() {
      return C[160] || CT.C160;
    },
    /*categories$.LinuxNotificationCategory.networkDisconnected*/get networkDisconnected() {
      return C[161] || CT.C161;
    },
    /*categories$.LinuxNotificationCategory.networkError*/get networkError() {
      return C[162] || CT.C162;
    },
    /*categories$.LinuxNotificationCategory.presence*/get presence() {
      return C[163] || CT.C163;
    },
    /*categories$.LinuxNotificationCategory.presenceOffile*/get presenceOffile() {
      return C[164] || CT.C164;
    },
    /*categories$.LinuxNotificationCategory.presenceOnline*/get presenceOnline() {
      return C[165] || CT.C165;
    },
    /*categories$.LinuxNotificationCategory.transfer*/get transfer() {
      return C[166] || CT.C166;
    },
    /*categories$.LinuxNotificationCategory.transferComplete*/get transferComplete() {
      return C[167] || CT.C167;
    },
    /*categories$.LinuxNotificationCategory.transferError*/get transferError() {
      return C[168] || CT.C168;
    }
  }, false);
  var value$6 = dart.privateName(enums$0, "LinuxNotificationUrgency.value");
  enums$0.LinuxNotificationUrgency = class LinuxNotificationUrgency extends core.Object {
    get value() {
      return this[value$6];
    }
    set value(value) {
      super.value = value;
    }
    static ['_#new#tearOff'](value) {
      return new enums$0.LinuxNotificationUrgency.new(value);
    }
    static get values() {
      return T.JSArrayOfLinuxNotificationUrgency().of([enums$0.LinuxNotificationUrgency.low, enums$0.LinuxNotificationUrgency.normal, enums$0.LinuxNotificationUrgency.critical]);
    }
  };
  (enums$0.LinuxNotificationUrgency.new = function(value) {
    this[value$6] = value;
    ;
  }).prototype = enums$0.LinuxNotificationUrgency.prototype;
  dart.addTypeTests(enums$0.LinuxNotificationUrgency);
  dart.addTypeCaches(enums$0.LinuxNotificationUrgency);
  dart.setStaticGetterSignature(enums$0.LinuxNotificationUrgency, () => ['values']);
  dart.setLibraryUri(enums$0.LinuxNotificationUrgency, I[44]);
  dart.setFieldSignature(enums$0.LinuxNotificationUrgency, () => ({
    __proto__: dart.getFields(enums$0.LinuxNotificationUrgency.__proto__),
    value: dart.finalFieldType(core.int)
  }));
  dart.setStaticFieldSignature(enums$0.LinuxNotificationUrgency, () => ['low', 'normal', 'critical']);
  dart.defineLazy(enums$0.LinuxNotificationUrgency, {
    /*enums$0.LinuxNotificationUrgency.low*/get low() {
      return C[169] || CT.C169;
    },
    /*enums$0.LinuxNotificationUrgency.normal*/get normal() {
      return C[170] || CT.C170;
    },
    /*enums$0.LinuxNotificationUrgency.critical*/get critical() {
      return C[171] || CT.C171;
    }
  }, false);
  enums$0.LinuxIconType = class LinuxIconType extends core._Enum {
    [_enumToString]() {
      return "LinuxIconType." + this[_name];
    }
  };
  (enums$0.LinuxIconType.new = function(index, name) {
    enums$0.LinuxIconType.__proto__.new.call(this, index, name);
    ;
  }).prototype = enums$0.LinuxIconType.prototype;
  dart.addTypeTests(enums$0.LinuxIconType);
  dart.addTypeCaches(enums$0.LinuxIconType);
  dart.setMethodSignature(enums$0.LinuxIconType, () => ({
    __proto__: dart.getMethods(enums$0.LinuxIconType.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(enums$0.LinuxIconType, I[44]);
  dart.setStaticFieldSignature(enums$0.LinuxIconType, () => ['values', 'assets', 'byteData', 'theme', 'filePath']);
  dart.defineLazy(enums$0.LinuxIconType, {
    /*enums$0.LinuxIconType.values*/get values() {
      return C[172] || CT.C172;
    },
    /*enums$0.LinuxIconType.assets*/get assets() {
      return C[173] || CT.C173;
    },
    /*enums$0.LinuxIconType.byteData*/get byteData() {
      return C[174] || CT.C174;
    },
    /*enums$0.LinuxIconType.theme*/get theme() {
      return C[175] || CT.C175;
    },
    /*enums$0.LinuxIconType.filePath*/get filePath() {
      return C[176] || CT.C176;
    }
  }, false);
  enums$0.LinuxSoundType = class LinuxSoundType extends core._Enum {
    [_enumToString]() {
      return "LinuxSoundType." + this[_name];
    }
  };
  (enums$0.LinuxSoundType.new = function(index, name) {
    enums$0.LinuxSoundType.__proto__.new.call(this, index, name);
    ;
  }).prototype = enums$0.LinuxSoundType.prototype;
  dart.addTypeTests(enums$0.LinuxSoundType);
  dart.addTypeCaches(enums$0.LinuxSoundType);
  dart.setMethodSignature(enums$0.LinuxSoundType, () => ({
    __proto__: dart.getMethods(enums$0.LinuxSoundType.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(enums$0.LinuxSoundType, I[44]);
  dart.setStaticFieldSignature(enums$0.LinuxSoundType, () => ['values', 'assets', 'theme']);
  dart.defineLazy(enums$0.LinuxSoundType, {
    /*enums$0.LinuxSoundType.values*/get values() {
      return C[177] || CT.C177;
    },
    /*enums$0.LinuxSoundType.assets*/get assets() {
      return C[178] || CT.C178;
    },
    /*enums$0.LinuxSoundType.theme*/get theme() {
      return C[179] || CT.C179;
    }
  }, false);
  enums$0.LinuxHintValueType = class LinuxHintValueType extends core._Enum {
    [_enumToString]() {
      return "LinuxHintValueType." + this[_name];
    }
  };
  (enums$0.LinuxHintValueType.new = function(index, name) {
    enums$0.LinuxHintValueType.__proto__.new.call(this, index, name);
    ;
  }).prototype = enums$0.LinuxHintValueType.prototype;
  dart.addTypeTests(enums$0.LinuxHintValueType);
  dart.addTypeCaches(enums$0.LinuxHintValueType);
  dart.setMethodSignature(enums$0.LinuxHintValueType, () => ({
    __proto__: dart.getMethods(enums$0.LinuxHintValueType.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(enums$0.LinuxHintValueType, I[44]);
  dart.setStaticFieldSignature(enums$0.LinuxHintValueType, () => ['values', 'array', 'boolean', 'byte', 'dict', 'double', 'int16', 'int32', 'int64', 'string', 'struct', 'uint16', 'uint32', 'uint64', 'variant']);
  dart.defineLazy(enums$0.LinuxHintValueType, {
    /*enums$0.LinuxHintValueType.values*/get values() {
      return C[180] || CT.C180;
    },
    /*enums$0.LinuxHintValueType.array*/get array() {
      return C[181] || CT.C181;
    },
    /*enums$0.LinuxHintValueType.boolean*/get boolean() {
      return C[182] || CT.C182;
    },
    /*enums$0.LinuxHintValueType.byte*/get byte() {
      return C[183] || CT.C183;
    },
    /*enums$0.LinuxHintValueType.dict*/get dict() {
      return C[184] || CT.C184;
    },
    /*enums$0.LinuxHintValueType.double*/get double() {
      return C[185] || CT.C185;
    },
    /*enums$0.LinuxHintValueType.int16*/get int16() {
      return C[186] || CT.C186;
    },
    /*enums$0.LinuxHintValueType.int32*/get int32() {
      return C[187] || CT.C187;
    },
    /*enums$0.LinuxHintValueType.int64*/get int64() {
      return C[188] || CT.C188;
    },
    /*enums$0.LinuxHintValueType.string*/get string() {
      return C[189] || CT.C189;
    },
    /*enums$0.LinuxHintValueType.struct*/get struct() {
      return C[190] || CT.C190;
    },
    /*enums$0.LinuxHintValueType.uint16*/get uint16() {
      return C[191] || CT.C191;
    },
    /*enums$0.LinuxHintValueType.uint32*/get uint32() {
      return C[192] || CT.C192;
    },
    /*enums$0.LinuxHintValueType.uint64*/get uint64() {
      return C[193] || CT.C193;
    },
    /*enums$0.LinuxHintValueType.variant*/get variant() {
      return C[194] || CT.C194;
    }
  }, false);
  icon$.LinuxNotificationIcon = class LinuxNotificationIcon extends core.Object {};
  (icon$.LinuxNotificationIcon.new = function() {
    ;
  }).prototype = icon$.LinuxNotificationIcon.prototype;
  dart.addTypeTests(icon$.LinuxNotificationIcon);
  dart.addTypeCaches(icon$.LinuxNotificationIcon);
  dart.setLibraryUri(icon$.LinuxNotificationIcon, I[45]);
  var relativePath$ = dart.privateName(icon$, "AssetsLinuxIcon.relativePath");
  icon$.AssetsLinuxIcon = class AssetsLinuxIcon extends icon$.LinuxNotificationIcon {
    get relativePath() {
      return this[relativePath$];
    }
    set relativePath(value) {
      super.relativePath = value;
    }
    static ['_#new#tearOff'](relativePath) {
      return new icon$.AssetsLinuxIcon.new(relativePath);
    }
    get content() {
      return this.relativePath;
    }
    get type() {
      return enums$0.LinuxIconType.assets;
    }
  };
  (icon$.AssetsLinuxIcon.new = function(relativePath) {
    this[relativePath$] = relativePath;
    ;
  }).prototype = icon$.AssetsLinuxIcon.prototype;
  dart.addTypeTests(icon$.AssetsLinuxIcon);
  dart.addTypeCaches(icon$.AssetsLinuxIcon);
  dart.setGetterSignature(icon$.AssetsLinuxIcon, () => ({
    __proto__: dart.getGetters(icon$.AssetsLinuxIcon.__proto__),
    content: core.Object,
    type: enums$0.LinuxIconType
  }));
  dart.setLibraryUri(icon$.AssetsLinuxIcon, I[45]);
  dart.setFieldSignature(icon$.AssetsLinuxIcon, () => ({
    __proto__: dart.getFields(icon$.AssetsLinuxIcon.__proto__),
    relativePath: dart.finalFieldType(core.String)
  }));
  var iconData$ = dart.privateName(icon$, "ByteDataLinuxIcon.iconData");
  icon$.ByteDataLinuxIcon = class ByteDataLinuxIcon extends icon$.LinuxNotificationIcon {
    get iconData() {
      return this[iconData$];
    }
    set iconData(value) {
      super.iconData = value;
    }
    static ['_#new#tearOff'](iconData) {
      return new icon$.ByteDataLinuxIcon.new(iconData);
    }
    get content() {
      return this.iconData;
    }
    get type() {
      return enums$0.LinuxIconType.byteData;
    }
  };
  (icon$.ByteDataLinuxIcon.new = function(iconData) {
    this[iconData$] = iconData;
    ;
  }).prototype = icon$.ByteDataLinuxIcon.prototype;
  dart.addTypeTests(icon$.ByteDataLinuxIcon);
  dart.addTypeCaches(icon$.ByteDataLinuxIcon);
  dart.setGetterSignature(icon$.ByteDataLinuxIcon, () => ({
    __proto__: dart.getGetters(icon$.ByteDataLinuxIcon.__proto__),
    content: core.Object,
    type: enums$0.LinuxIconType
  }));
  dart.setLibraryUri(icon$.ByteDataLinuxIcon, I[45]);
  dart.setFieldSignature(icon$.ByteDataLinuxIcon, () => ({
    __proto__: dart.getFields(icon$.ByteDataLinuxIcon.__proto__),
    iconData: dart.finalFieldType(icon$.LinuxRawIconData)
  }));
  var name$4 = dart.privateName(icon$, "ThemeLinuxIcon.name");
  icon$.ThemeLinuxIcon = class ThemeLinuxIcon extends icon$.LinuxNotificationIcon {
    get name() {
      return this[name$4];
    }
    set name(value) {
      super.name = value;
    }
    static ['_#new#tearOff'](name) {
      return new icon$.ThemeLinuxIcon.new(name);
    }
    get content() {
      return this.name;
    }
    get type() {
      return enums$0.LinuxIconType.theme;
    }
  };
  (icon$.ThemeLinuxIcon.new = function(name) {
    this[name$4] = name;
    ;
  }).prototype = icon$.ThemeLinuxIcon.prototype;
  dart.addTypeTests(icon$.ThemeLinuxIcon);
  dart.addTypeCaches(icon$.ThemeLinuxIcon);
  dart.setGetterSignature(icon$.ThemeLinuxIcon, () => ({
    __proto__: dart.getGetters(icon$.ThemeLinuxIcon.__proto__),
    content: core.Object,
    type: enums$0.LinuxIconType
  }));
  dart.setLibraryUri(icon$.ThemeLinuxIcon, I[45]);
  dart.setFieldSignature(icon$.ThemeLinuxIcon, () => ({
    __proto__: dart.getFields(icon$.ThemeLinuxIcon.__proto__),
    name: dart.finalFieldType(core.String)
  }));
  var data$ = dart.privateName(icon$, "LinuxRawIconData.data");
  var width$ = dart.privateName(icon$, "LinuxRawIconData.width");
  var height$ = dart.privateName(icon$, "LinuxRawIconData.height");
  var rowStride$ = dart.privateName(icon$, "LinuxRawIconData.rowStride");
  var bitsPerSample$ = dart.privateName(icon$, "LinuxRawIconData.bitsPerSample");
  var channels$ = dart.privateName(icon$, "LinuxRawIconData.channels");
  var hasAlpha$ = dart.privateName(icon$, "LinuxRawIconData.hasAlpha");
  icon$.LinuxRawIconData = class LinuxRawIconData extends core.Object {
    get data() {
      return this[data$];
    }
    set data(value) {
      super.data = value;
    }
    get width() {
      return this[width$];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$];
    }
    set height(value) {
      super.height = value;
    }
    get rowStride() {
      return this[rowStride$];
    }
    set rowStride(value) {
      super.rowStride = value;
    }
    get bitsPerSample() {
      return this[bitsPerSample$];
    }
    set bitsPerSample(value) {
      super.bitsPerSample = value;
    }
    get channels() {
      return this[channels$];
    }
    set channels(value) {
      super.channels = value;
    }
    get hasAlpha() {
      return this[hasAlpha$];
    }
    set hasAlpha(value) {
      super.hasAlpha = value;
    }
    static ['_#new#tearOff'](opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let rowStride = opts && 'rowStride' in opts ? opts.rowStride : null;
      let bitsPerSample = opts && 'bitsPerSample' in opts ? opts.bitsPerSample : 8;
      let channels = opts && 'channels' in opts ? opts.channels : 3;
      let hasAlpha = opts && 'hasAlpha' in opts ? opts.hasAlpha : false;
      return new icon$.LinuxRawIconData.new({data: data, width: width, height: height, rowStride: rowStride, bitsPerSample: bitsPerSample, channels: channels, hasAlpha: hasAlpha});
    }
  };
  (icon$.LinuxRawIconData.new = function(opts) {
    let t31;
    let data = opts && 'data' in opts ? opts.data : null;
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let rowStride = opts && 'rowStride' in opts ? opts.rowStride : null;
    let bitsPerSample = opts && 'bitsPerSample' in opts ? opts.bitsPerSample : 8;
    let channels = opts && 'channels' in opts ? opts.channels : 3;
    let hasAlpha = opts && 'hasAlpha' in opts ? opts.hasAlpha : false;
    this[data$] = data;
    this[width$] = width;
    this[height$] = height;
    this[bitsPerSample$] = bitsPerSample;
    this[channels$] = channels;
    this[hasAlpha$] = hasAlpha;
    this[rowStride$] = (t31 = rowStride, t31 == null ? (width * channels * bitsPerSample / 8)[$ceil]() : t31);
    ;
  }).prototype = icon$.LinuxRawIconData.prototype;
  dart.addTypeTests(icon$.LinuxRawIconData);
  dart.addTypeCaches(icon$.LinuxRawIconData);
  dart.setLibraryUri(icon$.LinuxRawIconData, I[45]);
  dart.setFieldSignature(icon$.LinuxRawIconData, () => ({
    __proto__: dart.getFields(icon$.LinuxRawIconData.__proto__),
    data: dart.finalFieldType(typed_data.Uint8List),
    width: dart.finalFieldType(core.int),
    height: dart.finalFieldType(core.int),
    rowStride: dart.finalFieldType(core.int),
    bitsPerSample: dart.finalFieldType(core.int),
    channels: dart.finalFieldType(core.int),
    hasAlpha: dart.finalFieldType(core.bool)
  }));
  var path$ = dart.privateName(icon$, "FilePathLinuxIcon.path");
  icon$.FilePathLinuxIcon = class FilePathLinuxIcon extends icon$.LinuxNotificationIcon {
    get path() {
      return this[path$];
    }
    set path(value) {
      super.path = value;
    }
    static ['_#new#tearOff'](path) {
      return new icon$.FilePathLinuxIcon.new(path);
    }
    get content() {
      return this.path;
    }
    get type() {
      return enums$0.LinuxIconType.filePath;
    }
  };
  (icon$.FilePathLinuxIcon.new = function(path) {
    this[path$] = path;
    ;
  }).prototype = icon$.FilePathLinuxIcon.prototype;
  dart.addTypeTests(icon$.FilePathLinuxIcon);
  dart.addTypeCaches(icon$.FilePathLinuxIcon);
  dart.setGetterSignature(icon$.FilePathLinuxIcon, () => ({
    __proto__: dart.getGetters(icon$.FilePathLinuxIcon.__proto__),
    content: core.Object,
    type: enums$0.LinuxIconType
  }));
  dart.setLibraryUri(icon$.FilePathLinuxIcon, I[45]);
  dart.setFieldSignature(icon$.FilePathLinuxIcon, () => ({
    __proto__: dart.getFields(icon$.FilePathLinuxIcon.__proto__),
    path: dart.finalFieldType(core.String)
  }));
  var defaultActionName$ = dart.privateName(initialization_settings$1, "LinuxInitializationSettings.defaultActionName");
  var defaultIcon$0 = dart.privateName(initialization_settings$1, "LinuxInitializationSettings.defaultIcon");
  var defaultSound$ = dart.privateName(initialization_settings$1, "LinuxInitializationSettings.defaultSound");
  var defaultSuppressSound$ = dart.privateName(initialization_settings$1, "LinuxInitializationSettings.defaultSuppressSound");
  initialization_settings$1.LinuxInitializationSettings = class LinuxInitializationSettings extends core.Object {
    get defaultActionName() {
      return this[defaultActionName$];
    }
    set defaultActionName(value) {
      super.defaultActionName = value;
    }
    get defaultIcon() {
      return this[defaultIcon$0];
    }
    set defaultIcon(value) {
      super.defaultIcon = value;
    }
    get defaultSound() {
      return this[defaultSound$];
    }
    set defaultSound(value) {
      super.defaultSound = value;
    }
    get defaultSuppressSound() {
      return this[defaultSuppressSound$];
    }
    set defaultSuppressSound(value) {
      super.defaultSuppressSound = value;
    }
    static ['_#new#tearOff'](opts) {
      let defaultActionName = opts && 'defaultActionName' in opts ? opts.defaultActionName : null;
      let defaultIcon = opts && 'defaultIcon' in opts ? opts.defaultIcon : null;
      let defaultSound = opts && 'defaultSound' in opts ? opts.defaultSound : null;
      let defaultSuppressSound = opts && 'defaultSuppressSound' in opts ? opts.defaultSuppressSound : false;
      return new initialization_settings$1.LinuxInitializationSettings.new({defaultActionName: defaultActionName, defaultIcon: defaultIcon, defaultSound: defaultSound, defaultSuppressSound: defaultSuppressSound});
    }
  };
  (initialization_settings$1.LinuxInitializationSettings.new = function(opts) {
    let defaultActionName = opts && 'defaultActionName' in opts ? opts.defaultActionName : null;
    let defaultIcon = opts && 'defaultIcon' in opts ? opts.defaultIcon : null;
    let defaultSound = opts && 'defaultSound' in opts ? opts.defaultSound : null;
    let defaultSuppressSound = opts && 'defaultSuppressSound' in opts ? opts.defaultSuppressSound : false;
    this[defaultActionName$] = defaultActionName;
    this[defaultIcon$0] = defaultIcon;
    this[defaultSound$] = defaultSound;
    this[defaultSuppressSound$] = defaultSuppressSound;
    ;
  }).prototype = initialization_settings$1.LinuxInitializationSettings.prototype;
  dart.addTypeTests(initialization_settings$1.LinuxInitializationSettings);
  dart.addTypeCaches(initialization_settings$1.LinuxInitializationSettings);
  dart.setLibraryUri(initialization_settings$1.LinuxInitializationSettings, I[46]);
  dart.setFieldSignature(initialization_settings$1.LinuxInitializationSettings, () => ({
    __proto__: dart.getFields(initialization_settings$1.LinuxInitializationSettings.__proto__),
    defaultActionName: dart.finalFieldType(core.String),
    defaultIcon: dart.finalFieldType(dart.nullable(icon$.LinuxNotificationIcon)),
    defaultSound: dart.finalFieldType(dart.nullable(sound.LinuxNotificationSound)),
    defaultSuppressSound: dart.finalFieldType(core.bool)
  }));
  var x$ = dart.privateName(location, "LinuxNotificationLocation.x");
  var y$ = dart.privateName(location, "LinuxNotificationLocation.y");
  location.LinuxNotificationLocation = class LinuxNotificationLocation extends core.Object {
    get x() {
      return this[x$];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$];
    }
    set y(value) {
      super.y = value;
    }
    static ['_#new#tearOff'](x, y) {
      return new location.LinuxNotificationLocation.new(x, y);
    }
    copyWith(opts) {
      let t31, t31$;
      let x = opts && 'x' in opts ? opts.x : null;
      let y = opts && 'y' in opts ? opts.y : null;
      return new location.LinuxNotificationLocation.new((t31 = x, t31 == null ? this.x : t31), (t31$ = y, t31$ == null ? this.y : t31$));
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      return location.LinuxNotificationLocation.is(other) && other.x === this.x && other.y === this.y;
    }
    get hashCode() {
      return (this.x[$hashCode] ^ this.y[$hashCode]) >>> 0;
    }
    toString() {
      return "LinuxNotificationLocation(x: " + dart.str(this.x) + ", y: " + dart.str(this.y) + ")";
    }
  };
  (location.LinuxNotificationLocation.new = function(x, y) {
    this[x$] = x;
    this[y$] = y;
    ;
  }).prototype = location.LinuxNotificationLocation.prototype;
  dart.addTypeTests(location.LinuxNotificationLocation);
  dart.addTypeCaches(location.LinuxNotificationLocation);
  dart.setMethodSignature(location.LinuxNotificationLocation, () => ({
    __proto__: dart.getMethods(location.LinuxNotificationLocation.__proto__),
    copyWith: dart.fnType(location.LinuxNotificationLocation, [], {x: dart.nullable(core.int), y: dart.nullable(core.int)}, {})
  }));
  dart.setLibraryUri(location.LinuxNotificationLocation, I[47]);
  dart.setFieldSignature(location.LinuxNotificationLocation, () => ({
    __proto__: dart.getFields(location.LinuxNotificationLocation.__proto__),
    x: dart.finalFieldType(core.int),
    y: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(location.LinuxNotificationLocation, ['_equals', 'toString']);
  dart.defineExtensionAccessors(location.LinuxNotificationLocation, ['hashCode']);
  var icon$3 = dart.privateName(notification_details$1, "LinuxNotificationDetails.icon");
  var sound$3 = dart.privateName(notification_details$1, "LinuxNotificationDetails.sound");
  var category$0 = dart.privateName(notification_details$1, "LinuxNotificationDetails.category");
  var urgency$ = dart.privateName(notification_details$1, "LinuxNotificationDetails.urgency");
  var timeout$ = dart.privateName(notification_details$1, "LinuxNotificationDetails.timeout");
  var resident$ = dart.privateName(notification_details$1, "LinuxNotificationDetails.resident");
  var suppressSound$ = dart.privateName(notification_details$1, "LinuxNotificationDetails.suppressSound");
  var transient$ = dart.privateName(notification_details$1, "LinuxNotificationDetails.transient");
  var location$0 = dart.privateName(notification_details$1, "LinuxNotificationDetails.location");
  var defaultActionName$0 = dart.privateName(notification_details$1, "LinuxNotificationDetails.defaultActionName");
  var customHints$ = dart.privateName(notification_details$1, "LinuxNotificationDetails.customHints");
  var actions$2 = dart.privateName(notification_details$1, "LinuxNotificationDetails.actions");
  var actionKeyAsIconName$ = dart.privateName(notification_details$1, "LinuxNotificationDetails.actionKeyAsIconName");
  var LinuxNotificationTimeout_value = dart.privateName(timeout, "LinuxNotificationTimeout.value");
  notification_details$1.LinuxNotificationDetails = class LinuxNotificationDetails extends core.Object {
    get icon() {
      return this[icon$3];
    }
    set icon(value) {
      super.icon = value;
    }
    get sound() {
      return this[sound$3];
    }
    set sound(value) {
      super.sound = value;
    }
    get category() {
      return this[category$0];
    }
    set category(value) {
      super.category = value;
    }
    get urgency() {
      return this[urgency$];
    }
    set urgency(value) {
      super.urgency = value;
    }
    get timeout() {
      return this[timeout$];
    }
    set timeout(value) {
      super.timeout = value;
    }
    get resident() {
      return this[resident$];
    }
    set resident(value) {
      super.resident = value;
    }
    get suppressSound() {
      return this[suppressSound$];
    }
    set suppressSound(value) {
      super.suppressSound = value;
    }
    get transient() {
      return this[transient$];
    }
    set transient(value) {
      super.transient = value;
    }
    get location() {
      return this[location$0];
    }
    set location(value) {
      super.location = value;
    }
    get defaultActionName() {
      return this[defaultActionName$0];
    }
    set defaultActionName(value) {
      super.defaultActionName = value;
    }
    get customHints() {
      return this[customHints$];
    }
    set customHints(value) {
      super.customHints = value;
    }
    get actions() {
      return this[actions$2];
    }
    set actions(value) {
      super.actions = value;
    }
    get actionKeyAsIconName() {
      return this[actionKeyAsIconName$];
    }
    set actionKeyAsIconName(value) {
      super.actionKeyAsIconName = value;
    }
    static ['_#new#tearOff'](opts) {
      let icon = opts && 'icon' in opts ? opts.icon : null;
      let sound = opts && 'sound' in opts ? opts.sound : null;
      let category = opts && 'category' in opts ? opts.category : null;
      let urgency = opts && 'urgency' in opts ? opts.urgency : null;
      let timeout = opts && 'timeout' in opts ? opts.timeout : C[195] || CT.C195;
      let resident = opts && 'resident' in opts ? opts.resident : false;
      let suppressSound = opts && 'suppressSound' in opts ? opts.suppressSound : false;
      let transient = opts && 'transient' in opts ? opts.transient : false;
      let location = opts && 'location' in opts ? opts.location : null;
      let defaultActionName = opts && 'defaultActionName' in opts ? opts.defaultActionName : null;
      let customHints = opts && 'customHints' in opts ? opts.customHints : null;
      let actions = opts && 'actions' in opts ? opts.actions : C[196] || CT.C196;
      let actionKeyAsIconName = opts && 'actionKeyAsIconName' in opts ? opts.actionKeyAsIconName : false;
      return new notification_details$1.LinuxNotificationDetails.new({icon: icon, sound: sound, category: category, urgency: urgency, timeout: timeout, resident: resident, suppressSound: suppressSound, transient: transient, location: location, defaultActionName: defaultActionName, customHints: customHints, actions: actions, actionKeyAsIconName: actionKeyAsIconName});
    }
  };
  (notification_details$1.LinuxNotificationDetails.new = function(opts) {
    let icon = opts && 'icon' in opts ? opts.icon : null;
    let sound = opts && 'sound' in opts ? opts.sound : null;
    let category = opts && 'category' in opts ? opts.category : null;
    let urgency = opts && 'urgency' in opts ? opts.urgency : null;
    let timeout = opts && 'timeout' in opts ? opts.timeout : C[195] || CT.C195;
    let resident = opts && 'resident' in opts ? opts.resident : false;
    let suppressSound = opts && 'suppressSound' in opts ? opts.suppressSound : false;
    let transient = opts && 'transient' in opts ? opts.transient : false;
    let location = opts && 'location' in opts ? opts.location : null;
    let defaultActionName = opts && 'defaultActionName' in opts ? opts.defaultActionName : null;
    let customHints = opts && 'customHints' in opts ? opts.customHints : null;
    let actions = opts && 'actions' in opts ? opts.actions : C[196] || CT.C196;
    let actionKeyAsIconName = opts && 'actionKeyAsIconName' in opts ? opts.actionKeyAsIconName : false;
    this[icon$3] = icon;
    this[sound$3] = sound;
    this[category$0] = category;
    this[urgency$] = urgency;
    this[timeout$] = timeout;
    this[resident$] = resident;
    this[suppressSound$] = suppressSound;
    this[transient$] = transient;
    this[location$0] = location;
    this[defaultActionName$0] = defaultActionName;
    this[customHints$] = customHints;
    this[actions$2] = actions;
    this[actionKeyAsIconName$] = actionKeyAsIconName;
    ;
  }).prototype = notification_details$1.LinuxNotificationDetails.prototype;
  dart.addTypeTests(notification_details$1.LinuxNotificationDetails);
  dart.addTypeCaches(notification_details$1.LinuxNotificationDetails);
  dart.setLibraryUri(notification_details$1.LinuxNotificationDetails, I[48]);
  dart.setFieldSignature(notification_details$1.LinuxNotificationDetails, () => ({
    __proto__: dart.getFields(notification_details$1.LinuxNotificationDetails.__proto__),
    icon: dart.finalFieldType(dart.nullable(icon$.LinuxNotificationIcon)),
    sound: dart.finalFieldType(dart.nullable(sound.LinuxNotificationSound)),
    category: dart.finalFieldType(dart.nullable(categories$.LinuxNotificationCategory)),
    urgency: dart.finalFieldType(dart.nullable(enums$0.LinuxNotificationUrgency)),
    timeout: dart.finalFieldType(timeout.LinuxNotificationTimeout),
    resident: dart.finalFieldType(core.bool),
    suppressSound: dart.finalFieldType(core.bool),
    transient: dart.finalFieldType(core.bool),
    location: dart.finalFieldType(dart.nullable(location.LinuxNotificationLocation)),
    defaultActionName: dart.finalFieldType(dart.nullable(core.String)),
    customHints: dart.finalFieldType(dart.nullable(core.List$(hint.LinuxNotificationCustomHint))),
    actions: dart.finalFieldType(core.List$(notification_details$1.LinuxNotificationAction)),
    actionKeyAsIconName: dart.finalFieldType(core.bool)
  }));
  var key$0 = dart.privateName(notification_details$1, "LinuxNotificationAction.key");
  var label$0 = dart.privateName(notification_details$1, "LinuxNotificationAction.label");
  notification_details$1.LinuxNotificationAction = class LinuxNotificationAction extends core.Object {
    get key() {
      return this[key$0];
    }
    set key(value) {
      super.key = value;
    }
    get label() {
      return this[label$0];
    }
    set label(value) {
      super.label = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let label = opts && 'label' in opts ? opts.label : null;
      return new notification_details$1.LinuxNotificationAction.new({key: key, label: label});
    }
  };
  (notification_details$1.LinuxNotificationAction.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let label = opts && 'label' in opts ? opts.label : null;
    this[key$0] = key;
    this[label$0] = label;
    ;
  }).prototype = notification_details$1.LinuxNotificationAction.prototype;
  dart.addTypeTests(notification_details$1.LinuxNotificationAction);
  dart.addTypeCaches(notification_details$1.LinuxNotificationAction);
  dart.setLibraryUri(notification_details$1.LinuxNotificationAction, I[48]);
  dart.setFieldSignature(notification_details$1.LinuxNotificationAction, () => ({
    __proto__: dart.getFields(notification_details$1.LinuxNotificationAction.__proto__),
    key: dart.finalFieldType(core.String),
    label: dart.finalFieldType(core.String)
  }));
  sound.LinuxNotificationSound = class LinuxNotificationSound extends core.Object {};
  (sound.LinuxNotificationSound.new = function() {
    ;
  }).prototype = sound.LinuxNotificationSound.prototype;
  dart.addTypeTests(sound.LinuxNotificationSound);
  dart.addTypeCaches(sound.LinuxNotificationSound);
  dart.setLibraryUri(sound.LinuxNotificationSound, I[49]);
  var relativePath$0 = dart.privateName(sound, "AssetsLinuxSound.relativePath");
  sound.AssetsLinuxSound = class AssetsLinuxSound extends sound.LinuxNotificationSound {
    get relativePath() {
      return this[relativePath$0];
    }
    set relativePath(value) {
      super.relativePath = value;
    }
    static ['_#new#tearOff'](relativePath) {
      return new sound.AssetsLinuxSound.new(relativePath);
    }
    get content() {
      return this.relativePath;
    }
    get type() {
      return enums$0.LinuxSoundType.assets;
    }
  };
  (sound.AssetsLinuxSound.new = function(relativePath) {
    this[relativePath$0] = relativePath;
    ;
  }).prototype = sound.AssetsLinuxSound.prototype;
  dart.addTypeTests(sound.AssetsLinuxSound);
  dart.addTypeCaches(sound.AssetsLinuxSound);
  dart.setGetterSignature(sound.AssetsLinuxSound, () => ({
    __proto__: dart.getGetters(sound.AssetsLinuxSound.__proto__),
    content: core.Object,
    type: enums$0.LinuxSoundType
  }));
  dart.setLibraryUri(sound.AssetsLinuxSound, I[49]);
  dart.setFieldSignature(sound.AssetsLinuxSound, () => ({
    __proto__: dart.getFields(sound.AssetsLinuxSound.__proto__),
    relativePath: dart.finalFieldType(core.String)
  }));
  var name$5 = dart.privateName(sound, "ThemeLinuxSound.name");
  sound.ThemeLinuxSound = class ThemeLinuxSound extends sound.LinuxNotificationSound {
    get name() {
      return this[name$5];
    }
    set name(value) {
      super.name = value;
    }
    static ['_#new#tearOff'](name) {
      return new sound.ThemeLinuxSound.new(name);
    }
    get content() {
      return this.name;
    }
    get type() {
      return enums$0.LinuxSoundType.theme;
    }
  };
  (sound.ThemeLinuxSound.new = function(name) {
    this[name$5] = name;
    ;
  }).prototype = sound.ThemeLinuxSound.prototype;
  dart.addTypeTests(sound.ThemeLinuxSound);
  dart.addTypeCaches(sound.ThemeLinuxSound);
  dart.setGetterSignature(sound.ThemeLinuxSound, () => ({
    __proto__: dart.getGetters(sound.ThemeLinuxSound.__proto__),
    content: core.Object,
    type: enums$0.LinuxSoundType
  }));
  dart.setLibraryUri(sound.ThemeLinuxSound, I[49]);
  dart.setFieldSignature(sound.ThemeLinuxSound, () => ({
    __proto__: dart.getFields(sound.ThemeLinuxSound.__proto__),
    name: dart.finalFieldType(core.String)
  }));
  const value$7 = LinuxNotificationTimeout_value;
  timeout.LinuxNotificationTimeout = class LinuxNotificationTimeout extends core.Object {
    get value() {
      return this[value$7];
    }
    set value(value) {
      super.value = value;
    }
    static ['_#new#tearOff'](value) {
      return new timeout.LinuxNotificationTimeout.new(value);
    }
    static ['_#fromDuration#tearOff'](duration) {
      return new timeout.LinuxNotificationTimeout.fromDuration(duration);
    }
    static ['_#systemDefault#tearOff']() {
      return new timeout.LinuxNotificationTimeout.systemDefault();
    }
    static ['_#expiresNever#tearOff']() {
      return new timeout.LinuxNotificationTimeout.expiresNever();
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      return timeout.LinuxNotificationTimeout.is(other) && other.value === this.value;
    }
    get hashCode() {
      return this.value[$hashCode];
    }
    toString() {
      return "LinuxNotificationTimeout(value: " + dart.str(this.value) + ")";
    }
  };
  (timeout.LinuxNotificationTimeout.new = function(value) {
    this[value$7] = value;
    ;
  }).prototype = timeout.LinuxNotificationTimeout.prototype;
  (timeout.LinuxNotificationTimeout.fromDuration = function(duration) {
    this[value$7] = duration.inMilliseconds;
    ;
  }).prototype = timeout.LinuxNotificationTimeout.prototype;
  (timeout.LinuxNotificationTimeout.systemDefault = function() {
    this[value$7] = -1;
    ;
  }).prototype = timeout.LinuxNotificationTimeout.prototype;
  (timeout.LinuxNotificationTimeout.expiresNever = function() {
    this[value$7] = 0;
    ;
  }).prototype = timeout.LinuxNotificationTimeout.prototype;
  dart.addTypeTests(timeout.LinuxNotificationTimeout);
  dart.addTypeCaches(timeout.LinuxNotificationTimeout);
  dart.setLibraryUri(timeout.LinuxNotificationTimeout, I[50]);
  dart.setFieldSignature(timeout.LinuxNotificationTimeout, () => ({
    __proto__: dart.getFields(timeout.LinuxNotificationTimeout.__proto__),
    value: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(timeout.LinuxNotificationTimeout, ['_equals', 'toString']);
  dart.defineExtensionAccessors(timeout.LinuxNotificationTimeout, ['hashCode']);
  plugin_platform_interface.MockPlatformInterfaceMixin = class MockPlatformInterfaceMixin extends core.Object {};
  (plugin_platform_interface.MockPlatformInterfaceMixin.new = function() {
    ;
  }).prototype = plugin_platform_interface.MockPlatformInterfaceMixin.prototype;
  dart.addTypeTests(plugin_platform_interface.MockPlatformInterfaceMixin);
  dart.addTypeCaches(plugin_platform_interface.MockPlatformInterfaceMixin);
  plugin_platform_interface.MockPlatformInterfaceMixin[dart.implements] = () => [plugin_platform_interface.PlatformInterface];
  dart.setLibraryUri(plugin_platform_interface.MockPlatformInterfaceMixin, I[2]);
  types$.RepeatInterval = class RepeatInterval extends core._Enum {
    [_enumToString]() {
      return "RepeatInterval." + this[_name];
    }
  };
  (types$.RepeatInterval.new = function(index, name) {
    types$.RepeatInterval.__proto__.new.call(this, index, name);
    ;
  }).prototype = types$.RepeatInterval.prototype;
  dart.addTypeTests(types$.RepeatInterval);
  dart.addTypeCaches(types$.RepeatInterval);
  dart.setMethodSignature(types$.RepeatInterval, () => ({
    __proto__: dart.getMethods(types$.RepeatInterval.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(types$.RepeatInterval, I[51]);
  dart.setStaticFieldSignature(types$.RepeatInterval, () => ['values', 'everyMinute', 'hourly', 'daily', 'weekly']);
  dart.defineLazy(types$.RepeatInterval, {
    /*types$.RepeatInterval.values*/get values() {
      return C[197] || CT.C197;
    },
    /*types$.RepeatInterval.everyMinute*/get everyMinute() {
      return C[198] || CT.C198;
    },
    /*types$.RepeatInterval.hourly*/get hourly() {
      return C[199] || CT.C199;
    },
    /*types$.RepeatInterval.daily*/get daily() {
      return C[200] || CT.C200;
    },
    /*types$.RepeatInterval.weekly*/get weekly() {
      return C[201] || CT.C201;
    }
  }, false);
  var id$2 = dart.privateName(types$, "PendingNotificationRequest.id");
  var title$1 = dart.privateName(types$, "PendingNotificationRequest.title");
  var body$0 = dart.privateName(types$, "PendingNotificationRequest.body");
  var payload$ = dart.privateName(types$, "PendingNotificationRequest.payload");
  types$.PendingNotificationRequest = class PendingNotificationRequest extends core.Object {
    get id() {
      return this[id$2];
    }
    set id(value) {
      super.id = value;
    }
    get title() {
      return this[title$1];
    }
    set title(value) {
      super.title = value;
    }
    get body() {
      return this[body$0];
    }
    set body(value) {
      super.body = value;
    }
    get payload() {
      return this[payload$];
    }
    set payload(value) {
      super.payload = value;
    }
    static ['_#new#tearOff'](id, title, body, payload) {
      return new types$.PendingNotificationRequest.new(id, title, body, payload);
    }
  };
  (types$.PendingNotificationRequest.new = function(id, title, body, payload) {
    this[id$2] = id;
    this[title$1] = title;
    this[body$0] = body;
    this[payload$] = payload;
    ;
  }).prototype = types$.PendingNotificationRequest.prototype;
  dart.addTypeTests(types$.PendingNotificationRequest);
  dart.addTypeCaches(types$.PendingNotificationRequest);
  dart.setLibraryUri(types$.PendingNotificationRequest, I[51]);
  dart.setFieldSignature(types$.PendingNotificationRequest, () => ({
    __proto__: dart.getFields(types$.PendingNotificationRequest.__proto__),
    id: dart.finalFieldType(core.int),
    title: dart.finalFieldType(dart.nullable(core.String)),
    body: dart.finalFieldType(dart.nullable(core.String)),
    payload: dart.finalFieldType(dart.nullable(core.String))
  }));
  var id$3 = dart.privateName(types$, "ActiveNotification.id");
  var channelId$0 = dart.privateName(types$, "ActiveNotification.channelId");
  var groupKey$0 = dart.privateName(types$, "ActiveNotification.groupKey");
  var title$2 = dart.privateName(types$, "ActiveNotification.title");
  var body$1 = dart.privateName(types$, "ActiveNotification.body");
  var payload$0 = dart.privateName(types$, "ActiveNotification.payload");
  var tag$0 = dart.privateName(types$, "ActiveNotification.tag");
  types$.ActiveNotification = class ActiveNotification extends core.Object {
    get id() {
      return this[id$3];
    }
    set id(value) {
      super.id = value;
    }
    get channelId() {
      return this[channelId$0];
    }
    set channelId(value) {
      super.channelId = value;
    }
    get groupKey() {
      return this[groupKey$0];
    }
    set groupKey(value) {
      super.groupKey = value;
    }
    get title() {
      return this[title$2];
    }
    set title(value) {
      super.title = value;
    }
    get body() {
      return this[body$1];
    }
    set body(value) {
      super.body = value;
    }
    get payload() {
      return this[payload$0];
    }
    set payload(value) {
      super.payload = value;
    }
    get tag() {
      return this[tag$0];
    }
    set tag(value) {
      super.tag = value;
    }
    static ['_#new#tearOff'](opts) {
      let id = opts && 'id' in opts ? opts.id : null;
      let groupKey = opts && 'groupKey' in opts ? opts.groupKey : null;
      let channelId = opts && 'channelId' in opts ? opts.channelId : null;
      let title = opts && 'title' in opts ? opts.title : null;
      let body = opts && 'body' in opts ? opts.body : null;
      let payload = opts && 'payload' in opts ? opts.payload : null;
      let tag = opts && 'tag' in opts ? opts.tag : null;
      return new types$.ActiveNotification.new({id: id, groupKey: groupKey, channelId: channelId, title: title, body: body, payload: payload, tag: tag});
    }
  };
  (types$.ActiveNotification.new = function(opts) {
    let id = opts && 'id' in opts ? opts.id : null;
    let groupKey = opts && 'groupKey' in opts ? opts.groupKey : null;
    let channelId = opts && 'channelId' in opts ? opts.channelId : null;
    let title = opts && 'title' in opts ? opts.title : null;
    let body = opts && 'body' in opts ? opts.body : null;
    let payload = opts && 'payload' in opts ? opts.payload : null;
    let tag = opts && 'tag' in opts ? opts.tag : null;
    this[id$3] = id;
    this[groupKey$0] = groupKey;
    this[channelId$0] = channelId;
    this[title$2] = title;
    this[body$1] = body;
    this[payload$0] = payload;
    this[tag$0] = tag;
    ;
  }).prototype = types$.ActiveNotification.prototype;
  dart.addTypeTests(types$.ActiveNotification);
  dart.addTypeCaches(types$.ActiveNotification);
  dart.setLibraryUri(types$.ActiveNotification, I[51]);
  dart.setFieldSignature(types$.ActiveNotification, () => ({
    __proto__: dart.getFields(types$.ActiveNotification.__proto__),
    id: dart.finalFieldType(core.int),
    channelId: dart.finalFieldType(dart.nullable(core.String)),
    groupKey: dart.finalFieldType(dart.nullable(core.String)),
    title: dart.finalFieldType(dart.nullable(core.String)),
    body: dart.finalFieldType(dart.nullable(core.String)),
    payload: dart.finalFieldType(dart.nullable(core.String)),
    tag: dart.finalFieldType(dart.nullable(core.String))
  }));
  var id$4 = dart.privateName(types$, "NotificationResponse.id");
  var actionId$ = dart.privateName(types$, "NotificationResponse.actionId");
  var input$ = dart.privateName(types$, "NotificationResponse.input");
  var payload$1 = dart.privateName(types$, "NotificationResponse.payload");
  var notificationResponseType$ = dart.privateName(types$, "NotificationResponse.notificationResponseType");
  types$.NotificationResponse = class NotificationResponse extends core.Object {
    get id() {
      return this[id$4];
    }
    set id(value) {
      super.id = value;
    }
    get actionId() {
      return this[actionId$];
    }
    set actionId(value) {
      super.actionId = value;
    }
    get input() {
      return this[input$];
    }
    set input(value) {
      super.input = value;
    }
    get payload() {
      return this[payload$1];
    }
    set payload(value) {
      super.payload = value;
    }
    get notificationResponseType() {
      return this[notificationResponseType$];
    }
    set notificationResponseType(value) {
      super.notificationResponseType = value;
    }
    static ['_#new#tearOff'](opts) {
      let notificationResponseType = opts && 'notificationResponseType' in opts ? opts.notificationResponseType : null;
      let id = opts && 'id' in opts ? opts.id : null;
      let actionId = opts && 'actionId' in opts ? opts.actionId : null;
      let input = opts && 'input' in opts ? opts.input : null;
      let payload = opts && 'payload' in opts ? opts.payload : null;
      return new types$.NotificationResponse.new({notificationResponseType: notificationResponseType, id: id, actionId: actionId, input: input, payload: payload});
    }
  };
  (types$.NotificationResponse.new = function(opts) {
    let notificationResponseType = opts && 'notificationResponseType' in opts ? opts.notificationResponseType : null;
    let id = opts && 'id' in opts ? opts.id : null;
    let actionId = opts && 'actionId' in opts ? opts.actionId : null;
    let input = opts && 'input' in opts ? opts.input : null;
    let payload = opts && 'payload' in opts ? opts.payload : null;
    this[notificationResponseType$] = notificationResponseType;
    this[id$4] = id;
    this[actionId$] = actionId;
    this[input$] = input;
    this[payload$1] = payload;
    ;
  }).prototype = types$.NotificationResponse.prototype;
  dart.addTypeTests(types$.NotificationResponse);
  dart.addTypeCaches(types$.NotificationResponse);
  dart.setLibraryUri(types$.NotificationResponse, I[51]);
  dart.setFieldSignature(types$.NotificationResponse, () => ({
    __proto__: dart.getFields(types$.NotificationResponse.__proto__),
    id: dart.finalFieldType(dart.nullable(core.int)),
    actionId: dart.finalFieldType(dart.nullable(core.String)),
    input: dart.finalFieldType(dart.nullable(core.String)),
    payload: dart.finalFieldType(dart.nullable(core.String)),
    notificationResponseType: dart.finalFieldType(types$.NotificationResponseType)
  }));
  const didNotificationLaunchApp$ = NotificationAppLaunchDetails_didNotificationLaunchApp;
  const notificationResponse$ = NotificationAppLaunchDetails_notificationResponse;
  types$.NotificationAppLaunchDetails = class NotificationAppLaunchDetails extends core.Object {
    get didNotificationLaunchApp() {
      return this[didNotificationLaunchApp$];
    }
    set didNotificationLaunchApp(value) {
      super.didNotificationLaunchApp = value;
    }
    get notificationResponse() {
      return this[notificationResponse$];
    }
    set notificationResponse(value) {
      super.notificationResponse = value;
    }
    static ['_#new#tearOff'](didNotificationLaunchApp, opts) {
      let notificationResponse = opts && 'notificationResponse' in opts ? opts.notificationResponse : null;
      return new types$.NotificationAppLaunchDetails.new(didNotificationLaunchApp, {notificationResponse: notificationResponse});
    }
  };
  (types$.NotificationAppLaunchDetails.new = function(didNotificationLaunchApp, opts) {
    let notificationResponse = opts && 'notificationResponse' in opts ? opts.notificationResponse : null;
    this[didNotificationLaunchApp$] = didNotificationLaunchApp;
    this[notificationResponse$] = notificationResponse;
    ;
  }).prototype = types$.NotificationAppLaunchDetails.prototype;
  dart.addTypeTests(types$.NotificationAppLaunchDetails);
  dart.addTypeCaches(types$.NotificationAppLaunchDetails);
  dart.setLibraryUri(types$.NotificationAppLaunchDetails, I[51]);
  dart.setFieldSignature(types$.NotificationAppLaunchDetails, () => ({
    __proto__: dart.getFields(types$.NotificationAppLaunchDetails.__proto__),
    didNotificationLaunchApp: dart.finalFieldType(core.bool),
    notificationResponse: dart.finalFieldType(dart.nullable(types$.NotificationResponse))
  }));
  types$.NotificationResponseType = class NotificationResponseType extends core._Enum {
    [_enumToString]() {
      return "NotificationResponseType." + this[_name];
    }
  };
  (types$.NotificationResponseType.new = function(index, name) {
    types$.NotificationResponseType.__proto__.new.call(this, index, name);
    ;
  }).prototype = types$.NotificationResponseType.prototype;
  dart.addTypeTests(types$.NotificationResponseType);
  dart.addTypeCaches(types$.NotificationResponseType);
  dart.setMethodSignature(types$.NotificationResponseType, () => ({
    __proto__: dart.getMethods(types$.NotificationResponseType.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(types$.NotificationResponseType, I[51]);
  dart.setStaticFieldSignature(types$.NotificationResponseType, () => ['values', 'selectedNotification', 'selectedNotificationAction']);
  dart.defineLazy(types$.NotificationResponseType, {
    /*types$.NotificationResponseType.values*/get values() {
      return C[202] || CT.C202;
    },
    /*types$.NotificationResponseType.selectedNotification*/get selectedNotification() {
      return C[203] || CT.C203;
    },
    /*types$.NotificationResponseType.selectedNotificationAction*/get selectedNotificationAction() {
      return C[204] || CT.C204;
    }
  }, false);
  helpers.validateId = function validateId(id) {
    core.ArgumentError.checkNotNull(core.int, id, "id");
    if (id > 2147483647 || id < -2147483648) {
      dart.throw(new core.ArgumentError.value(id, "id", "must fit within the size of a 32-bit integer i.e. in the range [-2^31, 2^31 - 1]"));
    }
  };
  var EventChannel__binaryMessenger = dart.privateName(platform_channel, "EventChannel._binaryMessenger");
  var EventChannel_codec = dart.privateName(platform_channel, "EventChannel.codec");
  var EventChannel_name = dart.privateName(platform_channel, "EventChannel.name");
  callback_dispatcher.callbackDispatcher = function callbackDispatcher() {
    binding.WidgetsFlutterBinding.ensureInitialized();
    let backgroundChannel = C[205] || CT.C205;
    let channel = C[20] || CT.C20;
    channel.invokeMethod(core.int, "getCallbackHandle").then(core.Null, dart.fn(handle => {
      let callback = handle == null ? null : T.NotificationResponseToNvoid().as(ui.PluginUtilities.getCallbackFromHandle(new ui.CallbackHandle.fromRawHandle(handle)));
      backgroundChannel.receiveBroadcastStream().map(core.Map, dart.fn(event => core.Map.as(event), T.dynamicToMap())).map(T.MapOfString$dynamic(), dart.fn(event => core.Map.castFrom(dart.dynamic, dart.dynamic, core.String, dart.dynamic, event), T.MapToMapOfString$dynamic())).listen(dart.fn(event => {
        let t35;
        let notificationId = core.Object.as(event[$_get]("notificationId"));
        let id = null;
        if (core.int.is(notificationId)) {
          id = notificationId;
        } else if (typeof notificationId == 'string') {
          id = core.int.parse(notificationId);
        } else {
          id = -1;
        }
        t35 = callback;
        t35 == null ? null : t35(new types$.NotificationResponse.new({id: id, actionId: T.StringN().as(event[$_get]("actionId")), input: T.StringN().as(event[$_get]("input")), payload: T.StringN().as(event[$_get]("payload")), notificationResponseType: types$.NotificationResponseType.selectedNotificationAction}));
      }, T.MapOfString$dynamicTovoid()));
    }, T.intNToNull()));
  };
  helpers$.validateDateIsInTheFuture = function validateDateIsInTheFuture(scheduledDate, matchDateTimeComponents) {
    if (matchDateTimeComponents != null) {
      return;
    }
    if (scheduledDate.isBefore($default.clock.now())) {
      dart.throw(new core.ArgumentError.value(scheduledDate, "scheduledDate", "Must be a date in the future"));
    }
  };
  method_channel_mappers['AndroidInitializationSettingsMapper|toMap'] = function AndroidInitializationSettingsMapper$124toMap($this) {
    return new (T.IdentityMapOfString$Object()).from(["defaultIcon", $this.defaultIcon]);
  };
  method_channel_mappers['AndroidInitializationSettingsMapper|get#toMap'] = function AndroidInitializationSettingsMapper$124get$35toMap($this) {
    return dart.fn(() => method_channel_mappers['AndroidInitializationSettingsMapper|toMap']($this), T.VoidToMapOfString$Object());
  };
  method_channel_mappers['MessageMapper|toMap'] = function MessageMapper$124toMap($this) {
    let t38;
    return new (T.IdentityMapOfString$ObjectN()).from(["text", $this.text, "timestamp", $this.timestamp.millisecondsSinceEpoch, "person", (t38 = $this.person, t38 == null ? null : method_channel_mappers['PersonMapper|toMap'](t38)), "dataMimeType", $this.dataMimeType, "dataUri", $this.dataUri]);
  };
  method_channel_mappers['MessageMapper|get#toMap'] = function MessageMapper$124get$35toMap($this) {
    return dart.fn(() => method_channel_mappers['MessageMapper|toMap']($this), T.VoidToMapOfString$ObjectN());
  };
  method_channel_mappers['AndroidNotificationChannelGroupMapper|toMap'] = function AndroidNotificationChannelGroupMapper$124toMap($this) {
    return new (T.IdentityMapOfString$ObjectN()).from(["id", $this.id, "name", $this.name, "description", $this.description]);
  };
  method_channel_mappers['AndroidNotificationChannelGroupMapper|get#toMap'] = function AndroidNotificationChannelGroupMapper$124get$35toMap($this) {
    return dart.fn(() => method_channel_mappers['AndroidNotificationChannelGroupMapper|toMap']($this), T.VoidToMapOfString$ObjectN());
  };
  method_channel_mappers['AndroidNotificationChannelMapper|toMap'] = function AndroidNotificationChannelMapper$124toMap($this) {
    let t42, t42$, t42$0, t42$1, t42$2;
    t42$2 = new (T.IdentityMapOfString$ObjectN()).from(["id", $this.id, "name", $this.name, "description", $this.description, "groupId", $this.groupId, "showBadge", $this.showBadge, "importance", $this.importance.value, "playSound", $this.playSound, "enableVibration", $this.enableVibration, "vibrationPattern", $this.vibrationPattern, "enableLights", $this.enableLights, "ledColorAlpha", (t42 = $this.ledColor, t42 == null ? null : t42.alpha), "ledColorRed", (t42$ = $this.ledColor, t42$ == null ? null : t42$.red), "ledColorGreen", (t42$0 = $this.ledColor, t42$0 == null ? null : t42$0.green), "ledColorBlue", (t42$1 = $this.ledColor, t42$1 == null ? null : t42$1.blue), "channelAction", enums.AndroidNotificationChannelAction.createIfNotExists.index]);
    return (() => {
      t42$2[$addAll](method_channel_mappers._convertNotificationSoundToMap($this.sound));
      return t42$2;
    })();
  };
  method_channel_mappers['AndroidNotificationChannelMapper|get#toMap'] = function AndroidNotificationChannelMapper$124get$35toMap($this) {
    return dart.fn(() => method_channel_mappers['AndroidNotificationChannelMapper|toMap']($this), T.VoidToMapOfString$ObjectN());
  };
  method_channel_mappers._convertNotificationSoundToMap = function _convertNotificationSoundToMap(sound) {
    if (notification_sound.RawResourceAndroidNotificationSound.is(sound)) {
      return new (T.IdentityMapOfString$Object()).from(["sound", sound.sound, "soundSource", enums.AndroidNotificationSoundSource.rawResource.index]);
    } else if (notification_sound.UriAndroidNotificationSound.is(sound)) {
      return new (T.IdentityMapOfString$Object()).from(["sound", sound.sound, "soundSource", enums.AndroidNotificationSoundSource.uri.index]);
    } else {
      return new (T.IdentityMapOfString$Object()).new();
    }
  };
  method_channel_mappers['PersonMapper|toMap'] = function PersonMapper$124toMap($this) {
    let t44;
    t44 = new (T.IdentityMapOfString$ObjectN()).from(["bot", $this.bot, "important", $this.important, "key", $this.key, "name", $this.name, "uri", $this.uri]);
    return (() => {
      t44[$addAll](method_channel_mappers['PersonMapper|_convertIconToMap']($this));
      return t44;
    })();
  };
  method_channel_mappers['PersonMapper|get#toMap'] = function PersonMapper$124get$35toMap($this) {
    return dart.fn(() => method_channel_mappers['PersonMapper|toMap']($this), T.VoidToMapOfString$ObjectN());
  };
  method_channel_mappers['PersonMapper|get#_convertIconToMap'] = function PersonMapper$124get$35_convertIconToMap($this) {
    return dart.fn(() => method_channel_mappers['PersonMapper|_convertIconToMap']($this), T.VoidToMapOfString$Object());
  };
  method_channel_mappers['PersonMapper|_convertIconToMap'] = function PersonMapper$124_convertIconToMap($this) {
    if ($this.icon == null) {
      return new (T.IdentityMapOfString$Object()).new();
    }
    return new (T.IdentityMapOfString$Object()).from(["icon", dart.nullCheck($this.icon).data, "iconSource", dart.nullCheck($this.icon).source.index]);
  };
  method_channel_mappers['DefaultStyleInformationMapper|toMap'] = function DefaultStyleInformationMapper$124toMap($this) {
    return method_channel_mappers._convertDefaultStyleInformationToMap($this);
  };
  method_channel_mappers['DefaultStyleInformationMapper|get#toMap'] = function DefaultStyleInformationMapper$124get$35toMap($this) {
    return dart.fn(() => method_channel_mappers['DefaultStyleInformationMapper|toMap']($this), T.VoidToMapOfString$ObjectN());
  };
  method_channel_mappers._convertDefaultStyleInformationToMap = function _convertDefaultStyleInformationToMap(styleInformation) {
    return new (T.IdentityMapOfString$ObjectN()).from(["htmlFormatContent", styleInformation.htmlFormatContent, "htmlFormatTitle", styleInformation.htmlFormatTitle]);
  };
  method_channel_mappers['BigPictureStyleInformationMapper|toMap'] = function BigPictureStyleInformationMapper$124toMap($this) {
    let t50;
    t50 = method_channel_mappers._convertDefaultStyleInformationToMap($this);
    return (() => {
      t50[$addAll](method_channel_mappers['BigPictureStyleInformationMapper|_convertBigPictureToMap']($this));
      t50[$addAll](method_channel_mappers['BigPictureStyleInformationMapper|_convertLargeIconToMap']($this));
      t50[$addAll](new (T.IdentityMapOfString$ObjectN()).from(["contentTitle", $this.contentTitle, "summaryText", $this.summaryText, "htmlFormatContentTitle", $this.htmlFormatContentTitle, "htmlFormatSummaryText", $this.htmlFormatSummaryText, "hideExpandedLargeIcon", $this.hideExpandedLargeIcon]));
      return t50;
    })();
  };
  method_channel_mappers['BigPictureStyleInformationMapper|get#toMap'] = function BigPictureStyleInformationMapper$124get$35toMap($this) {
    return dart.fn(() => method_channel_mappers['BigPictureStyleInformationMapper|toMap']($this), T.VoidToMapOfString$ObjectN());
  };
  method_channel_mappers['BigPictureStyleInformationMapper|_convertBigPictureToMap'] = function BigPictureStyleInformationMapper$124_convertBigPictureToMap($this) {
    return new (T.IdentityMapOfString$Object()).from(["bigPicture", $this.bigPicture.data, "bigPictureBitmapSource", $this.bigPicture.source.index]);
  };
  method_channel_mappers['BigPictureStyleInformationMapper|get#_convertBigPictureToMap'] = function BigPictureStyleInformationMapper$124get$35_convertBigPictureToMap($this) {
    return dart.fn(() => method_channel_mappers['BigPictureStyleInformationMapper|_convertBigPictureToMap']($this), T.VoidToMapOfString$Object());
  };
  method_channel_mappers['BigPictureStyleInformationMapper|_convertLargeIconToMap'] = function BigPictureStyleInformationMapper$124_convertLargeIconToMap($this) {
    if ($this.largeIcon == null) {
      return new (T.IdentityMapOfString$Object()).new();
    }
    return new (T.IdentityMapOfString$Object()).from(["largeIcon", dart.nullCheck($this.largeIcon).data, "largeIconBitmapSource", dart.nullCheck($this.largeIcon).source.index]);
  };
  method_channel_mappers['BigPictureStyleInformationMapper|get#_convertLargeIconToMap'] = function BigPictureStyleInformationMapper$124get$35_convertLargeIconToMap($this) {
    return dart.fn(() => method_channel_mappers['BigPictureStyleInformationMapper|_convertLargeIconToMap']($this), T.VoidToMapOfString$Object());
  };
  method_channel_mappers['BigTexStyleInformationMapper|toMap'] = function BigTexStyleInformationMapper$124toMap($this) {
    let t56;
    t56 = method_channel_mappers._convertDefaultStyleInformationToMap($this);
    return (() => {
      t56[$addAll](new (T.IdentityMapOfString$ObjectN()).from(["bigText", $this.bigText, "htmlFormatBigText", $this.htmlFormatBigText, "contentTitle", $this.contentTitle, "htmlFormatContentTitle", $this.htmlFormatContentTitle, "summaryText", $this.summaryText, "htmlFormatSummaryText", $this.htmlFormatSummaryText]));
      return t56;
    })();
  };
  method_channel_mappers['BigTexStyleInformationMapper|get#toMap'] = function BigTexStyleInformationMapper$124get$35toMap($this) {
    return dart.fn(() => method_channel_mappers['BigTexStyleInformationMapper|toMap']($this), T.VoidToMapOfString$ObjectN());
  };
  method_channel_mappers['InboxStyleInformationMapper|get#toMap'] = function InboxStyleInformationMapper$124get$35toMap($this) {
    return dart.fn(() => method_channel_mappers['InboxStyleInformationMapper|toMap']($this), T.VoidToMapOfString$ObjectN());
  };
  method_channel_mappers['InboxStyleInformationMapper|toMap'] = function InboxStyleInformationMapper$124toMap($this) {
    let t59;
    t59 = method_channel_mappers._convertDefaultStyleInformationToMap($this);
    return (() => {
      t59[$addAll](new (T.IdentityMapOfString$ObjectN()).from(["contentTitle", $this.contentTitle, "htmlFormatContentTitle", $this.htmlFormatContentTitle, "summaryText", $this.summaryText, "htmlFormatSummaryText", $this.htmlFormatSummaryText, "lines", $this.lines, "htmlFormatLines", $this.htmlFormatLines]));
      return t59;
    })();
  };
  method_channel_mappers['MessagingStyleInformationMapper|toMap'] = function MessagingStyleInformationMapper$124toMap($this) {
    let t61, t60;
    t60 = method_channel_mappers._convertDefaultStyleInformationToMap($this);
    return (() => {
      t60[$addAll](new (T.IdentityMapOfString$ObjectN()).from(["person", method_channel_mappers['PersonMapper|toMap']($this.person), "conversationTitle", $this.conversationTitle, "groupConversation", $this.groupConversation, "messages", (t61 = $this.messages, t61 == null ? null : t61[$map](T.MapOfString$ObjectN(), dart.fn(m => method_channel_mappers['MessageMapper|toMap'](m), T.MessageToMapOfString$ObjectN()))[$toList]())]));
      return t60;
    })();
  };
  method_channel_mappers['MessagingStyleInformationMapper|get#toMap'] = function MessagingStyleInformationMapper$124get$35toMap($this) {
    return dart.fn(() => method_channel_mappers['MessagingStyleInformationMapper|toMap']($this), T.VoidToMapOfString$ObjectN());
  };
  method_channel_mappers['AndroidNotificationDetailsMapper|toMap'] = function AndroidNotificationDetailsMapper$124toMap($this) {
    let t62, t62$, t62$0, t62$1, t62$2, t62$3, t62$4, t62$5, t62$6, t62$7, t62$8;
    t62$8 = new (T.IdentityMapOfString$ObjectN()).from(["icon", $this.icon, "channelId", $this.channelId, "channelName", $this.channelName, "channelDescription", $this.channelDescription, "channelShowBadge", $this.channelShowBadge, "channelAction", $this.channelAction.index, "importance", $this.importance.value, "priority", $this.priority.value, "playSound", $this.playSound, "enableVibration", $this.enableVibration, "vibrationPattern", $this.vibrationPattern, "groupKey", $this.groupKey, "setAsGroupSummary", $this.setAsGroupSummary, "groupAlertBehavior", $this.groupAlertBehavior.index, "autoCancel", $this.autoCancel, "ongoing", $this.ongoing, "colorAlpha", (t62 = $this.color, t62 == null ? null : t62.alpha), "colorRed", (t62$ = $this.color, t62$ == null ? null : t62$.red), "colorGreen", (t62$0 = $this.color, t62$0 == null ? null : t62$0.green), "colorBlue", (t62$1 = $this.color, t62$1 == null ? null : t62$1.blue), "onlyAlertOnce", $this.onlyAlertOnce, "showWhen", $this.showWhen, "when", $this.when, "usesChronometer", $this.usesChronometer, "showProgress", $this.showProgress, "maxProgress", $this.maxProgress, "progress", $this.progress, "indeterminate", $this.indeterminate, "enableLights", $this.enableLights, "ledColorAlpha", (t62$2 = $this.ledColor, t62$2 == null ? null : t62$2.alpha), "ledColorRed", (t62$3 = $this.ledColor, t62$3 == null ? null : t62$3.red), "ledColorGreen", (t62$4 = $this.ledColor, t62$4 == null ? null : t62$4.green), "ledColorBlue", (t62$5 = $this.ledColor, t62$5 == null ? null : t62$5.blue), "ledOnMs", $this.ledOnMs, "ledOffMs", $this.ledOffMs, "ticker", $this.ticker, "visibility", (t62$6 = $this.visibility, t62$6 == null ? null : t62$6.index), "timeoutAfter", $this.timeoutAfter, "category", (t62$7 = $this.category, t62$7 == null ? null : t62$7.name), "fullScreenIntent", $this.fullScreenIntent, "shortcutId", $this.shortcutId, "additionalFlags", $this.additionalFlags, "subText", $this.subText, "tag", $this.tag, "colorized", $this.colorized, "number", $this.number, "audioAttributesUsage", $this.audioAttributesUsage.value]);
    return (() => {
      t62$8[$addAll](method_channel_mappers['AndroidNotificationDetailsMapper|_convertActionsToMap']($this, $this.actions));
      t62$8[$addAll](method_channel_mappers['AndroidNotificationDetailsMapper|_convertStyleInformationToMap']($this));
      t62$8[$addAll](method_channel_mappers._convertNotificationSoundToMap($this.sound));
      t62$8[$addAll](method_channel_mappers['AndroidNotificationDetailsMapper|_convertLargeIconToMap']($this));
      return t62$8;
    })();
  };
  method_channel_mappers['AndroidNotificationDetailsMapper|get#toMap'] = function AndroidNotificationDetailsMapper$124get$35toMap($this) {
    return dart.fn(() => method_channel_mappers['AndroidNotificationDetailsMapper|toMap']($this), T.VoidToMapOfString$ObjectN());
  };
  method_channel_mappers['AndroidNotificationDetailsMapper|_convertStyleInformationToMap'] = function AndroidNotificationDetailsMapper$124_convertStyleInformationToMap($this) {
    let t64, t64$, t64$0, t64$1, t64$2, t64$3;
    if (big_picture_style_information.BigPictureStyleInformation.is($this.styleInformation)) {
      return new (T.IdentityMapOfString$ObjectN()).from(["style", enums.AndroidNotificationStyle.bigPicture.index, "styleInformation", (t64 = T.BigPictureStyleInformationN().as($this.styleInformation), t64 == null ? null : method_channel_mappers['BigPictureStyleInformationMapper|toMap'](t64))]);
    } else if (big_text_style_information.BigTextStyleInformation.is($this.styleInformation)) {
      return new (T.IdentityMapOfString$ObjectN()).from(["style", enums.AndroidNotificationStyle.bigText.index, "styleInformation", (t64$ = T.BigTextStyleInformationN().as($this.styleInformation), t64$ == null ? null : method_channel_mappers['BigTexStyleInformationMapper|toMap'](t64$))]);
    } else if (inbox_style_information.InboxStyleInformation.is($this.styleInformation)) {
      return new (T.IdentityMapOfString$ObjectN()).from(["style", enums.AndroidNotificationStyle.inbox.index, "styleInformation", (t64$0 = T.InboxStyleInformationN().as($this.styleInformation), t64$0 == null ? null : method_channel_mappers['InboxStyleInformationMapper|toMap'](t64$0))]);
    } else if (messaging_style_information.MessagingStyleInformation.is($this.styleInformation)) {
      return new (T.IdentityMapOfString$ObjectN()).from(["style", enums.AndroidNotificationStyle.messaging.index, "styleInformation", (t64$1 = T.MessagingStyleInformationN().as($this.styleInformation), t64$1 == null ? null : method_channel_mappers['MessagingStyleInformationMapper|toMap'](t64$1))]);
    } else if (media_style_information.MediaStyleInformation.is($this.styleInformation)) {
      return new (T.IdentityMapOfString$ObjectN()).from(["style", enums.AndroidNotificationStyle.media.index, "styleInformation", (t64$2 = T.MediaStyleInformationN().as($this.styleInformation), t64$2 == null ? null : method_channel_mappers['DefaultStyleInformationMapper|toMap'](t64$2))]);
    } else if (default_style_information.DefaultStyleInformation.is($this.styleInformation)) {
      return new (T.IdentityMapOfString$ObjectN()).from(["style", enums.AndroidNotificationStyle.defaultStyle.index, "styleInformation", (t64$3 = T.DefaultStyleInformationN().as($this.styleInformation), t64$3 == null ? null : method_channel_mappers['DefaultStyleInformationMapper|toMap'](t64$3))]);
    } else {
      return new (T.IdentityMapOfString$Object()).from(["style", enums.AndroidNotificationStyle.defaultStyle.index, "styleInformation", method_channel_mappers['DefaultStyleInformationMapper|toMap'](C[206] || CT.C206)]);
    }
  };
  method_channel_mappers['AndroidNotificationDetailsMapper|get#_convertStyleInformationToMap'] = function AndroidNotificationDetailsMapper$124get$35_convertStyleInformationToMap($this) {
    return dart.fn(() => method_channel_mappers['AndroidNotificationDetailsMapper|_convertStyleInformationToMap']($this), T.VoidToMapOfString$ObjectN());
  };
  method_channel_mappers['AndroidNotificationDetailsMapper|_convertLargeIconToMap'] = function AndroidNotificationDetailsMapper$124_convertLargeIconToMap($this) {
    if ($this.largeIcon == null) {
      return new (T.IdentityMapOfString$Object()).new();
    }
    return new (T.IdentityMapOfString$Object()).from(["largeIcon", dart.nullCheck($this.largeIcon).data, "largeIconBitmapSource", dart.nullCheck($this.largeIcon).source.index]);
  };
  method_channel_mappers['AndroidNotificationDetailsMapper|get#_convertLargeIconToMap'] = function AndroidNotificationDetailsMapper$124get$35_convertLargeIconToMap($this) {
    return dart.fn(() => method_channel_mappers['AndroidNotificationDetailsMapper|_convertLargeIconToMap']($this), T.VoidToMapOfString$Object());
  };
  method_channel_mappers['AndroidNotificationDetailsMapper|_convertActionsToMap'] = function AndroidNotificationDetailsMapper$124_convertActionsToMap($this, actions) {
    if (actions == null) {
      return new (T.IdentityMapOfString$Object()).new();
    }
    return new (T.IdentityMapOfString$Object()).from(["actions", actions[$map](T.MapOfString$dynamic(), dart.fn(e => {
        let t69, t69$, t69$0, t69$1;
        return (() => {
          let t68 = new (T.IdentityMapOfString$dynamic()).new();
          t68[$_set]("id", e.id);
          t68[$_set]("title", e.title);
          t68[$_set]("titleColorAlpha", (t69 = e.titleColor, t69 == null ? null : t69.alpha));
          t68[$_set]("titleColorRed", (t69$ = e.titleColor, t69$ == null ? null : t69$.red));
          t68[$_set]("titleColorGreen", (t69$0 = e.titleColor, t69$0 == null ? null : t69$0.green));
          t68[$_set]("titleColorBlue", (t69$1 = e.titleColor, t69$1 == null ? null : t69$1.blue));
          if (e.icon != null) t68[$addAll](new (T.IdentityMapOfString$Object()).from(["icon", dart.nullCheck(e.icon).data, "iconBitmapSource", dart.nullCheck(e.icon).source.index]));
          t68[$_set]("contextual", e.contextual);
          t68[$_set]("showsUserInterface", e.showsUserInterface);
          t68[$_set]("allowGeneratedReplies", e.allowGeneratedReplies);
          t68[$_set]("inputs", e.inputs[$map](T.MapOfString$dynamic(), dart.fn(input => method_channel_mappers['AndroidNotificationDetailsMapper|_convertInputToMap']($this, input), T.AndroidNotificationActionInputToMapOfString$dynamic()))[$toList]());
          t68[$_set]("cancelNotification", e.cancelNotification);
          return t68;
        })();
      }, T.AndroidNotificationActionToMapOfString$dynamic()))[$toList]()]);
  };
  method_channel_mappers['AndroidNotificationDetailsMapper|get#_convertActionsToMap'] = function AndroidNotificationDetailsMapper$124get$35_convertActionsToMap($this) {
    return dart.fn(actions => method_channel_mappers['AndroidNotificationDetailsMapper|_convertActionsToMap']($this, actions), T.ListNOfAndroidNotificationActionToMapOfString$Object());
  };
  method_channel_mappers['AndroidNotificationDetailsMapper|_convertInputToMap'] = function AndroidNotificationDetailsMapper$124_convertInputToMap($this, input) {
    return new (T.IdentityMapOfString$dynamic()).from(["choices", input.choices, "allowFreeFormInput", input.allowFreeFormInput, "label", input.label, "allowedMimeType", input.allowedMimeTypes[$toList]()]);
  };
  method_channel_mappers['AndroidNotificationDetailsMapper|get#_convertInputToMap'] = function AndroidNotificationDetailsMapper$124get$35_convertInputToMap($this) {
    return dart.fn(input => method_channel_mappers['AndroidNotificationDetailsMapper|_convertInputToMap']($this, input), T.AndroidNotificationActionInputToMapOfString$dynamic());
  };
  mappers['DarwinNotificationActionMapper|toMap'] = function DarwinNotificationActionMapper$124toMap($this) {
    return (() => {
      let t73 = new (T.IdentityMapOfString$Object()).new();
      t73[$_set]("identifier", $this.identifier);
      t73[$_set]("title", $this.title);
      t73[$_set]("options", $this.options[$map](core.int, dart.fn(e => (1)[$leftShift](e.index), T.DarwinNotificationActionOptionToint()))[$toList]());
      t73[$_set]("type", diagnostics.describeEnum($this.type));
      if ($this.buttonTitle != null) t73[$_set]("buttonTitle", dart.nullCheck($this.buttonTitle));
      if ($this.placeholder != null) t73[$_set]("placeholder", dart.nullCheck($this.placeholder));
      return t73;
    })();
  };
  mappers['DarwinNotificationActionMapper|get#toMap'] = function DarwinNotificationActionMapper$124get$35toMap($this) {
    return dart.fn(() => mappers['DarwinNotificationActionMapper|toMap']($this), T.VoidToMapOfString$Object());
  };
  mappers['DarwinNotificationCategoryMapper|toMap'] = function DarwinNotificationCategoryMapper$124toMap($this) {
    return new (T.IdentityMapOfString$Object()).from(["identifier", $this.identifier, "actions", $this.actions[$map](T.MapOfString$Object(), dart.fn(e => mappers['DarwinNotificationActionMapper|toMap'](e), T.DarwinNotificationActionToMapOfString$Object()))[$toList](), "options", $this.options[$map](core.int, dart.fn(e => (1)[$leftShift](e.index), T.DarwinNotificationCategoryOptionToint()))[$toList]()]);
  };
  mappers['DarwinNotificationCategoryMapper|get#toMap'] = function DarwinNotificationCategoryMapper$124get$35toMap($this) {
    return dart.fn(() => mappers['DarwinNotificationCategoryMapper|toMap']($this), T.VoidToMapOfString$Object());
  };
  mappers['DarwinInitializationSettingsMapper|toMap'] = function DarwinInitializationSettingsMapper$124toMap($this) {
    return new (T.IdentityMapOfString$Object()).from(["requestAlertPermission", $this.requestAlertPermission, "requestSoundPermission", $this.requestSoundPermission, "requestBadgePermission", $this.requestBadgePermission, "requestCriticalPermission", $this.requestCriticalPermission, "defaultPresentAlert", $this.defaultPresentAlert, "defaultPresentSound", $this.defaultPresentSound, "defaultPresentBadge", $this.defaultPresentBadge, "notificationCategories", $this.notificationCategories[$map](T.MapOfString$Object(), dart.fn(e => mappers['DarwinNotificationCategoryMapper|toMap'](e), T.DarwinNotificationCategoryToMapOfString$Object()))[$toList]()]);
  };
  mappers['DarwinInitializationSettingsMapper|get#toMap'] = function DarwinInitializationSettingsMapper$124get$35toMap($this) {
    return dart.fn(() => mappers['DarwinInitializationSettingsMapper|toMap']($this), T.VoidToMapOfString$Object());
  };
  mappers['DarwinNotificationAttachmentMapper|toMap'] = function DarwinNotificationAttachmentMapper$124toMap($this) {
    let t80;
    return new (T.IdentityMapOfString$Object()).from(["identifier", (t80 = $this.identifier, t80 == null ? "" : t80), "filePath", $this.filePath]);
  };
  mappers['DarwinNotificationAttachmentMapper|get#toMap'] = function DarwinNotificationAttachmentMapper$124get$35toMap($this) {
    return dart.fn(() => mappers['DarwinNotificationAttachmentMapper|toMap']($this), T.VoidToMapOfString$Object());
  };
  mappers['DarwinNotificationDetailsMapper|toMap'] = function DarwinNotificationDetailsMapper$124toMap($this) {
    let t82, t82$;
    return new (T.IdentityMapOfString$ObjectN()).from(["presentAlert", $this.presentAlert, "presentSound", $this.presentSound, "presentBadge", $this.presentBadge, "subtitle", $this.subtitle, "sound", $this.sound, "badgeNumber", $this.badgeNumber, "threadIdentifier", $this.threadIdentifier, "interruptionLevel", (t82 = $this.interruptionLevel, t82 == null ? null : t82.value), "attachments", (t82$ = $this.attachments, t82$ == null ? null : t82$[$map](T.MapOfString$Object(), dart.fn(a => mappers['DarwinNotificationAttachmentMapper|toMap'](a), T.DarwinNotificationAttachmentToMapOfString$Object()))[$toList]()), "categoryIdentifier", $this.categoryIdentifier]);
  };
  mappers['DarwinNotificationDetailsMapper|get#toMap'] = function DarwinNotificationDetailsMapper$124get$35toMap($this) {
    return dart.fn(() => mappers['DarwinNotificationDetailsMapper|toMap']($this), T.VoidToMapOfString$ObjectN());
  };
  type_mappers['TimeMapper|toMap'] = function TimeMapper$124toMap($this) {
    return new (T.IdentityMapOfString$int()).from(["hour", $this.hour, "minute", $this.minute, "second", $this.second]);
  };
  type_mappers['TimeMapper|get#toMap'] = function TimeMapper$124get$35toMap($this) {
    return dart.fn(() => type_mappers['TimeMapper|toMap']($this), T.VoidToMapOfString$int());
  };
  tz_datetime_mapper['TZDateTimeMapper|toMap'] = function TZDateTimeMapper$124toMap($this) {
    function twoDigits(n) {
      if (n >= 10) {
        return dart.str(n);
      }
      return "0" + dart.str(n);
    }
    dart.fn(twoDigits, T.intToString());
    let offsetMinutesComponent = twoDigits($this.timeZoneOffset.inMinutes[$remainder](60));
    let offsetHoursComponent = ($this.timeZoneOffset.inMicroseconds / 3600000000)[$truncate]()[$abs]();
    let iso8601OffsetComponent = ($this.timeZoneOffset.isNegative ? "-" : "+") + twoDigits(offsetHoursComponent) + offsetMinutesComponent;
    let iso8601DateComponent = $this.toIso8601String()[$split](".")[$_get](0)[$replaceAll](iso8601OffsetComponent, "")[$replaceAll]("Z", "");
    return new (T.IdentityMapOfString$Object()).from(["timeZoneName", $this.location.name, "scheduledDateTime", iso8601DateComponent]);
  };
  tz_datetime_mapper['TZDateTimeMapper|get#toMap'] = function TZDateTimeMapper$124get$35toMap($this) {
    return dart.fn(() => tz_datetime_mapper['TZDateTimeMapper|toMap']($this), T.VoidToMapOfString$Object());
  };
  var name$6 = dart.privateName(hint, "LinuxNotificationCustomHint.name");
  var value$8 = dart.privateName(hint, "LinuxNotificationCustomHint.value");
  const _is_LinuxNotificationCustomHint_default = Symbol('_is_LinuxNotificationCustomHint_default');
  hint.LinuxNotificationCustomHint$ = dart.generic(T => {
    class LinuxNotificationCustomHint extends core.Object {
      get name() {
        return this[name$6];
      }
      set name(value) {
        super.name = value;
      }
      get value() {
        return this[value$8];
      }
      set value(value) {
        super.value = value;
      }
      static ['_#new#tearOff'](T, name, value) {
        return new (hint.LinuxNotificationCustomHint$(T)).new(name, value);
      }
    }
    (LinuxNotificationCustomHint.new = function(name, value) {
      this[name$6] = name;
      this[value$8] = value;
      ;
    }).prototype = LinuxNotificationCustomHint.prototype;
    dart.addTypeTests(LinuxNotificationCustomHint);
    LinuxNotificationCustomHint.prototype[_is_LinuxNotificationCustomHint_default] = true;
    dart.addTypeCaches(LinuxNotificationCustomHint);
    dart.setLibraryUri(LinuxNotificationCustomHint, I[52]);
    dart.setFieldSignature(LinuxNotificationCustomHint, () => ({
      __proto__: dart.getFields(LinuxNotificationCustomHint.__proto__),
      name: dart.finalFieldType(core.String),
      value: dart.finalFieldType(hint.LinuxHintValue$(T))
    }));
    return LinuxNotificationCustomHint;
  });
  hint.LinuxNotificationCustomHint = hint.LinuxNotificationCustomHint$();
  dart.addTypeTests(hint.LinuxNotificationCustomHint, _is_LinuxNotificationCustomHint_default);
  const _is_LinuxHintValue_default = Symbol('_is_LinuxHintValue_default');
  hint.LinuxHintValue$ = dart.generic(T => {
    class LinuxHintValue extends core.Object {}
    (LinuxHintValue.new = function() {
      ;
    }).prototype = LinuxHintValue.prototype;
    dart.addTypeTests(LinuxHintValue);
    LinuxHintValue.prototype[_is_LinuxHintValue_default] = true;
    dart.addTypeCaches(LinuxHintValue);
    dart.setLibraryUri(LinuxHintValue, I[52]);
    return LinuxHintValue;
  });
  hint.LinuxHintValue = hint.LinuxHintValue$();
  dart.addTypeTests(hint.LinuxHintValue, _is_LinuxHintValue_default);
  var value$9 = dart.privateName(hint, "LinuxHintArrayValue.value");
  const _is_LinuxHintArrayValue_default = Symbol('_is_LinuxHintArrayValue_default');
  hint.LinuxHintArrayValue$ = dart.generic(T => {
    class LinuxHintArrayValue extends core.Object {
      get value() {
        return this[value$9];
      }
      set value(value) {
        super.value = value;
      }
      static ['_#new#tearOff'](T, value) {
        return new (hint.LinuxHintArrayValue$(T)).new(value);
      }
      get type() {
        return enums$0.LinuxHintValueType.array;
      }
    }
    (LinuxHintArrayValue.new = function(value) {
      this[value$9] = value;
      ;
    }).prototype = LinuxHintArrayValue.prototype;
    dart.addTypeTests(LinuxHintArrayValue);
    LinuxHintArrayValue.prototype[_is_LinuxHintArrayValue_default] = true;
    dart.addTypeCaches(LinuxHintArrayValue);
    LinuxHintArrayValue[dart.implements] = () => [hint.LinuxHintValue$(core.List$(T))];
    dart.setGetterSignature(LinuxHintArrayValue, () => ({
      __proto__: dart.getGetters(LinuxHintArrayValue.__proto__),
      type: enums$0.LinuxHintValueType
    }));
    dart.setLibraryUri(LinuxHintArrayValue, I[52]);
    dart.setFieldSignature(LinuxHintArrayValue, () => ({
      __proto__: dart.getFields(LinuxHintArrayValue.__proto__),
      value: dart.finalFieldType(core.List$(T))
    }));
    return LinuxHintArrayValue;
  });
  hint.LinuxHintArrayValue = hint.LinuxHintArrayValue$();
  dart.addTypeTests(hint.LinuxHintArrayValue, _is_LinuxHintArrayValue_default);
  var value$10 = dart.privateName(hint, "LinuxHintBoolValue.value");
  hint.LinuxHintBoolValue = class LinuxHintBoolValue extends hint.LinuxHintValue$(core.bool) {
    get value() {
      return this[value$10];
    }
    set value(value) {
      super.value = value;
    }
    static ['_#new#tearOff'](value) {
      return new hint.LinuxHintBoolValue.new(value);
    }
    get type() {
      return enums$0.LinuxHintValueType.boolean;
    }
  };
  (hint.LinuxHintBoolValue.new = function(value) {
    this[value$10] = value;
    ;
  }).prototype = hint.LinuxHintBoolValue.prototype;
  dart.addTypeTests(hint.LinuxHintBoolValue);
  dart.addTypeCaches(hint.LinuxHintBoolValue);
  dart.setGetterSignature(hint.LinuxHintBoolValue, () => ({
    __proto__: dart.getGetters(hint.LinuxHintBoolValue.__proto__),
    type: enums$0.LinuxHintValueType
  }));
  dart.setLibraryUri(hint.LinuxHintBoolValue, I[52]);
  dart.setFieldSignature(hint.LinuxHintBoolValue, () => ({
    __proto__: dart.getFields(hint.LinuxHintBoolValue.__proto__),
    value: dart.finalFieldType(core.bool)
  }));
  var value$11 = dart.privateName(hint, "LinuxHintByteValue.value");
  hint.LinuxHintByteValue = class LinuxHintByteValue extends hint.LinuxHintValue$(core.int) {
    get value() {
      return this[value$11];
    }
    set value(value) {
      super.value = value;
    }
    static ['_#new#tearOff'](value) {
      return new hint.LinuxHintByteValue.new(value);
    }
    get type() {
      return enums$0.LinuxHintValueType.byte;
    }
  };
  (hint.LinuxHintByteValue.new = function(value) {
    this[value$11] = value;
    ;
  }).prototype = hint.LinuxHintByteValue.prototype;
  dart.addTypeTests(hint.LinuxHintByteValue);
  dart.addTypeCaches(hint.LinuxHintByteValue);
  dart.setGetterSignature(hint.LinuxHintByteValue, () => ({
    __proto__: dart.getGetters(hint.LinuxHintByteValue.__proto__),
    type: enums$0.LinuxHintValueType
  }));
  dart.setLibraryUri(hint.LinuxHintByteValue, I[52]);
  dart.setFieldSignature(hint.LinuxHintByteValue, () => ({
    __proto__: dart.getFields(hint.LinuxHintByteValue.__proto__),
    value: dart.finalFieldType(core.int)
  }));
  var value$12 = dart.privateName(hint, "LinuxHintDictValue.value");
  const _is_LinuxHintDictValue_default = Symbol('_is_LinuxHintDictValue_default');
  hint.LinuxHintDictValue$ = dart.generic((K, V) => {
    var __t$MapEntryOfK$V = () => (__t$MapEntryOfK$V = dart.constFn(core.MapEntry$(K, V)))();
    var __t$StringAndVToMapEntryOfK$V = () => (__t$StringAndVToMapEntryOfK$V = dart.constFn(dart.fnType(__t$MapEntryOfK$V(), [core.String, V])))();
    class LinuxHintDictValue extends hint.LinuxHintValue$(core.Map$(K, V)) {
      get value() {
        return this[value$12];
      }
      set value(value) {
        super.value = value;
      }
      static ['_#new#tearOff'](K, V, value) {
        return new (hint.LinuxHintDictValue$(K, V)).new(value);
      }
      static ['_#stringVariant#tearOff'](K, V, value) {
        return new (hint.LinuxHintDictValue$(K, V)).stringVariant(value);
      }
      get type() {
        return enums$0.LinuxHintValueType.dict;
      }
    }
    (LinuxHintDictValue.new = function(value) {
      this[value$12] = value;
      ;
    }).prototype = LinuxHintDictValue.prototype;
    (LinuxHintDictValue.stringVariant = function(value) {
      this[value$12] = value[$map](K, V, dart.fn((key, value) => new (__t$MapEntryOfK$V()).__(K.as(new hint.LinuxHintStringValue.new(key)), value), __t$StringAndVToMapEntryOfK$V()));
      ;
    }).prototype = LinuxHintDictValue.prototype;
    dart.addTypeTests(LinuxHintDictValue);
    LinuxHintDictValue.prototype[_is_LinuxHintDictValue_default] = true;
    dart.addTypeCaches(LinuxHintDictValue);
    dart.setGetterSignature(LinuxHintDictValue, () => ({
      __proto__: dart.getGetters(LinuxHintDictValue.__proto__),
      type: enums$0.LinuxHintValueType
    }));
    dart.setLibraryUri(LinuxHintDictValue, I[52]);
    dart.setFieldSignature(LinuxHintDictValue, () => ({
      __proto__: dart.getFields(LinuxHintDictValue.__proto__),
      value: dart.finalFieldType(core.Map$(K, V))
    }));
    return LinuxHintDictValue;
  });
  hint.LinuxHintDictValue = hint.LinuxHintDictValue$();
  dart.addTypeTests(hint.LinuxHintDictValue, _is_LinuxHintDictValue_default);
  var value$13 = dart.privateName(hint, "LinuxHintDoubleValue.value");
  hint.LinuxHintDoubleValue = class LinuxHintDoubleValue extends hint.LinuxHintValue$(core.double) {
    get value() {
      return this[value$13];
    }
    set value(value) {
      super.value = value;
    }
    static ['_#new#tearOff'](value) {
      return new hint.LinuxHintDoubleValue.new(value);
    }
    get type() {
      return enums$0.LinuxHintValueType.double;
    }
  };
  (hint.LinuxHintDoubleValue.new = function(value) {
    this[value$13] = value;
    ;
  }).prototype = hint.LinuxHintDoubleValue.prototype;
  dart.addTypeTests(hint.LinuxHintDoubleValue);
  dart.addTypeCaches(hint.LinuxHintDoubleValue);
  dart.setGetterSignature(hint.LinuxHintDoubleValue, () => ({
    __proto__: dart.getGetters(hint.LinuxHintDoubleValue.__proto__),
    type: enums$0.LinuxHintValueType
  }));
  dart.setLibraryUri(hint.LinuxHintDoubleValue, I[52]);
  dart.setFieldSignature(hint.LinuxHintDoubleValue, () => ({
    __proto__: dart.getFields(hint.LinuxHintDoubleValue.__proto__),
    value: dart.finalFieldType(core.double)
  }));
  var value$14 = dart.privateName(hint, "LinuxHintInt16Value.value");
  hint.LinuxHintInt16Value = class LinuxHintInt16Value extends hint.LinuxHintValue$(core.int) {
    get value() {
      return this[value$14];
    }
    set value(value) {
      super.value = value;
    }
    static ['_#new#tearOff'](value) {
      return new hint.LinuxHintInt16Value.new(value);
    }
    get type() {
      return enums$0.LinuxHintValueType.int16;
    }
  };
  (hint.LinuxHintInt16Value.new = function(value) {
    this[value$14] = value;
    ;
  }).prototype = hint.LinuxHintInt16Value.prototype;
  dart.addTypeTests(hint.LinuxHintInt16Value);
  dart.addTypeCaches(hint.LinuxHintInt16Value);
  dart.setGetterSignature(hint.LinuxHintInt16Value, () => ({
    __proto__: dart.getGetters(hint.LinuxHintInt16Value.__proto__),
    type: enums$0.LinuxHintValueType
  }));
  dart.setLibraryUri(hint.LinuxHintInt16Value, I[52]);
  dart.setFieldSignature(hint.LinuxHintInt16Value, () => ({
    __proto__: dart.getFields(hint.LinuxHintInt16Value.__proto__),
    value: dart.finalFieldType(core.int)
  }));
  var value$15 = dart.privateName(hint, "LinuxHintInt32Value.value");
  hint.LinuxHintInt32Value = class LinuxHintInt32Value extends hint.LinuxHintValue$(core.int) {
    get value() {
      return this[value$15];
    }
    set value(value) {
      super.value = value;
    }
    static ['_#new#tearOff'](value) {
      return new hint.LinuxHintInt32Value.new(value);
    }
    get type() {
      return enums$0.LinuxHintValueType.int32;
    }
  };
  (hint.LinuxHintInt32Value.new = function(value) {
    this[value$15] = value;
    ;
  }).prototype = hint.LinuxHintInt32Value.prototype;
  dart.addTypeTests(hint.LinuxHintInt32Value);
  dart.addTypeCaches(hint.LinuxHintInt32Value);
  dart.setGetterSignature(hint.LinuxHintInt32Value, () => ({
    __proto__: dart.getGetters(hint.LinuxHintInt32Value.__proto__),
    type: enums$0.LinuxHintValueType
  }));
  dart.setLibraryUri(hint.LinuxHintInt32Value, I[52]);
  dart.setFieldSignature(hint.LinuxHintInt32Value, () => ({
    __proto__: dart.getFields(hint.LinuxHintInt32Value.__proto__),
    value: dart.finalFieldType(core.int)
  }));
  var value$16 = dart.privateName(hint, "LinuxHintInt64Value.value");
  hint.LinuxHintInt64Value = class LinuxHintInt64Value extends hint.LinuxHintValue$(core.int) {
    get value() {
      return this[value$16];
    }
    set value(value) {
      super.value = value;
    }
    static ['_#new#tearOff'](value) {
      return new hint.LinuxHintInt64Value.new(value);
    }
    get type() {
      return enums$0.LinuxHintValueType.int64;
    }
  };
  (hint.LinuxHintInt64Value.new = function(value) {
    this[value$16] = value;
    ;
  }).prototype = hint.LinuxHintInt64Value.prototype;
  dart.addTypeTests(hint.LinuxHintInt64Value);
  dart.addTypeCaches(hint.LinuxHintInt64Value);
  dart.setGetterSignature(hint.LinuxHintInt64Value, () => ({
    __proto__: dart.getGetters(hint.LinuxHintInt64Value.__proto__),
    type: enums$0.LinuxHintValueType
  }));
  dart.setLibraryUri(hint.LinuxHintInt64Value, I[52]);
  dart.setFieldSignature(hint.LinuxHintInt64Value, () => ({
    __proto__: dart.getFields(hint.LinuxHintInt64Value.__proto__),
    value: dart.finalFieldType(core.int)
  }));
  var value$17 = dart.privateName(hint, "LinuxHintStringValue.value");
  hint.LinuxHintStringValue = class LinuxHintStringValue extends hint.LinuxHintValue$(core.String) {
    get value() {
      return this[value$17];
    }
    set value(value) {
      super.value = value;
    }
    static ['_#new#tearOff'](value) {
      return new hint.LinuxHintStringValue.new(value);
    }
    get type() {
      return enums$0.LinuxHintValueType.string;
    }
  };
  (hint.LinuxHintStringValue.new = function(value) {
    this[value$17] = value;
    ;
  }).prototype = hint.LinuxHintStringValue.prototype;
  dart.addTypeTests(hint.LinuxHintStringValue);
  dart.addTypeCaches(hint.LinuxHintStringValue);
  dart.setGetterSignature(hint.LinuxHintStringValue, () => ({
    __proto__: dart.getGetters(hint.LinuxHintStringValue.__proto__),
    type: enums$0.LinuxHintValueType
  }));
  dart.setLibraryUri(hint.LinuxHintStringValue, I[52]);
  dart.setFieldSignature(hint.LinuxHintStringValue, () => ({
    __proto__: dart.getFields(hint.LinuxHintStringValue.__proto__),
    value: dart.finalFieldType(core.String)
  }));
  var value$18 = dart.privateName(hint, "LinuxHintStructValue.value");
  hint.LinuxHintStructValue = class LinuxHintStructValue extends hint.LinuxHintValue$(core.List$(hint.LinuxHintValue)) {
    get value() {
      return this[value$18];
    }
    set value(value) {
      super.value = value;
    }
    static ['_#new#tearOff'](value) {
      return new hint.LinuxHintStructValue.new(value);
    }
    get type() {
      return enums$0.LinuxHintValueType.struct;
    }
  };
  (hint.LinuxHintStructValue.new = function(value) {
    this[value$18] = value[$toList]();
    ;
  }).prototype = hint.LinuxHintStructValue.prototype;
  dart.addTypeTests(hint.LinuxHintStructValue);
  dart.addTypeCaches(hint.LinuxHintStructValue);
  dart.setGetterSignature(hint.LinuxHintStructValue, () => ({
    __proto__: dart.getGetters(hint.LinuxHintStructValue.__proto__),
    type: enums$0.LinuxHintValueType
  }));
  dart.setLibraryUri(hint.LinuxHintStructValue, I[52]);
  dart.setFieldSignature(hint.LinuxHintStructValue, () => ({
    __proto__: dart.getFields(hint.LinuxHintStructValue.__proto__),
    value: dart.finalFieldType(core.List$(hint.LinuxHintValue))
  }));
  var value$19 = dart.privateName(hint, "LinuxHintUint16Value.value");
  hint.LinuxHintUint16Value = class LinuxHintUint16Value extends hint.LinuxHintValue$(core.int) {
    get value() {
      return this[value$19];
    }
    set value(value) {
      super.value = value;
    }
    static ['_#new#tearOff'](value) {
      return new hint.LinuxHintUint16Value.new(value);
    }
    get type() {
      return enums$0.LinuxHintValueType.uint16;
    }
  };
  (hint.LinuxHintUint16Value.new = function(value) {
    this[value$19] = value;
    ;
  }).prototype = hint.LinuxHintUint16Value.prototype;
  dart.addTypeTests(hint.LinuxHintUint16Value);
  dart.addTypeCaches(hint.LinuxHintUint16Value);
  dart.setGetterSignature(hint.LinuxHintUint16Value, () => ({
    __proto__: dart.getGetters(hint.LinuxHintUint16Value.__proto__),
    type: enums$0.LinuxHintValueType
  }));
  dart.setLibraryUri(hint.LinuxHintUint16Value, I[52]);
  dart.setFieldSignature(hint.LinuxHintUint16Value, () => ({
    __proto__: dart.getFields(hint.LinuxHintUint16Value.__proto__),
    value: dart.finalFieldType(core.int)
  }));
  var value$20 = dart.privateName(hint, "LinuxHintUint32Value.value");
  hint.LinuxHintUint32Value = class LinuxHintUint32Value extends hint.LinuxHintValue$(core.int) {
    get value() {
      return this[value$20];
    }
    set value(value) {
      super.value = value;
    }
    static ['_#new#tearOff'](value) {
      return new hint.LinuxHintUint32Value.new(value);
    }
    get type() {
      return enums$0.LinuxHintValueType.uint32;
    }
  };
  (hint.LinuxHintUint32Value.new = function(value) {
    this[value$20] = value;
    ;
  }).prototype = hint.LinuxHintUint32Value.prototype;
  dart.addTypeTests(hint.LinuxHintUint32Value);
  dart.addTypeCaches(hint.LinuxHintUint32Value);
  dart.setGetterSignature(hint.LinuxHintUint32Value, () => ({
    __proto__: dart.getGetters(hint.LinuxHintUint32Value.__proto__),
    type: enums$0.LinuxHintValueType
  }));
  dart.setLibraryUri(hint.LinuxHintUint32Value, I[52]);
  dart.setFieldSignature(hint.LinuxHintUint32Value, () => ({
    __proto__: dart.getFields(hint.LinuxHintUint32Value.__proto__),
    value: dart.finalFieldType(core.int)
  }));
  var value$21 = dart.privateName(hint, "LinuxHintUint64Value.value");
  hint.LinuxHintUint64Value = class LinuxHintUint64Value extends hint.LinuxHintValue$(core.int) {
    get value() {
      return this[value$21];
    }
    set value(value) {
      super.value = value;
    }
    static ['_#new#tearOff'](value) {
      return new hint.LinuxHintUint64Value.new(value);
    }
    get type() {
      return enums$0.LinuxHintValueType.uint64;
    }
  };
  (hint.LinuxHintUint64Value.new = function(value) {
    this[value$21] = value;
    ;
  }).prototype = hint.LinuxHintUint64Value.prototype;
  dart.addTypeTests(hint.LinuxHintUint64Value);
  dart.addTypeCaches(hint.LinuxHintUint64Value);
  dart.setGetterSignature(hint.LinuxHintUint64Value, () => ({
    __proto__: dart.getGetters(hint.LinuxHintUint64Value.__proto__),
    type: enums$0.LinuxHintValueType
  }));
  dart.setLibraryUri(hint.LinuxHintUint64Value, I[52]);
  dart.setFieldSignature(hint.LinuxHintUint64Value, () => ({
    __proto__: dart.getFields(hint.LinuxHintUint64Value.__proto__),
    value: dart.finalFieldType(core.int)
  }));
  var value$22 = dart.privateName(hint, "LinuxHintVariantValue.value");
  hint.LinuxHintVariantValue = class LinuxHintVariantValue extends hint.LinuxHintValue$(hint.LinuxHintValue) {
    get value() {
      return this[value$22];
    }
    set value(value) {
      super.value = value;
    }
    static ['_#new#tearOff'](value) {
      return new hint.LinuxHintVariantValue.new(value);
    }
    get type() {
      return enums$0.LinuxHintValueType.variant;
    }
  };
  (hint.LinuxHintVariantValue.new = function(value) {
    this[value$22] = value;
    ;
  }).prototype = hint.LinuxHintVariantValue.prototype;
  dart.addTypeTests(hint.LinuxHintVariantValue);
  dart.addTypeCaches(hint.LinuxHintVariantValue);
  dart.setGetterSignature(hint.LinuxHintVariantValue, () => ({
    __proto__: dart.getGetters(hint.LinuxHintVariantValue.__proto__),
    type: enums$0.LinuxHintValueType
  }));
  dart.setLibraryUri(hint.LinuxHintVariantValue, I[52]);
  dart.setFieldSignature(hint.LinuxHintVariantValue, () => ({
    __proto__: dart.getFields(hint.LinuxHintVariantValue.__proto__),
    value: dart.finalFieldType(hint.LinuxHintValue)
  }));
  var location$1 = dart.privateName(date_time, "TZDateTime.location");
  var timeZone$ = dart.privateName(date_time, "TZDateTime.timeZone");
  var _native = dart.privateName(date_time, "_native");
  var _localDateTime = dart.privateName(date_time, "_localDateTime");
  var _toString = dart.privateName(date_time, "_toString");
  var _value = dart.privateName(date_time, "_value");
  var _value$ = dart.privateName(core, "_value");
  date_time.TZDateTime = class TZDateTime extends core.Object {
    get location() {
      return this[location$1];
    }
    set location(value) {
      super.location = value;
    }
    get timeZone() {
      return this[timeZone$];
    }
    set timeZone(value) {
      super.timeZone = value;
    }
    static _toNative(t) {
      return date_time.TZDateTime.is(t) ? t[_native] : t;
    }
    static _utcFromLocalDateTime(local, location) {
      let localInstant = local.millisecondsSinceEpoch;
      let localTimezone = location.lookupTimeZone(localInstant);
      let localOffset = localTimezone.timeZone.offset;
      let adjustedInstant = localInstant - localOffset;
      let adjustedTimezone = location.lookupTimeZone(adjustedInstant);
      let adjustedOffset = adjustedTimezone.timeZone.offset;
      let milliseconds = localInstant - adjustedOffset;
      if (localOffset !== adjustedOffset) {
        if (localOffset - adjustedOffset < 0 && adjustedOffset !== location.lookupTimeZone(localInstant - adjustedOffset).timeZone.offset) {
          milliseconds = adjustedInstant;
        }
      }
      let microsecondsSinceEpoch = new core.Duration.new({milliseconds: milliseconds, microseconds: local.microsecond}).inMicroseconds;
      return new core.DateTime.fromMicrosecondsSinceEpoch(microsecondsSinceEpoch, {isUtc: true});
    }
    get millisecondsSinceEpoch() {
      return this[_native].millisecondsSinceEpoch;
    }
    get microsecondsSinceEpoch() {
      return this[_native].microsecondsSinceEpoch;
    }
    get isUtc() {
      return date_time.TZDateTime._isUtc(this.location);
    }
    static _isUtc(l) {
      return l === env.UTC;
    }
    get isLocal() {
      return this.location === env.local;
    }
    static ['_#new#tearOff'](location, year, month = 1, day = 1, hour = 0, minute = 0, second = 0, millisecond = 0, microsecond = 0) {
      return new date_time.TZDateTime.new(location, year, month, day, hour, minute, second, millisecond, microsecond);
    }
    static ['_#utc#tearOff'](year, month = 1, day = 1, hour = 0, minute = 0, second = 0, millisecond = 0, microsecond = 0) {
      return new date_time.TZDateTime.utc(year, month, day, hour, minute, second, millisecond, microsecond);
    }
    static ['_#local#tearOff'](year, month = 1, day = 1, hour = 0, minute = 0, second = 0, millisecond = 0, microsecond = 0) {
      return new date_time.TZDateTime.local(year, month, day, hour, minute, second, millisecond, microsecond);
    }
    static ['_#now#tearOff'](location) {
      return new date_time.TZDateTime.now(location);
    }
    static ['_#fromMillisecondsSinceEpoch#tearOff'](location, millisecondsSinceEpoch) {
      return new date_time.TZDateTime.fromMillisecondsSinceEpoch(location, millisecondsSinceEpoch);
    }
    static ['_#fromMicrosecondsSinceEpoch#tearOff'](location, microsecondsSinceEpoch) {
      return new date_time.TZDateTime.fromMicrosecondsSinceEpoch(location, microsecondsSinceEpoch);
    }
    static ['_#from#tearOff'](other, location) {
      return new date_time.TZDateTime.from(other, location);
    }
    static ['_#_#tearOff'](native, location, timeZone) {
      return new date_time.TZDateTime.__(native, location, timeZone);
    }
    static parse(location, formattedString) {
      return new date_time.TZDateTime.from(core.DateTime.parse(formattedString), location);
    }
    toUtc() {
      return this.isUtc ? this : new date_time.TZDateTime.from(this[_native], env.UTC);
    }
    toLocal() {
      return this.isLocal ? this : new date_time.TZDateTime.from(this[_native], env.local);
    }
    static _fourDigits(n) {
      let absN = n[$abs]();
      let sign = n < 0 ? "-" : "";
      if (absN >= 1000) return dart.str(n);
      if (absN >= 100) return sign + "0" + dart.str(absN);
      if (absN >= 10) return sign + "00" + dart.str(absN);
      return sign + "000" + dart.str(absN);
    }
    static _threeDigits(n) {
      if (n >= 100) return dart.str(n);
      if (n >= 10) return "0" + dart.str(n);
      return "00" + dart.str(n);
    }
    static _twoDigits(n) {
      if (n >= 10) return dart.str(n);
      return "0" + dart.str(n);
    }
    toString() {
      return this[_toString]({iso8601: false});
    }
    toIso8601String() {
      return this[_toString]({iso8601: true});
    }
    [_toString](opts) {
      let iso8601 = opts && 'iso8601' in opts ? opts.iso8601 : true;
      let offset = this.timeZone.offset;
      let y = date_time.TZDateTime._fourDigits(this.year);
      let m = date_time.TZDateTime._twoDigits(this.month);
      let d = date_time.TZDateTime._twoDigits(this.day);
      let sep = iso8601 ? "T" : " ";
      let h = date_time.TZDateTime._twoDigits(this.hour);
      let min = date_time.TZDateTime._twoDigits(this.minute);
      let sec = date_time.TZDateTime._twoDigits(this.second);
      let ms = date_time.TZDateTime._threeDigits(this.millisecond);
      let us = this.microsecond === 0 ? "" : date_time.TZDateTime._threeDigits(this.microsecond);
      if (this.isUtc) {
        return y + "-" + m + "-" + d + sep + h + ":" + min + ":" + sec + "." + ms + us + "Z";
      } else {
        let offSign = offset[$sign] >= 0 ? "+" : "-";
        offset = (offset[$abs]() / 1000)[$truncate]();
        let offH = date_time.TZDateTime._twoDigits((offset / 3600)[$truncate]());
        let offM = date_time.TZDateTime._twoDigits((offset[$modulo](3600) / 60)[$truncate]());
        return y + "-" + m + "-" + d + sep + h + ":" + min + ":" + sec + "." + ms + us + offSign + offH + offM;
      }
    }
    add(duration) {
      return new date_time.TZDateTime.from(this[_native].add(duration), this.location);
    }
    subtract(duration) {
      return new date_time.TZDateTime.from(this[_native].subtract(duration), this.location);
    }
    difference(other) {
      return this[_native].difference(date_time.TZDateTime._toNative(other));
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || date_time.TZDateTime.is(other) && this[_native].isAtSameMomentAs(other[_native]) && this.location._equals(other.location);
    }
    isBefore(other) {
      return this[_native].isBefore(date_time.TZDateTime._toNative(other));
    }
    isAfter(other) {
      return this[_native].isAfter(date_time.TZDateTime._toNative(other));
    }
    isAtSameMomentAs(other) {
      return this[_native].isAtSameMomentAs(date_time.TZDateTime._toNative(other));
    }
    compareTo(other) {
      core.DateTime.as(other);
      return this[_native].compareTo(date_time.TZDateTime._toNative(other));
    }
    get hashCode() {
      return this[_native].hashCode;
    }
    get timeZoneName() {
      return this.timeZone.abbreviation;
    }
    get timeZoneOffset() {
      return date_time.TZDateTime._timeZoneOffset(this.timeZone);
    }
    static _timeZoneOffset(timeZone) {
      return new core.Duration.new({milliseconds: timeZone.offset});
    }
    get year() {
      return this[_localDateTime].year;
    }
    get month() {
      return this[_localDateTime].month;
    }
    get day() {
      return this[_localDateTime].day;
    }
    get hour() {
      return this[_localDateTime].hour;
    }
    get minute() {
      return this[_localDateTime].minute;
    }
    get second() {
      return this[_localDateTime].second;
    }
    get millisecond() {
      return this[_localDateTime].millisecond;
    }
    get microsecond() {
      return this[_localDateTime].microsecond;
    }
    get weekday() {
      return this[_localDateTime].weekday;
    }
    get [_value$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[207] || CT.C207)));
    }
  };
  (date_time.TZDateTime.new = function(location, year, month = 1, day = 1, hour = 0, minute = 0, second = 0, millisecond = 0, microsecond = 0) {
    date_time.TZDateTime.from.call(this, date_time.TZDateTime._utcFromLocalDateTime(new core.DateTime.utc(year, month, day, hour, minute, second, millisecond, microsecond), location), location);
  }).prototype = date_time.TZDateTime.prototype;
  (date_time.TZDateTime.utc = function(year, month = 1, day = 1, hour = 0, minute = 0, second = 0, millisecond = 0, microsecond = 0) {
    date_time.TZDateTime.new.call(this, env.UTC, year, month, day, hour, minute, second, millisecond, microsecond);
  }).prototype = date_time.TZDateTime.prototype;
  (date_time.TZDateTime.local = function(year, month = 1, day = 1, hour = 0, minute = 0, second = 0, millisecond = 0, microsecond = 0) {
    date_time.TZDateTime.new.call(this, env.local, year, month, day, hour, minute, second, millisecond, microsecond);
  }).prototype = date_time.TZDateTime.prototype;
  (date_time.TZDateTime.now = function(location) {
    date_time.TZDateTime.from.call(this, new core.DateTime.now(), location);
  }).prototype = date_time.TZDateTime.prototype;
  (date_time.TZDateTime.fromMillisecondsSinceEpoch = function(location, millisecondsSinceEpoch) {
    date_time.TZDateTime.from.call(this, new core.DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch, {isUtc: true}), location);
  }).prototype = date_time.TZDateTime.prototype;
  (date_time.TZDateTime.fromMicrosecondsSinceEpoch = function(location, microsecondsSinceEpoch) {
    date_time.TZDateTime.from.call(this, new core.DateTime.fromMicrosecondsSinceEpoch(microsecondsSinceEpoch, {isUtc: true}), location);
  }).prototype = date_time.TZDateTime.prototype;
  (date_time.TZDateTime.from = function(other, location) {
    date_time.TZDateTime.__.call(this, date_time.TZDateTime._toNative(other).toUtc(), location, date_time.TZDateTime._isUtc(location) ? location$.TimeZone.UTC : location.timeZone(other.millisecondsSinceEpoch));
  }).prototype = date_time.TZDateTime.prototype;
  (date_time.TZDateTime.__ = function(native, location, timeZone) {
    this[location$1] = location;
    this[timeZone$] = timeZone;
    this[_native] = native;
    this[_localDateTime] = date_time.TZDateTime._isUtc(location) ? native : native.add(date_time.TZDateTime._timeZoneOffset(timeZone));
    ;
  }).prototype = date_time.TZDateTime.prototype;
  dart.addTypeTests(date_time.TZDateTime);
  dart.addTypeCaches(date_time.TZDateTime);
  date_time.TZDateTime[dart.implements] = () => [core.DateTime];
  dart.setMethodSignature(date_time.TZDateTime, () => ({
    __proto__: dart.getMethods(date_time.TZDateTime.__proto__),
    toUtc: dart.fnType(date_time.TZDateTime, []),
    toLocal: dart.fnType(date_time.TZDateTime, []),
    toIso8601String: dart.fnType(core.String, []),
    [_toString]: dart.fnType(core.String, [], {iso8601: core.bool}, {}),
    add: dart.fnType(date_time.TZDateTime, [core.Duration]),
    subtract: dart.fnType(date_time.TZDateTime, [core.Duration]),
    difference: dart.fnType(core.Duration, [core.DateTime]),
    isBefore: dart.fnType(core.bool, [core.DateTime]),
    isAfter: dart.fnType(core.bool, [core.DateTime]),
    isAtSameMomentAs: dart.fnType(core.bool, [core.DateTime]),
    compareTo: dart.fnType(core.int, [dart.nullable(core.Object)]),
    [$compareTo]: dart.fnType(core.int, [dart.nullable(core.Object)])
  }));
  dart.setStaticMethodSignature(date_time.TZDateTime, () => ['_toNative', '_utcFromLocalDateTime', '_isUtc', 'parse', '_fourDigits', '_threeDigits', '_twoDigits', '_timeZoneOffset']);
  dart.setGetterSignature(date_time.TZDateTime, () => ({
    __proto__: dart.getGetters(date_time.TZDateTime.__proto__),
    millisecondsSinceEpoch: core.int,
    microsecondsSinceEpoch: core.int,
    isUtc: core.bool,
    isLocal: core.bool,
    timeZoneName: core.String,
    timeZoneOffset: core.Duration,
    year: core.int,
    month: core.int,
    day: core.int,
    hour: core.int,
    minute: core.int,
    second: core.int,
    millisecond: core.int,
    microsecond: core.int,
    weekday: core.int,
    [_value$]: core.int
  }));
  dart.setLibraryUri(date_time.TZDateTime, I[53]);
  dart.setFieldSignature(date_time.TZDateTime, () => ({
    __proto__: dart.getFields(date_time.TZDateTime.__proto__),
    [_localDateTime]: dart.finalFieldType(core.DateTime),
    [_native]: dart.finalFieldType(core.DateTime),
    location: dart.finalFieldType(location$.Location),
    timeZone: dart.finalFieldType(location$.TimeZone)
  }));
  dart.setStaticFieldSignature(date_time.TZDateTime, () => ['maxMillisecondsSinceEpoch', 'minMillisecondsSinceEpoch']);
  dart.defineExtensionMethods(date_time.TZDateTime, ['toString', '_equals', 'compareTo']);
  dart.defineExtensionAccessors(date_time.TZDateTime, ['hashCode']);
  dart.defineLazy(date_time.TZDateTime, {
    /*date_time.TZDateTime.maxMillisecondsSinceEpoch*/get maxMillisecondsSinceEpoch() {
      return 8640000000000000;
    },
    /*date_time.TZDateTime.minMillisecondsSinceEpoch*/get minMillisecondsSinceEpoch() {
      return -8640000000000000;
    }
  }, false);
  env.getLocation = function getLocation(locationName) {
    return env._database.get(locationName);
  };
  env.setLocalLocation = function setLocalLocation(location) {
    env._local = location;
  };
  env.initializeDatabase = function initializeDatabase(rawData) {
    env._database.clear();
    for (let l of tzdb.tzdbDeserialize(rawData)) {
      env._database.add(l);
    }
    env._local = env._UTC;
  };
  dart.copyProperties(env, {
    get _local() {
      let t87;
      t87 = env['_#_local'];
      return t87 == null ? dart.throw(new _internal.LateError.fieldNI("_local")) : t87;
    },
    set _local(_local$35param) {
      env['_#_local'] = _local$35param;
    },
    get timeZoneDatabase() {
      return env._database;
    },
    get UTC() {
      return env._UTC;
    },
    get local() {
      return env._local;
    }
  });
  dart.defineLazy(env, {
    /*env.tzDataDefaultFilename*/get tzDataDefaultFilename() {
      return "latest.tzf";
    },
    /*env._UTC*/get _UTC() {
      return new location$.Location.new("UTC", T.JSArrayOfint().of([-8640000000000000]), T.JSArrayOfint().of([0]), T.JSArrayOfTimeZone().of([location$.TimeZone.UTC]));
    },
    /*env._database*/get _database() {
      return new location_database.LocationDatabase.new();
    },
    /*env['_#_local']*/get ['_#_local']() {
      return null;
    },
    set ['_#_local'](value) {}
  }, false);
  var msg$ = dart.privateName(exceptions, "TimeZoneInitException.msg");
  exceptions.TimeZoneInitException = class TimeZoneInitException extends core.Object {
    get msg() {
      return this[msg$];
    }
    set msg(value) {
      super.msg = value;
    }
    static ['_#new#tearOff'](msg) {
      return new exceptions.TimeZoneInitException.new(msg);
    }
    toString() {
      return this.msg;
    }
  };
  (exceptions.TimeZoneInitException.new = function(msg) {
    this[msg$] = msg;
    ;
  }).prototype = exceptions.TimeZoneInitException.prototype;
  dart.addTypeTests(exceptions.TimeZoneInitException);
  dart.addTypeCaches(exceptions.TimeZoneInitException);
  exceptions.TimeZoneInitException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(exceptions.TimeZoneInitException, I[54]);
  dart.setFieldSignature(exceptions.TimeZoneInitException, () => ({
    __proto__: dart.getFields(exceptions.TimeZoneInitException.__proto__),
    msg: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(exceptions.TimeZoneInitException, ['toString']);
  var msg$0 = dart.privateName(exceptions, "LocationNotFoundException.msg");
  exceptions.LocationNotFoundException = class LocationNotFoundException extends core.Object {
    get msg() {
      return this[msg$0];
    }
    set msg(value) {
      super.msg = value;
    }
    static ['_#new#tearOff'](msg) {
      return new exceptions.LocationNotFoundException.new(msg);
    }
    toString() {
      return this.msg;
    }
  };
  (exceptions.LocationNotFoundException.new = function(msg) {
    this[msg$0] = msg;
    ;
  }).prototype = exceptions.LocationNotFoundException.prototype;
  dart.addTypeTests(exceptions.LocationNotFoundException);
  dart.addTypeCaches(exceptions.LocationNotFoundException);
  exceptions.LocationNotFoundException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(exceptions.LocationNotFoundException, I[54]);
  dart.setFieldSignature(exceptions.LocationNotFoundException, () => ({
    __proto__: dart.getFields(exceptions.LocationNotFoundException.__proto__),
    msg: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(exceptions.LocationNotFoundException, ['toString']);
  var name$7 = dart.privateName(location$, "Location.name");
  var transitionAt$ = dart.privateName(location$, "Location.transitionAt");
  var transitionZone$ = dart.privateName(location$, "Location.transitionZone");
  var zones$ = dart.privateName(location$, "Location.zones");
  var _cacheStart = dart.privateName(location$, "_cacheStart");
  var _cacheEnd = dart.privateName(location$, "_cacheEnd");
  var __Location__cacheZone = dart.privateName(location$, "_#Location#_cacheZone");
  var _cacheZone = dart.privateName(location$, "_cacheZone");
  var TzInstant_end = dart.privateName(location$, "TzInstant.end");
  var TzInstant_start = dart.privateName(location$, "TzInstant.start");
  var TimeZone_abbreviation = dart.privateName(location$, "TimeZone.abbreviation");
  var TimeZone_isDst = dart.privateName(location$, "TimeZone.isDst");
  var TimeZone_offset = dart.privateName(location$, "TimeZone.offset");
  var TzInstant_timeZone = dart.privateName(location$, "TzInstant.timeZone");
  var _firstZone = dart.privateName(location$, "_firstZone");
  var _firstZoneIsUsed = dart.privateName(location$, "_firstZoneIsUsed");
  location$.Location = class Location extends core.Object {
    get name() {
      return this[name$7];
    }
    set name(value) {
      super.name = value;
    }
    get transitionAt() {
      return this[transitionAt$];
    }
    set transitionAt(value) {
      super.transitionAt = value;
    }
    get transitionZone() {
      return this[transitionZone$];
    }
    set transitionZone(value) {
      super.transitionZone = value;
    }
    get zones() {
      return this[zones$];
    }
    set zones(value) {
      super.zones = value;
    }
    get currentTimeZone() {
      return this.timeZone(new core.DateTime.now().millisecondsSinceEpoch);
    }
    get [_cacheZone]() {
      let t87;
      t87 = this[__Location__cacheZone];
      return t87 == null ? dart.throw(new _internal.LateError.fieldNI("_cacheZone")) : t87;
    }
    set [_cacheZone](_cacheZone$35param) {
      this[__Location__cacheZone] = _cacheZone$35param;
    }
    static ['_#new#tearOff'](name, transitionAt, transitionZone, zones) {
      return new location$.Location.new(name, transitionAt, transitionZone, zones);
    }
    translate(millisecondsSinceEpoch) {
      return millisecondsSinceEpoch + this.timeZone(millisecondsSinceEpoch).offset;
    }
    translateToUtc(millisecondsSinceEpoch) {
      let t = this.lookupTimeZone(millisecondsSinceEpoch);
      let tz = t.timeZone;
      let start = t.start;
      let end = t.end;
      let utc = millisecondsSinceEpoch;
      if (tz.offset !== 0) {
        utc = utc - tz.offset;
        if (utc < start) {
          utc = millisecondsSinceEpoch - this.lookupTimeZone(start - 1).timeZone.offset;
        } else if (utc >= end) {
          utc = millisecondsSinceEpoch - this.lookupTimeZone(end).timeZone.offset;
        }
      }
      return utc;
    }
    lookupTimeZone(millisecondsSinceEpoch) {
      if (this.zones[$isEmpty]) {
        return C[208] || CT.C208;
      }
      if (millisecondsSinceEpoch >= this[_cacheStart] && millisecondsSinceEpoch < this[_cacheEnd]) {
        return new location$.TzInstant.new(this[_cacheZone], this[_cacheStart], this[_cacheEnd]);
      }
      if (this.transitionAt[$isEmpty] || millisecondsSinceEpoch < this.transitionAt[$_get](0)) {
        let zone = this[_firstZone]();
        let start = -8640000000000000;
        let end = this.transitionAt[$isEmpty] ? 8640000000000000 : this.transitionAt[$first];
        return new location$.TzInstant.new(zone, start, end);
      }
      let lo = 0;
      let hi = this.transitionAt[$length];
      let end = 8640000000000000;
      while (hi - lo > 1) {
        let m = lo + ((hi - lo) / 2)[$truncate]();
        let at = this.transitionAt[$_get](m);
        if (millisecondsSinceEpoch < at) {
          end = at;
          hi = m;
        } else {
          lo = m;
        }
      }
      return new location$.TzInstant.new(this.zones[$_get](this.transitionZone[$_get](lo)), this.transitionAt[$_get](lo), end);
    }
    timeZone(millisecondsSinceEpoch) {
      return this.lookupTimeZone(millisecondsSinceEpoch).timeZone;
    }
    timeZoneFromLocal(millisecondsSinceEpoch) {
      let t = this.lookupTimeZone(millisecondsSinceEpoch);
      let tz = t.timeZone;
      let start = t.start;
      let end = t.end;
      if (tz.offset !== 0) {
        let utc = millisecondsSinceEpoch - tz.offset;
        if (utc < start) {
          tz = this.lookupTimeZone(start - 1).timeZone;
        } else if (utc >= end) {
          tz = this.lookupTimeZone(end).timeZone;
        }
      }
      return tz;
    }
    [_firstZone]() {
      if (!this[_firstZoneIsUsed]()) {
        return this.zones[$first];
      }
      if (this.transitionZone[$isNotEmpty] && this.zones[$_get](this.transitionZone[$first]).isDst) {
        for (let zi = this.transitionZone[$first] - 1; zi >= 0; zi = zi - 1) {
          let z = this.zones[$_get](zi);
          if (!z.isDst) {
            return z;
          }
        }
      }
      for (let zi of this.transitionZone) {
        let z = this.zones[$_get](zi);
        if (!z.isDst) {
          return z;
        }
      }
      return this.zones[$first];
    }
    [_firstZoneIsUsed]() {
      for (let i of this.transitionZone) {
        if (i === 0) {
          return true;
        }
      }
      return false;
    }
    toString() {
      return this.name;
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || location$.Location.is(other) && this[$runtimeType]._equals(other[$runtimeType]) && this.name === other.name;
    }
    get hashCode() {
      return this.name[$hashCode];
    }
  };
  (location$.Location.new = function(name, transitionAt, transitionZone, zones) {
    this[_cacheStart] = 0;
    this[_cacheEnd] = 0;
    this[__Location__cacheZone] = null;
    this[name$7] = name;
    this[transitionAt$] = transitionAt;
    this[transitionZone$] = transitionZone;
    this[zones$] = zones;
    for (let i = 0; i < this.transitionAt[$length]; i = i + 1) {
      let tAt = this.transitionAt[$_get](i);
      if (tAt <= location$.Location._cacheNow && (i + 1 === this.transitionAt[$length] || location$.Location._cacheNow < this.transitionAt[$_get](i + 1))) {
        this[_cacheStart] = tAt;
        this[_cacheEnd] = 8640000000000000;
        if (i + 1 < this.transitionAt[$length]) {
          this[_cacheEnd] = this.transitionAt[$_get](i + 1);
        }
        this[_cacheZone] = this.zones[$_get](this.transitionZone[$_get](i));
      }
    }
  }).prototype = location$.Location.prototype;
  dart.addTypeTests(location$.Location);
  dart.addTypeCaches(location$.Location);
  dart.setMethodSignature(location$.Location, () => ({
    __proto__: dart.getMethods(location$.Location.__proto__),
    translate: dart.fnType(core.int, [core.int]),
    translateToUtc: dart.fnType(core.int, [core.int]),
    lookupTimeZone: dart.fnType(location$.TzInstant, [core.int]),
    timeZone: dart.fnType(location$.TimeZone, [core.int]),
    timeZoneFromLocal: dart.fnType(location$.TimeZone, [core.int]),
    [_firstZone]: dart.fnType(location$.TimeZone, []),
    [_firstZoneIsUsed]: dart.fnType(core.bool, [])
  }));
  dart.setGetterSignature(location$.Location, () => ({
    __proto__: dart.getGetters(location$.Location.__proto__),
    currentTimeZone: location$.TimeZone,
    [_cacheZone]: location$.TimeZone
  }));
  dart.setSetterSignature(location$.Location, () => ({
    __proto__: dart.getSetters(location$.Location.__proto__),
    [_cacheZone]: location$.TimeZone
  }));
  dart.setLibraryUri(location$.Location, I[55]);
  dart.setFieldSignature(location$.Location, () => ({
    __proto__: dart.getFields(location$.Location.__proto__),
    name: dart.finalFieldType(core.String),
    transitionAt: dart.finalFieldType(core.List$(core.int)),
    transitionZone: dart.finalFieldType(core.List$(core.int)),
    zones: dart.finalFieldType(core.List$(location$.TimeZone)),
    [_cacheStart]: dart.fieldType(core.int),
    [_cacheEnd]: dart.fieldType(core.int),
    [__Location__cacheZone]: dart.fieldType(dart.nullable(location$.TimeZone))
  }));
  dart.setStaticFieldSignature(location$.Location, () => ['_cacheNow']);
  dart.defineExtensionMethods(location$.Location, ['toString', '_equals']);
  dart.defineExtensionAccessors(location$.Location, ['hashCode']);
  dart.defineLazy(location$.Location, {
    /*location$.Location._cacheNow*/get _cacheNow() {
      return new core.DateTime.now().millisecondsSinceEpoch;
    }
  }, false);
  const offset$ = TimeZone_offset;
  const isDst$ = TimeZone_isDst;
  const abbreviation$ = TimeZone_abbreviation;
  location$.TimeZone = class TimeZone extends core.Object {
    get offset() {
      return this[offset$];
    }
    set offset(value) {
      super.offset = value;
    }
    get isDst() {
      return this[isDst$];
    }
    set isDst(value) {
      super.isDst = value;
    }
    get abbreviation() {
      return this[abbreviation$];
    }
    set abbreviation(value) {
      super.abbreviation = value;
    }
    static ['_#new#tearOff'](offset, opts) {
      let isDst = opts && 'isDst' in opts ? opts.isDst : null;
      let abbreviation = opts && 'abbreviation' in opts ? opts.abbreviation : null;
      return new location$.TimeZone.new(offset, {isDst: isDst, abbreviation: abbreviation});
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || location$.TimeZone.is(other) && this.offset === other.offset && this.isDst === other.isDst && this.abbreviation === other.abbreviation;
    }
    get hashCode() {
      let result = 17;
      result = 37 * result + this.offset[$hashCode];
      result = 37 * result + this.isDst[$hashCode];
      result = 37 * result + this.abbreviation[$hashCode];
      return result;
    }
    toString() {
      return "[" + this.abbreviation + " offset=" + dart.str(this.offset) + " dst=" + dart.str(this.isDst) + "]";
    }
  };
  (location$.TimeZone.new = function(offset, opts) {
    let isDst = opts && 'isDst' in opts ? opts.isDst : null;
    let abbreviation = opts && 'abbreviation' in opts ? opts.abbreviation : null;
    this[offset$] = offset;
    this[isDst$] = isDst;
    this[abbreviation$] = abbreviation;
    ;
  }).prototype = location$.TimeZone.prototype;
  dart.addTypeTests(location$.TimeZone);
  dart.addTypeCaches(location$.TimeZone);
  dart.setLibraryUri(location$.TimeZone, I[55]);
  dart.setFieldSignature(location$.TimeZone, () => ({
    __proto__: dart.getFields(location$.TimeZone.__proto__),
    offset: dart.finalFieldType(core.int),
    isDst: dart.finalFieldType(core.bool),
    abbreviation: dart.finalFieldType(core.String)
  }));
  dart.setStaticFieldSignature(location$.TimeZone, () => ['UTC']);
  dart.defineExtensionMethods(location$.TimeZone, ['_equals', 'toString']);
  dart.defineExtensionAccessors(location$.TimeZone, ['hashCode']);
  dart.defineLazy(location$.TimeZone, {
    /*location$.TimeZone.UTC*/get UTC() {
      return C[209] || CT.C209;
    }
  }, false);
  const timeZone$0 = TzInstant_timeZone;
  const start$ = TzInstant_start;
  const end$ = TzInstant_end;
  location$.TzInstant = class TzInstant extends core.Object {
    get timeZone() {
      return this[timeZone$0];
    }
    set timeZone(value) {
      super.timeZone = value;
    }
    get start() {
      return this[start$];
    }
    set start(value) {
      super.start = value;
    }
    get end() {
      return this[end$];
    }
    set end(value) {
      super.end = value;
    }
    static ['_#new#tearOff'](timeZone, start, end) {
      return new location$.TzInstant.new(timeZone, start, end);
    }
  };
  (location$.TzInstant.new = function(timeZone, start, end) {
    this[timeZone$0] = timeZone;
    this[start$] = start;
    this[end$] = end;
    ;
  }).prototype = location$.TzInstant.prototype;
  dart.addTypeTests(location$.TzInstant);
  dart.addTypeCaches(location$.TzInstant);
  dart.setLibraryUri(location$.TzInstant, I[55]);
  dart.setFieldSignature(location$.TzInstant, () => ({
    __proto__: dart.getFields(location$.TzInstant.__proto__),
    timeZone: dart.finalFieldType(location$.TimeZone),
    start: dart.finalFieldType(core.int),
    end: dart.finalFieldType(core.int)
  }));
  dart.defineLazy(location$, {
    /*location$.maxTime*/get maxTime() {
      return 8640000000000000;
    },
    /*location$.minTime*/get minTime() {
      return -8640000000000000;
    }
  }, false);
  var _locations = dart.privateName(location_database, "_locations");
  location_database.LocationDatabase = class LocationDatabase extends core.Object {
    get locations() {
      return this[_locations];
    }
    add(location) {
      this[_locations][$_set](location.name, location);
    }
    get(name) {
      if (!this.isInitialized) {
        dart.throw(new exceptions.LocationNotFoundException.new("Tried to get location before initializing timezone database"));
      }
      let loc = this[_locations][$_get](name);
      if (loc == null) {
        dart.throw(new exceptions.LocationNotFoundException.new("Location with the name \"" + name + "\" doesn't exist"));
      }
      return loc;
    }
    clear() {
      return this[_locations][$clear]();
    }
    get isEmpty() {
      return this.isInitialized;
    }
    get isInitialized() {
      return this[_locations][$isNotEmpty];
    }
    static ['_#new#tearOff']() {
      return new location_database.LocationDatabase.new();
    }
  };
  (location_database.LocationDatabase.new = function() {
    this[_locations] = new (T.IdentityMapOfString$Location()).new();
    ;
  }).prototype = location_database.LocationDatabase.prototype;
  dart.addTypeTests(location_database.LocationDatabase);
  dart.addTypeCaches(location_database.LocationDatabase);
  dart.setMethodSignature(location_database.LocationDatabase, () => ({
    __proto__: dart.getMethods(location_database.LocationDatabase.__proto__),
    add: dart.fnType(dart.void, [location$.Location]),
    get: dart.fnType(location$.Location, [core.String]),
    clear: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(location_database.LocationDatabase, () => ({
    __proto__: dart.getGetters(location_database.LocationDatabase.__proto__),
    locations: core.Map$(core.String, location$.Location),
    isEmpty: core.bool,
    isInitialized: core.bool
  }));
  dart.setLibraryUri(location_database.LocationDatabase, I[56]);
  dart.setFieldSignature(location_database.LocationDatabase, () => ({
    __proto__: dart.getFields(location_database.LocationDatabase.__proto__),
    [_locations]: dart.finalFieldType(core.Map$(core.String, location$.Location))
  }));
  tzdb.tzdbSerialize = function tzdbSerialize(db) {
    let t87;
    let locationsInBytes = T.JSArrayOfListOfint().of([]);
    let bufferLength = 0;
    let iter = (t87 = db.locations[$values][$toList](), (() => {
      t87[$sort](dart.fn((l, r) => l.name[$compareTo](r.name), T.LocationAndLocationToint()));
      return t87;
    })());
    for (let l of iter) {
      let b = tzdb._serializeLocation(l);
      locationsInBytes[$add](b);
      bufferLength = bufferLength + (8 + b[$length]);
      bufferLength = tzdb._align(bufferLength, 8);
    }
    let r = _native_typed_data.NativeUint8List.new(bufferLength);
    let rb = r[$buffer][$asByteData]();
    let offset = 0;
    for (let b of locationsInBytes) {
      let length = tzdb._align(b[$length], 8);
      rb[$setUint32](offset, length);
      r[$setAll](offset + 8, b);
      offset = offset + (8 + length);
    }
    return r;
  };
  tzdb.tzdbDeserialize = function tzdbDeserialize(rawData) {
    return new (T.SyncIterableOfLocation()).new(function* tzdbDeserialize() {
      let data = typed_data.Uint8List.is(rawData) ? rawData : _native_typed_data.NativeUint8List.fromList(rawData);
      let bdata = data[$buffer][$asByteData](data[$offsetInBytes], data[$lengthInBytes]);
      let offset = 0;
      while (offset < data[$length]) {
        let length = bdata[$getUint32](offset);
        if (!(length[$modulo](8) === 0)) dart.assertFailed(null, I[57], 50, 12, "(length % 8) == 0");
        offset = offset + 8;
        yield tzdb._deserializeLocation(data[$buffer][$asUint8List](data[$offsetInBytes] + offset, length));
        offset = offset + length;
      }
    });
  };
  tzdb._serializeLocation = function _serializeLocation(location) {
    let t87, t87$, t87$0;
    let offset = 0;
    let abbreviations = T.JSArrayOfString().of([]);
    let abbreviationsIndex = new (T.IdentityMapOfString$int()).new();
    let zoneAbbreviationOffsets = T.JSArrayOfint().of([]);
    let abbreviationsLength = 0;
    for (let z of location.zones) {
      let ai = abbreviationsIndex[$putIfAbsent](z.abbreviation, dart.fn(() => {
        let ret = abbreviations[$length];
        abbreviationsLength = abbreviationsLength + (z.abbreviation.length + 1);
        abbreviations[$add](z.abbreviation);
        return ret;
      }, T.VoidToint()));
      zoneAbbreviationOffsets[$add](ai);
    }
    let encName = convert.ascii.encode(location.name);
    let nameOffset = 32;
    let nameLength = encName[$length];
    let abbreviationsOffset = nameOffset + nameLength;
    let zonesOffset = tzdb._align(abbreviationsOffset + abbreviationsLength, 4);
    let zonesLength = location.zones[$length];
    let transitionsOffset = tzdb._align(zonesOffset + zonesLength * 8, 8);
    let transitionsLength = location.transitionAt[$length];
    let bufferLength = tzdb._align(transitionsOffset + transitionsLength * 9, 8);
    let result = _native_typed_data.NativeUint8List.new(bufferLength);
    let buffer = typed_data.ByteData.view(result[$buffer]);
    buffer[$setUint32](0, nameOffset);
    buffer[$setUint32](4, nameLength);
    buffer[$setUint32](8, abbreviationsOffset);
    buffer[$setUint32](12, abbreviationsLength);
    buffer[$setUint32](16, zonesOffset);
    buffer[$setUint32](20, zonesLength);
    buffer[$setUint32](24, transitionsOffset);
    buffer[$setUint32](28, transitionsLength);
    offset = nameOffset;
    for (let c of encName) {
      buffer[$setUint8]((t87 = offset, offset = t87 + 1, t87), c);
    }
    offset = abbreviationsOffset;
    for (let a of abbreviations) {
      for (let c of a[$codeUnits]) {
        buffer[$setUint8]((t87$ = offset, offset = t87$ + 1, t87$), c);
      }
      buffer[$setUint8]((t87$0 = offset, offset = t87$0 + 1, t87$0), 0);
    }
    offset = zonesOffset;
    for (let i = 0; i < location.zones[$length]; i = i + 1) {
      let zone = location.zones[$_get](i);
      buffer[$setInt32](offset, (zone.offset / 1000)[$truncate]());
      buffer[$setUint8](offset + 4, zone.isDst ? 1 : 0);
      buffer[$setUint8](offset + 5, zoneAbbreviationOffsets[$_get](i));
      offset = offset + 8;
    }
    offset = transitionsOffset;
    for (let tAt of location.transitionAt) {
      let t = (tAt / 1000)[$floorToDouble]();
      buffer[$setFloat64](offset, t[$toDouble]());
      offset = offset + 8;
    }
    for (let tZone of location.transitionZone) {
      buffer[$setUint8](offset, tZone);
      offset = offset + 1;
    }
    return result;
  };
  tzdb._deserializeLocation = function _deserializeLocation(data) {
    let bdata = data[$buffer][$asByteData](data[$offsetInBytes], data[$lengthInBytes]);
    let offset = 0;
    let nameOffset = bdata[$getUint32](0);
    let nameLength = bdata[$getUint32](4);
    let abbreviationsOffset = bdata[$getUint32](8);
    let abbreviationsLength = bdata[$getUint32](12);
    let zonesOffset = bdata[$getUint32](16);
    let zonesLength = bdata[$getUint32](20);
    let transitionsOffset = bdata[$getUint32](24);
    let transitionsLength = bdata[$getUint32](28);
    let name = convert.ascii.decode(data[$buffer][$asUint8List](data[$offsetInBytes] + nameOffset, nameLength));
    let abbreviations = T.JSArrayOfString().of([]);
    let zones = T.JSArrayOfTimeZone().of([]);
    let transitionAt = T.JSArrayOfint().of([]);
    let transitionZone = T.JSArrayOfint().of([]);
    offset = abbreviationsOffset;
    let abbreviationsEnd = abbreviationsOffset + abbreviationsLength;
    for (let i = abbreviationsOffset; i < abbreviationsEnd; i = i + 1) {
      if (data[$_get](i) === 0) {
        let abbreviation = convert.ascii.decode(data[$buffer][$asUint8List](data[$offsetInBytes] + offset, i - offset));
        abbreviations[$add](abbreviation);
        offset = i + 1;
      }
    }
    offset = zonesOffset;
    if (!(offset[$modulo](4) === 0)) dart.assertFailed(null, I[57], 200, 10, "(offset % 4) == 0");
    for (let i = 0; i < zonesLength; i = i + 1) {
      let zoneOffset = bdata[$getInt32](offset) * 1000;
      let zoneIsDst = bdata[$getUint8](offset + 4);
      let zoneAbbreviationIndex = bdata[$getUint8](offset + 5);
      offset = offset + 8;
      zones[$add](new location$.TimeZone.new(zoneOffset, {isDst: zoneIsDst === 1, abbreviation: abbreviations[$_get](zoneAbbreviationIndex)}));
    }
    offset = transitionsOffset;
    if (!(offset[$modulo](8) === 0)) dart.assertFailed(null, I[57], 216, 10, "(offset % 8) == 0");
    for (let i = 0; i < transitionsLength; i = i + 1) {
      transitionAt[$add](bdata[$getFloat64](offset)[$toInt]() * 1000);
      offset = offset + 8;
    }
    for (let i = 0; i < transitionsLength; i = i + 1) {
      transitionZone[$add](bdata[$getUint8](offset));
      offset = offset + 1;
    }
    return new location$.Location.new(name, transitionAt, transitionZone, zones);
  };
  tzdb._align = function _align(offset, boundary) {
    let i = offset[$modulo](boundary);
    return i === 0 ? offset : offset + (boundary - i);
  };
  dart.trackLibraries("zapp_user_main", {
    "file:///zapp/project/.zapp_entry.dart": $46zapp_entry,
    "file:///zapp/project/lib/main.dart": main,
    "file:///zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart": web_plugin_registrant,
    "package:flutter_local_notifications/flutter_local_notifications.dart": flutter_local_notifications,
    "package:flutter_local_notifications_linux/flutter_local_notifications_linux.dart": flutter_local_notifications_linux,
    "package:flutter_local_notifications_platform_interface/flutter_local_notifications_platform_interface.dart": flutter_local_notifications_platform_interface,
    "package:flutter_local_notifications/src/flutter_local_notifications_plugin.dart": flutter_local_notifications_plugin,
    "package:flutter_local_notifications/src/initialization_settings.dart": initialization_settings,
    "package:flutter_local_notifications/src/notification_details.dart": notification_details,
    "package:flutter_local_notifications/src/platform_flutter_local_notifications.dart": platform_flutter_local_notifications,
    "package:flutter_local_notifications/src/platform_specifics/android/bitmap.dart": bitmap,
    "package:flutter_local_notifications/src/platform_specifics/android/categories.dart": categories,
    "package:flutter_local_notifications/src/platform_specifics/android/enums.dart": enums,
    "package:flutter_local_notifications/src/platform_specifics/android/icon.dart": icon,
    "package:flutter_local_notifications/src/platform_specifics/android/initialization_settings.dart": initialization_settings$,
    "package:flutter_local_notifications/src/platform_specifics/android/message.dart": message,
    "package:flutter_local_notifications/src/platform_specifics/android/notification_channel.dart": notification_channel,
    "package:flutter_local_notifications/src/platform_specifics/android/notification_channel_group.dart": notification_channel_group,
    "package:flutter_local_notifications/src/platform_specifics/android/notification_details.dart": notification_details$,
    "package:flutter_local_notifications/src/platform_specifics/android/notification_sound.dart": notification_sound,
    "package:flutter_local_notifications/src/platform_specifics/android/person.dart": person,
    "package:flutter_local_notifications/src/platform_specifics/android/styles/big_picture_style_information.dart": big_picture_style_information,
    "package:flutter_local_notifications/src/platform_specifics/android/styles/big_text_style_information.dart": big_text_style_information,
    "package:flutter_local_notifications/src/platform_specifics/android/styles/default_style_information.dart": default_style_information,
    "package:flutter_local_notifications/src/platform_specifics/android/styles/inbox_style_information.dart": inbox_style_information,
    "package:flutter_local_notifications/src/platform_specifics/android/styles/media_style_information.dart": media_style_information,
    "package:flutter_local_notifications/src/platform_specifics/android/styles/messaging_style_information.dart": messaging_style_information,
    "package:flutter_local_notifications/src/platform_specifics/android/styles/style_information.dart": style_information,
    "package:flutter_local_notifications/src/platform_specifics/darwin/initialization_settings.dart": initialization_settings$0,
    "package:flutter_local_notifications/src/platform_specifics/darwin/interruption_level.dart": interruption_level,
    "package:flutter_local_notifications/src/platform_specifics/darwin/notification_action.dart": notification_action,
    "package:flutter_local_notifications/src/platform_specifics/darwin/notification_action_option.dart": notification_action_option,
    "package:flutter_local_notifications/src/platform_specifics/darwin/notification_attachment.dart": notification_attachment,
    "package:flutter_local_notifications/src/platform_specifics/darwin/notification_category.dart": notification_category,
    "package:flutter_local_notifications/src/platform_specifics/darwin/notification_category_option.dart": notification_category_option,
    "package:flutter_local_notifications/src/platform_specifics/darwin/notification_details.dart": notification_details$0,
    "package:flutter_local_notifications/src/platform_specifics/ios/enums.dart": enums$,
    "package:flutter_local_notifications/src/typedefs.dart": typedefs,
    "package:flutter_local_notifications/src/types.dart": types,
    "package:flutter_local_notifications_linux/src/flutter_local_notifications_stub.dart": flutter_local_notifications_stub,
    "package:flutter_local_notifications_linux/src/model/capabilities.dart": capabilities,
    "package:flutter_local_notifications_linux/src/model/categories.dart": categories$,
    "package:flutter_local_notifications_linux/src/model/enums.dart": enums$0,
    "package:flutter_local_notifications_linux/src/model/icon.dart": icon$,
    "package:flutter_local_notifications_linux/src/model/initialization_settings.dart": initialization_settings$1,
    "package:flutter_local_notifications_linux/src/model/location.dart": location,
    "package:flutter_local_notifications_linux/src/model/notification_details.dart": notification_details$1,
    "package:flutter_local_notifications_linux/src/model/sound.dart": sound,
    "package:flutter_local_notifications_linux/src/model/timeout.dart": timeout,
    "package:plugin_platform_interface/plugin_platform_interface.dart": plugin_platform_interface,
    "package:flutter_local_notifications_platform_interface/src/types.dart": types$,
    "package:flutter_local_notifications_platform_interface/src/helpers.dart": helpers,
    "package:flutter_local_notifications_platform_interface/src/typedefs.dart": typedefs$,
    "package:timezone/timezone.dart": timezone,
    "package:flutter_local_notifications/src/callback_dispatcher.dart": callback_dispatcher,
    "package:flutter_local_notifications/src/helpers.dart": helpers$,
    "package:flutter_local_notifications/src/platform_specifics/android/method_channel_mappers.dart": method_channel_mappers,
    "package:flutter_local_notifications/src/platform_specifics/darwin/mappers.dart": mappers,
    "package:flutter_local_notifications/src/type_mappers.dart": type_mappers,
    "package:flutter_local_notifications/src/tz_datetime_mapper.dart": tz_datetime_mapper,
    "package:flutter_local_notifications_linux/src/flutter_local_notifications_platform_linux.dart": flutter_local_notifications_platform_linux,
    "package:flutter_local_notifications_linux/src/model/hint.dart": hint,
    "package:timezone/src/date_time.dart": date_time,
    "package:timezone/src/env.dart": env,
    "package:timezone/src/exceptions.dart": exceptions,
    "package:timezone/src/location.dart": location$,
    "package:timezone/src/location_database.dart": location_database,
    "package:timezone/src/tzdb.dart": tzdb
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["/zapp/project/.zapp_entry.dart","/zapp/project/lib/main.dart","/zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart","/zapp/pub/.pub_cache/hosted/pub.dev/plugin_platform_interface-2.1.6/lib/plugin_platform_interface.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications_platform_interface-6.0.0/lib/flutter_local_notifications_platform_interface.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/flutter_local_notifications_plugin.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/initialization_settings.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/notification_details.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/platform_flutter_local_notifications.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/platform_specifics/android/bitmap.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/platform_specifics/android/categories.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/platform_specifics/android/enums.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/platform_specifics/android/icon.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/platform_specifics/android/initialization_settings.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/platform_specifics/android/message.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/platform_specifics/android/notification_channel.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/platform_specifics/android/notification_channel_group.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/platform_specifics/android/notification_details.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/platform_specifics/android/notification_sound.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/platform_specifics/android/person.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/platform_specifics/android/styles/default_style_information.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/platform_specifics/android/styles/big_picture_style_information.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/platform_specifics/android/styles/big_text_style_information.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/platform_specifics/android/styles/inbox_style_information.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/platform_specifics/android/styles/media_style_information.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/platform_specifics/android/styles/messaging_style_information.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/platform_specifics/android/styles/style_information.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/platform_specifics/darwin/initialization_settings.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/platform_specifics/darwin/interruption_level.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/platform_specifics/darwin/notification_action.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/platform_specifics/darwin/notification_action_option.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/platform_specifics/darwin/notification_attachment.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/platform_specifics/darwin/notification_category.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/platform_specifics/darwin/notification_category_option.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/platform_specifics/darwin/notification_details.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/platform_specifics/ios/enums.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/types.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications_linux-2.0.0/lib/src/flutter_local_notifications_platform_linux.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications_linux-2.0.0/lib/src/flutter_local_notifications_stub.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications_linux-2.0.0/lib/src/model/capabilities.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications_linux-2.0.0/lib/src/model/categories.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications_linux-2.0.0/lib/src/model/enums.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications_linux-2.0.0/lib/src/model/icon.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications_linux-2.0.0/lib/src/model/initialization_settings.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications_linux-2.0.0/lib/src/model/location.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications_linux-2.0.0/lib/src/model/notification_details.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications_linux-2.0.0/lib/src/model/sound.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications_linux-2.0.0/lib/src/model/timeout.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications_platform_interface-6.0.0/lib/src/types.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications_platform_interface-6.0.0/lib/src/helpers.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/callback_dispatcher.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/helpers.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/platform_specifics/android/method_channel_mappers.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/platform_specifics/darwin/mappers.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/type_mappers.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications-12.0.4/lib/src/tz_datetime_mapper.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_local_notifications_linux-2.0.0/lib/src/model/hint.dart","/zapp/pub/.pub_cache/hosted/pub.dev/timezone-0.9.4/lib/src/date_time.dart","/zapp/pub/.pub_cache/hosted/pub.dev/timezone-0.9.4/lib/src/env.dart","/zapp/pub/.pub_cache/hosted/pub.dev/timezone-0.9.4/lib/src/exceptions.dart","/zapp/pub/.pub_cache/hosted/pub.dev/timezone-0.9.4/lib/src/location.dart","/zapp/pub/.pub_cache/hosted/pub.dev/timezone-0.9.4/lib/src/location_database.dart","/zapp/pub/.pub_cache/hosted/pub.dev/timezone-0.9.4/lib/src/tzdb.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","file":"main.js"}');
  // Exports:
  return {
    zapp__project__$46zapp_entry: $46zapp_entry,
    zapp__project__lib__main: main,
    zapp__project__$46dart_tool__dartpad__web_plugin_registrant: web_plugin_registrant,
    flutter_local_notifications: flutter_local_notifications,
    flutter_local_notifications_linux: flutter_local_notifications_linux,
    flutter_local_notifications_platform_interface: flutter_local_notifications_platform_interface,
    src__flutter_local_notifications_plugin: flutter_local_notifications_plugin,
    src__initialization_settings: initialization_settings,
    src__notification_details: notification_details,
    src__platform_flutter_local_notifications: platform_flutter_local_notifications,
    src__platform_specifics__android__bitmap: bitmap,
    src__platform_specifics__android__categories: categories,
    src__platform_specifics__android__enums: enums,
    src__platform_specifics__android__icon: icon,
    src__platform_specifics__android__initialization_settings: initialization_settings$,
    src__platform_specifics__android__message: message,
    src__platform_specifics__android__notification_channel: notification_channel,
    src__platform_specifics__android__notification_channel_group: notification_channel_group,
    src__platform_specifics__android__notification_details: notification_details$,
    src__platform_specifics__android__notification_sound: notification_sound,
    src__platform_specifics__android__person: person,
    src__platform_specifics__android__styles__big_picture_style_information: big_picture_style_information,
    src__platform_specifics__android__styles__big_text_style_information: big_text_style_information,
    src__platform_specifics__android__styles__default_style_information: default_style_information,
    src__platform_specifics__android__styles__inbox_style_information: inbox_style_information,
    src__platform_specifics__android__styles__media_style_information: media_style_information,
    src__platform_specifics__android__styles__messaging_style_information: messaging_style_information,
    src__platform_specifics__android__styles__style_information: style_information,
    src__platform_specifics__darwin__initialization_settings: initialization_settings$0,
    src__platform_specifics__darwin__interruption_level: interruption_level,
    src__platform_specifics__darwin__notification_action: notification_action,
    src__platform_specifics__darwin__notification_action_option: notification_action_option,
    src__platform_specifics__darwin__notification_attachment: notification_attachment,
    src__platform_specifics__darwin__notification_category: notification_category,
    src__platform_specifics__darwin__notification_category_option: notification_category_option,
    src__platform_specifics__darwin__notification_details: notification_details$0,
    src__platform_specifics__ios__enums: enums$,
    src__typedefs: typedefs,
    src__types: types,
    src__flutter_local_notifications_stub: flutter_local_notifications_stub,
    src__model__capabilities: capabilities,
    src__model__categories: categories$,
    src__model__enums: enums$0,
    src__model__icon: icon$,
    src__model__initialization_settings: initialization_settings$1,
    src__model__location: location,
    src__model__notification_details: notification_details$1,
    src__model__sound: sound,
    src__model__timeout: timeout,
    plugin_platform_interface: plugin_platform_interface,
    src__types: types$,
    src__helpers: helpers,
    src__typedefs: typedefs$,
    timezone: timezone,
    src__callback_dispatcher: callback_dispatcher,
    src__helpers: helpers$,
    src__platform_specifics__android__method_channel_mappers: method_channel_mappers,
    src__platform_specifics__darwin__mappers: mappers,
    src__type_mappers: type_mappers,
    src__tz_datetime_mapper: tz_datetime_mapper,
    src__flutter_local_notifications_platform_linux: flutter_local_notifications_platform_linux,
    src__model__hint: hint,
    src__date_time: date_time,
    src__env: env,
    src__exceptions: exceptions,
    src__location: location$,
    src__location_database: location_database,
    src__tzdb: tzdb
  };
}));

//# sourceMappingURL=main.js.map
